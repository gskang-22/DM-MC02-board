
DM-MC02-board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e260  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800e530  0800e530  0000f530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e624  0800e624  0000f624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e62c  0800e62c  0000f62c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e630  0800e630  0000f630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800e634  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000c7ec  24000064  0800e698  00010064  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2400c850  0800e698  00010850  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00010064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002a80c  00000000  00000000  00010092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005660  00000000  00000000  0003a89e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f80  00000000  00000000  0003ff00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001860  00000000  00000000  00041e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007031  00000000  00000000  000436e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002b91e  00000000  00000000  0004a711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016795d  00000000  00000000  0007602f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001dd98c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008768  00000000  00000000  001dd9d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000063  00000000  00000000  001e6138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000064 	.word	0x24000064
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800e518 	.word	0x0800e518

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000068 	.word	0x24000068
 800030c:	0800e518 	.word	0x0800e518

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b988 	b.w	8000638 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	468e      	mov	lr, r1
 8000348:	4604      	mov	r4, r0
 800034a:	4688      	mov	r8, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d962      	bls.n	800041c <__udivmoddi4+0xdc>
 8000356:	fab2 f682 	clz	r6, r2
 800035a:	b14e      	cbz	r6, 8000370 <__udivmoddi4+0x30>
 800035c:	f1c6 0320 	rsb	r3, r6, #32
 8000360:	fa01 f806 	lsl.w	r8, r1, r6
 8000364:	fa20 f303 	lsr.w	r3, r0, r3
 8000368:	40b7      	lsls	r7, r6
 800036a:	ea43 0808 	orr.w	r8, r3, r8
 800036e:	40b4      	lsls	r4, r6
 8000370:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fbb8 f1fe 	udiv	r1, r8, lr
 800037c:	0c23      	lsrs	r3, r4, #16
 800037e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000382:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000386:	fb01 f20c 	mul.w	r2, r1, ip
 800038a:	429a      	cmp	r2, r3
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038e:	18fb      	adds	r3, r7, r3
 8000390:	f101 30ff 	add.w	r0, r1, #4294967295
 8000394:	f080 80ea 	bcs.w	800056c <__udivmoddi4+0x22c>
 8000398:	429a      	cmp	r2, r3
 800039a:	f240 80e7 	bls.w	800056c <__udivmoddi4+0x22c>
 800039e:	3902      	subs	r1, #2
 80003a0:	443b      	add	r3, r7
 80003a2:	1a9a      	subs	r2, r3, r2
 80003a4:	b2a3      	uxth	r3, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b6:	459c      	cmp	ip, r3
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x8e>
 80003ba:	18fb      	adds	r3, r7, r3
 80003bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c0:	f080 80d6 	bcs.w	8000570 <__udivmoddi4+0x230>
 80003c4:	459c      	cmp	ip, r3
 80003c6:	f240 80d3 	bls.w	8000570 <__udivmoddi4+0x230>
 80003ca:	443b      	add	r3, r7
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d2:	eba3 030c 	sub.w	r3, r3, ip
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40f3      	lsrs	r3, r6
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xb6>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb0>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa2>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x14c>
 80003fe:	4573      	cmp	r3, lr
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xc8>
 8000402:	4282      	cmp	r2, r0
 8000404:	f200 8105 	bhi.w	8000612 <__udivmoddi4+0x2d2>
 8000408:	1a84      	subs	r4, r0, r2
 800040a:	eb6e 0203 	sbc.w	r2, lr, r3
 800040e:	2001      	movs	r0, #1
 8000410:	4690      	mov	r8, r2
 8000412:	2d00      	cmp	r5, #0
 8000414:	d0e5      	beq.n	80003e2 <__udivmoddi4+0xa2>
 8000416:	e9c5 4800 	strd	r4, r8, [r5]
 800041a:	e7e2      	b.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	2a00      	cmp	r2, #0
 800041e:	f000 8090 	beq.w	8000542 <__udivmoddi4+0x202>
 8000422:	fab2 f682 	clz	r6, r2
 8000426:	2e00      	cmp	r6, #0
 8000428:	f040 80a4 	bne.w	8000574 <__udivmoddi4+0x234>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	0c03      	lsrs	r3, r0, #16
 8000430:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000434:	b280      	uxth	r0, r0
 8000436:	b2bc      	uxth	r4, r7
 8000438:	2101      	movs	r1, #1
 800043a:	fbb2 fcfe 	udiv	ip, r2, lr
 800043e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000446:	fb04 f20c 	mul.w	r2, r4, ip
 800044a:	429a      	cmp	r2, r3
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x11e>
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x11c>
 8000456:	429a      	cmp	r2, r3
 8000458:	f200 80e0 	bhi.w	800061c <__udivmoddi4+0x2dc>
 800045c:	46c4      	mov	ip, r8
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	fbb3 f2fe 	udiv	r2, r3, lr
 8000464:	fb0e 3312 	mls	r3, lr, r2, r3
 8000468:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800046c:	fb02 f404 	mul.w	r4, r2, r4
 8000470:	429c      	cmp	r4, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x144>
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	f102 30ff 	add.w	r0, r2, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x142>
 800047c:	429c      	cmp	r4, r3
 800047e:	f200 80ca 	bhi.w	8000616 <__udivmoddi4+0x2d6>
 8000482:	4602      	mov	r2, r0
 8000484:	1b1b      	subs	r3, r3, r4
 8000486:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x98>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa0e f401 	lsl.w	r4, lr, r1
 800049c:	fa20 f306 	lsr.w	r3, r0, r6
 80004a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004a8:	4323      	orrs	r3, r4
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	fa1f fc87 	uxth.w	ip, r7
 80004b2:	fbbe f0f9 	udiv	r0, lr, r9
 80004b6:	0c1c      	lsrs	r4, r3, #16
 80004b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x1a0>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80004d2:	f080 809c 	bcs.w	800060e <__udivmoddi4+0x2ce>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f240 8099 	bls.w	800060e <__udivmoddi4+0x2ce>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	eba4 040e 	sub.w	r4, r4, lr
 80004e4:	fa1f fe83 	uxth.w	lr, r3
 80004e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ec:	fb09 4413 	mls	r4, r9, r3, r4
 80004f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f8:	45a4      	cmp	ip, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x1ce>
 80004fc:	193c      	adds	r4, r7, r4
 80004fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000502:	f080 8082 	bcs.w	800060a <__udivmoddi4+0x2ca>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d97f      	bls.n	800060a <__udivmoddi4+0x2ca>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000512:	eba4 040c 	sub.w	r4, r4, ip
 8000516:	fba0 ec02 	umull	lr, ip, r0, r2
 800051a:	4564      	cmp	r4, ip
 800051c:	4673      	mov	r3, lr
 800051e:	46e1      	mov	r9, ip
 8000520:	d362      	bcc.n	80005e8 <__udivmoddi4+0x2a8>
 8000522:	d05f      	beq.n	80005e4 <__udivmoddi4+0x2a4>
 8000524:	b15d      	cbz	r5, 800053e <__udivmoddi4+0x1fe>
 8000526:	ebb8 0203 	subs.w	r2, r8, r3
 800052a:	eb64 0409 	sbc.w	r4, r4, r9
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	fa22 f301 	lsr.w	r3, r2, r1
 8000536:	431e      	orrs	r6, r3
 8000538:	40cc      	lsrs	r4, r1
 800053a:	e9c5 6400 	strd	r6, r4, [r5]
 800053e:	2100      	movs	r1, #0
 8000540:	e74f      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000542:	fbb1 fcf2 	udiv	ip, r1, r2
 8000546:	0c01      	lsrs	r1, r0, #16
 8000548:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800054c:	b280      	uxth	r0, r0
 800054e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000552:	463b      	mov	r3, r7
 8000554:	4638      	mov	r0, r7
 8000556:	463c      	mov	r4, r7
 8000558:	46b8      	mov	r8, r7
 800055a:	46be      	mov	lr, r7
 800055c:	2620      	movs	r6, #32
 800055e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000562:	eba2 0208 	sub.w	r2, r2, r8
 8000566:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800056a:	e766      	b.n	800043a <__udivmoddi4+0xfa>
 800056c:	4601      	mov	r1, r0
 800056e:	e718      	b.n	80003a2 <__udivmoddi4+0x62>
 8000570:	4610      	mov	r0, r2
 8000572:	e72c      	b.n	80003ce <__udivmoddi4+0x8e>
 8000574:	f1c6 0220 	rsb	r2, r6, #32
 8000578:	fa2e f302 	lsr.w	r3, lr, r2
 800057c:	40b7      	lsls	r7, r6
 800057e:	40b1      	lsls	r1, r6
 8000580:	fa20 f202 	lsr.w	r2, r0, r2
 8000584:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000588:	430a      	orrs	r2, r1
 800058a:	fbb3 f8fe 	udiv	r8, r3, lr
 800058e:	b2bc      	uxth	r4, r7
 8000590:	fb0e 3318 	mls	r3, lr, r8, r3
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb08 f904 	mul.w	r9, r8, r4
 800059e:	40b0      	lsls	r0, r6
 80005a0:	4589      	cmp	r9, r1
 80005a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005a6:	b280      	uxth	r0, r0
 80005a8:	d93e      	bls.n	8000628 <__udivmoddi4+0x2e8>
 80005aa:	1879      	adds	r1, r7, r1
 80005ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80005b0:	d201      	bcs.n	80005b6 <__udivmoddi4+0x276>
 80005b2:	4589      	cmp	r9, r1
 80005b4:	d81f      	bhi.n	80005f6 <__udivmoddi4+0x2b6>
 80005b6:	eba1 0109 	sub.w	r1, r1, r9
 80005ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80005be:	fb09 f804 	mul.w	r8, r9, r4
 80005c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005c6:	b292      	uxth	r2, r2
 80005c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005cc:	4542      	cmp	r2, r8
 80005ce:	d229      	bcs.n	8000624 <__udivmoddi4+0x2e4>
 80005d0:	18ba      	adds	r2, r7, r2
 80005d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005d6:	d2c4      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005d8:	4542      	cmp	r2, r8
 80005da:	d2c2      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005dc:	f1a9 0102 	sub.w	r1, r9, #2
 80005e0:	443a      	add	r2, r7
 80005e2:	e7be      	b.n	8000562 <__udivmoddi4+0x222>
 80005e4:	45f0      	cmp	r8, lr
 80005e6:	d29d      	bcs.n	8000524 <__udivmoddi4+0x1e4>
 80005e8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005f0:	3801      	subs	r0, #1
 80005f2:	46e1      	mov	r9, ip
 80005f4:	e796      	b.n	8000524 <__udivmoddi4+0x1e4>
 80005f6:	eba7 0909 	sub.w	r9, r7, r9
 80005fa:	4449      	add	r1, r9
 80005fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	e7db      	b.n	80005c2 <__udivmoddi4+0x282>
 800060a:	4673      	mov	r3, lr
 800060c:	e77f      	b.n	800050e <__udivmoddi4+0x1ce>
 800060e:	4650      	mov	r0, sl
 8000610:	e766      	b.n	80004e0 <__udivmoddi4+0x1a0>
 8000612:	4608      	mov	r0, r1
 8000614:	e6fd      	b.n	8000412 <__udivmoddi4+0xd2>
 8000616:	443b      	add	r3, r7
 8000618:	3a02      	subs	r2, #2
 800061a:	e733      	b.n	8000484 <__udivmoddi4+0x144>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	443b      	add	r3, r7
 8000622:	e71c      	b.n	800045e <__udivmoddi4+0x11e>
 8000624:	4649      	mov	r1, r9
 8000626:	e79c      	b.n	8000562 <__udivmoddi4+0x222>
 8000628:	eba1 0109 	sub.w	r1, r1, r9
 800062c:	46c4      	mov	ip, r8
 800062e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000632:	fb09 f804 	mul.w	r8, r9, r4
 8000636:	e7c4      	b.n	80005c2 <__udivmoddi4+0x282>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000640:	4b0d      	ldr	r3, [pc, #52]	@ (8000678 <MX_CRC_Init+0x3c>)
 8000642:	4a0e      	ldr	r2, [pc, #56]	@ (800067c <MX_CRC_Init+0x40>)
 8000644:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000646:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <MX_CRC_Init+0x3c>)
 8000648:	2200      	movs	r2, #0
 800064a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800064c:	4b0a      	ldr	r3, [pc, #40]	@ (8000678 <MX_CRC_Init+0x3c>)
 800064e:	2200      	movs	r2, #0
 8000650:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000652:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <MX_CRC_Init+0x3c>)
 8000654:	2200      	movs	r2, #0
 8000656:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000658:	4b07      	ldr	r3, [pc, #28]	@ (8000678 <MX_CRC_Init+0x3c>)
 800065a:	2200      	movs	r2, #0
 800065c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800065e:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <MX_CRC_Init+0x3c>)
 8000660:	2201      	movs	r2, #1
 8000662:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000664:	4804      	ldr	r0, [pc, #16]	@ (8000678 <MX_CRC_Init+0x3c>)
 8000666:	f001 fdab 	bl	80021c0 <HAL_CRC_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000670:	f000 fc88 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	24000080 	.word	0x24000080
 800067c:	58024c00 	.word	0x58024c00

08000680 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a0b      	ldr	r2, [pc, #44]	@ (80006bc <HAL_CRC_MspInit+0x3c>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d10e      	bne.n	80006b0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000692:	4b0b      	ldr	r3, [pc, #44]	@ (80006c0 <HAL_CRC_MspInit+0x40>)
 8000694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000698:	4a09      	ldr	r2, [pc, #36]	@ (80006c0 <HAL_CRC_MspInit+0x40>)
 800069a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800069e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006a2:	4b07      	ldr	r3, [pc, #28]	@ (80006c0 <HAL_CRC_MspInit+0x40>)
 80006a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	58024c00 	.word	0x58024c00
 80006c0:	58024400 	.word	0x58024400

080006c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <MX_DMA_Init+0x4c>)
 80006cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006d0:	4a0f      	ldr	r2, [pc, #60]	@ (8000710 <MX_DMA_Init+0x4c>)
 80006d2:	f043 0301 	orr.w	r3, r3, #1
 80006d6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006da:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <MX_DMA_Init+0x4c>)
 80006dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2105      	movs	r1, #5
 80006ec:	200c      	movs	r0, #12
 80006ee:	f001 fd3f 	bl	8002170 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80006f2:	200c      	movs	r0, #12
 80006f4:	f001 fd56 	bl	80021a4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2105      	movs	r1, #5
 80006fc:	2010      	movs	r0, #16
 80006fe:	f001 fd37 	bl	8002170 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000702:	2010      	movs	r0, #16
 8000704:	f001 fd4e 	bl	80021a4 <HAL_NVIC_EnableIRQ>

}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	58024400 	.word	0x58024400

08000714 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan2;
FDCAN_HandleTypeDef hfdcan3;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000718:	4b2e      	ldr	r3, [pc, #184]	@ (80007d4 <MX_FDCAN1_Init+0xc0>)
 800071a:	4a2f      	ldr	r2, [pc, #188]	@ (80007d8 <MX_FDCAN1_Init+0xc4>)
 800071c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800071e:	4b2d      	ldr	r3, [pc, #180]	@ (80007d4 <MX_FDCAN1_Init+0xc0>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000724:	4b2b      	ldr	r3, [pc, #172]	@ (80007d4 <MX_FDCAN1_Init+0xc0>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800072a:	4b2a      	ldr	r3, [pc, #168]	@ (80007d4 <MX_FDCAN1_Init+0xc0>)
 800072c:	2201      	movs	r2, #1
 800072e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000730:	4b28      	ldr	r3, [pc, #160]	@ (80007d4 <MX_FDCAN1_Init+0xc0>)
 8000732:	2200      	movs	r2, #0
 8000734:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000736:	4b27      	ldr	r3, [pc, #156]	@ (80007d4 <MX_FDCAN1_Init+0xc0>)
 8000738:	2201      	movs	r2, #1
 800073a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800073c:	4b25      	ldr	r3, [pc, #148]	@ (80007d4 <MX_FDCAN1_Init+0xc0>)
 800073e:	2201      	movs	r2, #1
 8000740:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 20;
 8000742:	4b24      	ldr	r3, [pc, #144]	@ (80007d4 <MX_FDCAN1_Init+0xc0>)
 8000744:	2214      	movs	r2, #20
 8000746:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 59;
 8000748:	4b22      	ldr	r3, [pc, #136]	@ (80007d4 <MX_FDCAN1_Init+0xc0>)
 800074a:	223b      	movs	r2, #59	@ 0x3b
 800074c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 20;
 800074e:	4b21      	ldr	r3, [pc, #132]	@ (80007d4 <MX_FDCAN1_Init+0xc0>)
 8000750:	2214      	movs	r2, #20
 8000752:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000754:	4b1f      	ldr	r3, [pc, #124]	@ (80007d4 <MX_FDCAN1_Init+0xc0>)
 8000756:	2201      	movs	r2, #1
 8000758:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 2;
 800075a:	4b1e      	ldr	r3, [pc, #120]	@ (80007d4 <MX_FDCAN1_Init+0xc0>)
 800075c:	2202      	movs	r2, #2
 800075e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 8000760:	4b1c      	ldr	r3, [pc, #112]	@ (80007d4 <MX_FDCAN1_Init+0xc0>)
 8000762:	220d      	movs	r2, #13
 8000764:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8000766:	4b1b      	ldr	r3, [pc, #108]	@ (80007d4 <MX_FDCAN1_Init+0xc0>)
 8000768:	2202      	movs	r2, #2
 800076a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800076c:	4b19      	ldr	r3, [pc, #100]	@ (80007d4 <MX_FDCAN1_Init+0xc0>)
 800076e:	2200      	movs	r2, #0
 8000770:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 4;
 8000772:	4b18      	ldr	r3, [pc, #96]	@ (80007d4 <MX_FDCAN1_Init+0xc0>)
 8000774:	2204      	movs	r2, #4
 8000776:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 4;
 8000778:	4b16      	ldr	r3, [pc, #88]	@ (80007d4 <MX_FDCAN1_Init+0xc0>)
 800077a:	2204      	movs	r2, #4
 800077c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 8;
 800077e:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <MX_FDCAN1_Init+0xc0>)
 8000780:	2208      	movs	r2, #8
 8000782:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000784:	4b13      	ldr	r3, [pc, #76]	@ (80007d4 <MX_FDCAN1_Init+0xc0>)
 8000786:	2204      	movs	r2, #4
 8000788:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 8;
 800078a:	4b12      	ldr	r3, [pc, #72]	@ (80007d4 <MX_FDCAN1_Init+0xc0>)
 800078c:	2208      	movs	r2, #8
 800078e:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000790:	4b10      	ldr	r3, [pc, #64]	@ (80007d4 <MX_FDCAN1_Init+0xc0>)
 8000792:	2204      	movs	r2, #4
 8000794:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 2;
 8000796:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <MX_FDCAN1_Init+0xc0>)
 8000798:	2202      	movs	r2, #2
 800079a:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800079c:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <MX_FDCAN1_Init+0xc0>)
 800079e:	2204      	movs	r2, #4
 80007a0:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 8;
 80007a2:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <MX_FDCAN1_Init+0xc0>)
 80007a4:	2208      	movs	r2, #8
 80007a6:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 8;
 80007a8:	4b0a      	ldr	r3, [pc, #40]	@ (80007d4 <MX_FDCAN1_Init+0xc0>)
 80007aa:	2208      	movs	r2, #8
 80007ac:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 8;
 80007ae:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <MX_FDCAN1_Init+0xc0>)
 80007b0:	2208      	movs	r2, #8
 80007b2:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80007b4:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <MX_FDCAN1_Init+0xc0>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80007ba:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <MX_FDCAN1_Init+0xc0>)
 80007bc:	2204      	movs	r2, #4
 80007be:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80007c0:	4804      	ldr	r0, [pc, #16]	@ (80007d4 <MX_FDCAN1_Init+0xc0>)
 80007c2:	f004 f811 	bl	80047e8 <HAL_FDCAN_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80007cc:	f000 fbda 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	240000a4 	.word	0x240000a4
 80007d8:	4000a000 	.word	0x4000a000

080007dc <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80007e0:	4b2f      	ldr	r3, [pc, #188]	@ (80008a0 <MX_FDCAN2_Init+0xc4>)
 80007e2:	4a30      	ldr	r2, [pc, #192]	@ (80008a4 <MX_FDCAN2_Init+0xc8>)
 80007e4:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80007e6:	4b2e      	ldr	r3, [pc, #184]	@ (80008a0 <MX_FDCAN2_Init+0xc4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80007ec:	4b2c      	ldr	r3, [pc, #176]	@ (80008a0 <MX_FDCAN2_Init+0xc4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80007f2:	4b2b      	ldr	r3, [pc, #172]	@ (80008a0 <MX_FDCAN2_Init+0xc4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80007f8:	4b29      	ldr	r3, [pc, #164]	@ (80008a0 <MX_FDCAN2_Init+0xc4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80007fe:	4b28      	ldr	r3, [pc, #160]	@ (80008a0 <MX_FDCAN2_Init+0xc4>)
 8000800:	2200      	movs	r2, #0
 8000802:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000804:	4b26      	ldr	r3, [pc, #152]	@ (80008a0 <MX_FDCAN2_Init+0xc4>)
 8000806:	2201      	movs	r2, #1
 8000808:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 20;
 800080a:	4b25      	ldr	r3, [pc, #148]	@ (80008a0 <MX_FDCAN2_Init+0xc4>)
 800080c:	2214      	movs	r2, #20
 800080e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 59;
 8000810:	4b23      	ldr	r3, [pc, #140]	@ (80008a0 <MX_FDCAN2_Init+0xc4>)
 8000812:	223b      	movs	r2, #59	@ 0x3b
 8000814:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 20;
 8000816:	4b22      	ldr	r3, [pc, #136]	@ (80008a0 <MX_FDCAN2_Init+0xc4>)
 8000818:	2214      	movs	r2, #20
 800081a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800081c:	4b20      	ldr	r3, [pc, #128]	@ (80008a0 <MX_FDCAN2_Init+0xc4>)
 800081e:	2201      	movs	r2, #1
 8000820:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 2;
 8000822:	4b1f      	ldr	r3, [pc, #124]	@ (80008a0 <MX_FDCAN2_Init+0xc4>)
 8000824:	2202      	movs	r2, #2
 8000826:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 13;
 8000828:	4b1d      	ldr	r3, [pc, #116]	@ (80008a0 <MX_FDCAN2_Init+0xc4>)
 800082a:	220d      	movs	r2, #13
 800082c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800082e:	4b1c      	ldr	r3, [pc, #112]	@ (80008a0 <MX_FDCAN2_Init+0xc4>)
 8000830:	2201      	movs	r2, #1
 8000832:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0x406;
 8000834:	4b1a      	ldr	r3, [pc, #104]	@ (80008a0 <MX_FDCAN2_Init+0xc4>)
 8000836:	f240 4206 	movw	r2, #1030	@ 0x406
 800083a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 4;
 800083c:	4b18      	ldr	r3, [pc, #96]	@ (80008a0 <MX_FDCAN2_Init+0xc4>)
 800083e:	2204      	movs	r2, #4
 8000840:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 4;
 8000842:	4b17      	ldr	r3, [pc, #92]	@ (80008a0 <MX_FDCAN2_Init+0xc4>)
 8000844:	2204      	movs	r2, #4
 8000846:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 8;
 8000848:	4b15      	ldr	r3, [pc, #84]	@ (80008a0 <MX_FDCAN2_Init+0xc4>)
 800084a:	2208      	movs	r2, #8
 800084c:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800084e:	4b14      	ldr	r3, [pc, #80]	@ (80008a0 <MX_FDCAN2_Init+0xc4>)
 8000850:	2204      	movs	r2, #4
 8000852:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 2;
 8000854:	4b12      	ldr	r3, [pc, #72]	@ (80008a0 <MX_FDCAN2_Init+0xc4>)
 8000856:	2202      	movs	r2, #2
 8000858:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800085a:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <MX_FDCAN2_Init+0xc4>)
 800085c:	2204      	movs	r2, #4
 800085e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 8;
 8000860:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <MX_FDCAN2_Init+0xc4>)
 8000862:	2208      	movs	r2, #8
 8000864:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <MX_FDCAN2_Init+0xc4>)
 8000868:	2204      	movs	r2, #4
 800086a:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 8;
 800086c:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <MX_FDCAN2_Init+0xc4>)
 800086e:	2208      	movs	r2, #8
 8000870:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 8;
 8000872:	4b0b      	ldr	r3, [pc, #44]	@ (80008a0 <MX_FDCAN2_Init+0xc4>)
 8000874:	2208      	movs	r2, #8
 8000876:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 8;
 8000878:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <MX_FDCAN2_Init+0xc4>)
 800087a:	2208      	movs	r2, #8
 800087c:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800087e:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <MX_FDCAN2_Init+0xc4>)
 8000880:	2200      	movs	r2, #0
 8000882:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000884:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <MX_FDCAN2_Init+0xc4>)
 8000886:	2204      	movs	r2, #4
 8000888:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <MX_FDCAN2_Init+0xc4>)
 800088c:	f003 ffac 	bl	80047e8 <HAL_FDCAN_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8000896:	f000 fb75 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	24000144 	.word	0x24000144
 80008a4:	4000a400 	.word	0x4000a400

080008a8 <MX_FDCAN3_Init>:
/* FDCAN3 init function */
void MX_FDCAN3_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 80008ac:	4b2f      	ldr	r3, [pc, #188]	@ (800096c <MX_FDCAN3_Init+0xc4>)
 80008ae:	4a30      	ldr	r2, [pc, #192]	@ (8000970 <MX_FDCAN3_Init+0xc8>)
 80008b0:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80008b2:	4b2e      	ldr	r3, [pc, #184]	@ (800096c <MX_FDCAN3_Init+0xc4>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 80008b8:	4b2c      	ldr	r3, [pc, #176]	@ (800096c <MX_FDCAN3_Init+0xc4>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 80008be:	4b2b      	ldr	r3, [pc, #172]	@ (800096c <MX_FDCAN3_Init+0xc4>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 80008c4:	4b29      	ldr	r3, [pc, #164]	@ (800096c <MX_FDCAN3_Init+0xc4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 80008ca:	4b28      	ldr	r3, [pc, #160]	@ (800096c <MX_FDCAN3_Init+0xc4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 1;
 80008d0:	4b26      	ldr	r3, [pc, #152]	@ (800096c <MX_FDCAN3_Init+0xc4>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 20;
 80008d6:	4b25      	ldr	r3, [pc, #148]	@ (800096c <MX_FDCAN3_Init+0xc4>)
 80008d8:	2214      	movs	r2, #20
 80008da:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 59;
 80008dc:	4b23      	ldr	r3, [pc, #140]	@ (800096c <MX_FDCAN3_Init+0xc4>)
 80008de:	223b      	movs	r2, #59	@ 0x3b
 80008e0:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 20;
 80008e2:	4b22      	ldr	r3, [pc, #136]	@ (800096c <MX_FDCAN3_Init+0xc4>)
 80008e4:	2214      	movs	r2, #20
 80008e6:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 80008e8:	4b20      	ldr	r3, [pc, #128]	@ (800096c <MX_FDCAN3_Init+0xc4>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 2;
 80008ee:	4b1f      	ldr	r3, [pc, #124]	@ (800096c <MX_FDCAN3_Init+0xc4>)
 80008f0:	2202      	movs	r2, #2
 80008f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 13;
 80008f4:	4b1d      	ldr	r3, [pc, #116]	@ (800096c <MX_FDCAN3_Init+0xc4>)
 80008f6:	220d      	movs	r2, #13
 80008f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 2;
 80008fa:	4b1c      	ldr	r3, [pc, #112]	@ (800096c <MX_FDCAN3_Init+0xc4>)
 80008fc:	2202      	movs	r2, #2
 80008fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.MessageRAMOffset = 0x812;
 8000900:	4b1a      	ldr	r3, [pc, #104]	@ (800096c <MX_FDCAN3_Init+0xc4>)
 8000902:	f640 0212 	movw	r2, #2066	@ 0x812
 8000906:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.StdFiltersNbr = 4;
 8000908:	4b18      	ldr	r3, [pc, #96]	@ (800096c <MX_FDCAN3_Init+0xc4>)
 800090a:	2204      	movs	r2, #4
 800090c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.ExtFiltersNbr = 4;
 800090e:	4b17      	ldr	r3, [pc, #92]	@ (800096c <MX_FDCAN3_Init+0xc4>)
 8000910:	2204      	movs	r2, #4
 8000912:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 8;
 8000914:	4b15      	ldr	r3, [pc, #84]	@ (800096c <MX_FDCAN3_Init+0xc4>)
 8000916:	2208      	movs	r2, #8
 8000918:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800091a:	4b14      	ldr	r3, [pc, #80]	@ (800096c <MX_FDCAN3_Init+0xc4>)
 800091c:	2204      	movs	r2, #4
 800091e:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 8;
 8000920:	4b12      	ldr	r3, [pc, #72]	@ (800096c <MX_FDCAN3_Init+0xc4>)
 8000922:	2208      	movs	r2, #8
 8000924:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000926:	4b11      	ldr	r3, [pc, #68]	@ (800096c <MX_FDCAN3_Init+0xc4>)
 8000928:	2204      	movs	r2, #4
 800092a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan3.Init.RxBuffersNbr = 2;
 800092c:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <MX_FDCAN3_Init+0xc4>)
 800092e:	2202      	movs	r2, #2
 8000930:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000932:	4b0e      	ldr	r3, [pc, #56]	@ (800096c <MX_FDCAN3_Init+0xc4>)
 8000934:	2204      	movs	r2, #4
 8000936:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan3.Init.TxEventsNbr = 8;
 8000938:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <MX_FDCAN3_Init+0xc4>)
 800093a:	2208      	movs	r2, #8
 800093c:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan3.Init.TxBuffersNbr = 8;
 800093e:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <MX_FDCAN3_Init+0xc4>)
 8000940:	2208      	movs	r2, #8
 8000942:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 8;
 8000944:	4b09      	ldr	r3, [pc, #36]	@ (800096c <MX_FDCAN3_Init+0xc4>)
 8000946:	2208      	movs	r2, #8
 8000948:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800094a:	4b08      	ldr	r3, [pc, #32]	@ (800096c <MX_FDCAN3_Init+0xc4>)
 800094c:	2200      	movs	r2, #0
 800094e:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000950:	4b06      	ldr	r3, [pc, #24]	@ (800096c <MX_FDCAN3_Init+0xc4>)
 8000952:	2204      	movs	r2, #4
 8000954:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	@ (800096c <MX_FDCAN3_Init+0xc4>)
 8000958:	f003 ff46 	bl	80047e8 <HAL_FDCAN_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_FDCAN3_Init+0xbe>
  {
    Error_Handler();
 8000962:	f000 fb0f 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	240001e4 	.word	0x240001e4
 8000970:	4000d400 	.word	0x4000d400

08000974 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b0bc      	sub	sp, #240	@ 0xf0
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800098c:	f107 0320 	add.w	r3, r7, #32
 8000990:	22b8      	movs	r2, #184	@ 0xb8
 8000992:	2100      	movs	r1, #0
 8000994:	4618      	mov	r0, r3
 8000996:	f00d fccf 	bl	800e338 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a92      	ldr	r2, [pc, #584]	@ (8000be8 <HAL_FDCAN_MspInit+0x274>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d160      	bne.n	8000a66 <HAL_FDCAN_MspInit+0xf2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80009a4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80009a8:	f04f 0300 	mov.w	r3, #0
 80009ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80009b0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80009b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009b8:	f107 0320 	add.w	r3, r7, #32
 80009bc:	4618      	mov	r0, r3
 80009be:	f005 ff2f 	bl	8006820 <HAL_RCCEx_PeriphCLKConfig>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 80009c8:	f000 fadc 	bl	8000f84 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80009cc:	4b87      	ldr	r3, [pc, #540]	@ (8000bec <HAL_FDCAN_MspInit+0x278>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	3301      	adds	r3, #1
 80009d2:	4a86      	ldr	r2, [pc, #536]	@ (8000bec <HAL_FDCAN_MspInit+0x278>)
 80009d4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80009d6:	4b85      	ldr	r3, [pc, #532]	@ (8000bec <HAL_FDCAN_MspInit+0x278>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d10e      	bne.n	80009fc <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80009de:	4b84      	ldr	r3, [pc, #528]	@ (8000bf0 <HAL_FDCAN_MspInit+0x27c>)
 80009e0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80009e4:	4a82      	ldr	r2, [pc, #520]	@ (8000bf0 <HAL_FDCAN_MspInit+0x27c>)
 80009e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009ea:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80009ee:	4b80      	ldr	r3, [pc, #512]	@ (8000bf0 <HAL_FDCAN_MspInit+0x27c>)
 80009f0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80009f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009f8:	61fb      	str	r3, [r7, #28]
 80009fa:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fc:	4b7c      	ldr	r3, [pc, #496]	@ (8000bf0 <HAL_FDCAN_MspInit+0x27c>)
 80009fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a02:	4a7b      	ldr	r2, [pc, #492]	@ (8000bf0 <HAL_FDCAN_MspInit+0x27c>)
 8000a04:	f043 0308 	orr.w	r3, r3, #8
 8000a08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a0c:	4b78      	ldr	r3, [pc, #480]	@ (8000bf0 <HAL_FDCAN_MspInit+0x27c>)
 8000a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a12:	f003 0308 	and.w	r3, r3, #8
 8000a16:	61bb      	str	r3, [r7, #24]
 8000a18:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000a32:	2309      	movs	r3, #9
 8000a34:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a38:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	486d      	ldr	r0, [pc, #436]	@ (8000bf4 <HAL_FDCAN_MspInit+0x280>)
 8000a40:	f004 fd4a 	bl	80054d8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2105      	movs	r1, #5
 8000a48:	2013      	movs	r0, #19
 8000a4a:	f001 fb91 	bl	8002170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000a4e:	2013      	movs	r0, #19
 8000a50:	f001 fba8 	bl	80021a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2105      	movs	r1, #5
 8000a58:	2015      	movs	r0, #21
 8000a5a:	f001 fb89 	bl	8002170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000a5e:	2015      	movs	r0, #21
 8000a60:	f001 fba0 	bl	80021a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(FDCAN3_IT1_IRQn);
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }
}
 8000a64:	e0bc      	b.n	8000be0 <HAL_FDCAN_MspInit+0x26c>
  else if(fdcanHandle->Instance==FDCAN2)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a63      	ldr	r2, [pc, #396]	@ (8000bf8 <HAL_FDCAN_MspInit+0x284>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d151      	bne.n	8000b14 <HAL_FDCAN_MspInit+0x1a0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a70:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000a74:	f04f 0300 	mov.w	r3, #0
 8000a78:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000a7c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000a80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a84:	f107 0320 	add.w	r3, r7, #32
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f005 fec9 	bl	8006820 <HAL_RCCEx_PeriphCLKConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <HAL_FDCAN_MspInit+0x124>
      Error_Handler();
 8000a94:	f000 fa76 	bl	8000f84 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000a98:	4b54      	ldr	r3, [pc, #336]	@ (8000bec <HAL_FDCAN_MspInit+0x278>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	4a53      	ldr	r2, [pc, #332]	@ (8000bec <HAL_FDCAN_MspInit+0x278>)
 8000aa0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000aa2:	4b52      	ldr	r3, [pc, #328]	@ (8000bec <HAL_FDCAN_MspInit+0x278>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d10e      	bne.n	8000ac8 <HAL_FDCAN_MspInit+0x154>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000aaa:	4b51      	ldr	r3, [pc, #324]	@ (8000bf0 <HAL_FDCAN_MspInit+0x27c>)
 8000aac:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000ab0:	4a4f      	ldr	r2, [pc, #316]	@ (8000bf0 <HAL_FDCAN_MspInit+0x27c>)
 8000ab2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ab6:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000aba:	4b4d      	ldr	r3, [pc, #308]	@ (8000bf0 <HAL_FDCAN_MspInit+0x27c>)
 8000abc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ac4:	617b      	str	r3, [r7, #20]
 8000ac6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac8:	4b49      	ldr	r3, [pc, #292]	@ (8000bf0 <HAL_FDCAN_MspInit+0x27c>)
 8000aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ace:	4a48      	ldr	r2, [pc, #288]	@ (8000bf0 <HAL_FDCAN_MspInit+0x27c>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ad8:	4b45      	ldr	r3, [pc, #276]	@ (8000bf0 <HAL_FDCAN_MspInit+0x27c>)
 8000ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8000ae6:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 8000aea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000b00:	2309      	movs	r3, #9
 8000b02:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b06:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	483b      	ldr	r0, [pc, #236]	@ (8000bfc <HAL_FDCAN_MspInit+0x288>)
 8000b0e:	f004 fce3 	bl	80054d8 <HAL_GPIO_Init>
}
 8000b12:	e065      	b.n	8000be0 <HAL_FDCAN_MspInit+0x26c>
  else if(fdcanHandle->Instance==FDCAN3)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a39      	ldr	r2, [pc, #228]	@ (8000c00 <HAL_FDCAN_MspInit+0x28c>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d160      	bne.n	8000be0 <HAL_FDCAN_MspInit+0x26c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000b1e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b22:	f04f 0300 	mov.w	r3, #0
 8000b26:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000b2a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b32:	f107 0320 	add.w	r3, r7, #32
 8000b36:	4618      	mov	r0, r3
 8000b38:	f005 fe72 	bl	8006820 <HAL_RCCEx_PeriphCLKConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <HAL_FDCAN_MspInit+0x1d2>
      Error_Handler();
 8000b42:	f000 fa1f 	bl	8000f84 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000b46:	4b29      	ldr	r3, [pc, #164]	@ (8000bec <HAL_FDCAN_MspInit+0x278>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	4a27      	ldr	r2, [pc, #156]	@ (8000bec <HAL_FDCAN_MspInit+0x278>)
 8000b4e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000b50:	4b26      	ldr	r3, [pc, #152]	@ (8000bec <HAL_FDCAN_MspInit+0x278>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d10e      	bne.n	8000b76 <HAL_FDCAN_MspInit+0x202>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000b58:	4b25      	ldr	r3, [pc, #148]	@ (8000bf0 <HAL_FDCAN_MspInit+0x27c>)
 8000b5a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000b5e:	4a24      	ldr	r2, [pc, #144]	@ (8000bf0 <HAL_FDCAN_MspInit+0x27c>)
 8000b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b64:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000b68:	4b21      	ldr	r3, [pc, #132]	@ (8000bf0 <HAL_FDCAN_MspInit+0x27c>)
 8000b6a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b76:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf0 <HAL_FDCAN_MspInit+0x27c>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7c:	4a1c      	ldr	r2, [pc, #112]	@ (8000bf0 <HAL_FDCAN_MspInit+0x27c>)
 8000b7e:	f043 0308 	orr.w	r3, r3, #8
 8000b82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b86:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf0 <HAL_FDCAN_MspInit+0x27c>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8c:	f003 0308 	and.w	r3, r3, #8
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000b94:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000b98:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_FDCAN3;
 8000bae:	2305      	movs	r3, #5
 8000bb0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480e      	ldr	r0, [pc, #56]	@ (8000bf4 <HAL_FDCAN_MspInit+0x280>)
 8000bbc:	f004 fc8c 	bl	80054d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 5, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2105      	movs	r1, #5
 8000bc4:	209f      	movs	r0, #159	@ 0x9f
 8000bc6:	f001 fad3 	bl	8002170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 8000bca:	209f      	movs	r0, #159	@ 0x9f
 8000bcc:	f001 faea 	bl	80021a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN3_IT1_IRQn, 5, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2105      	movs	r1, #5
 8000bd4:	20a0      	movs	r0, #160	@ 0xa0
 8000bd6:	f001 facb 	bl	8002170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT1_IRQn);
 8000bda:	20a0      	movs	r0, #160	@ 0xa0
 8000bdc:	f001 fae2 	bl	80021a4 <HAL_NVIC_EnableIRQ>
}
 8000be0:	bf00      	nop
 8000be2:	37f0      	adds	r7, #240	@ 0xf0
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	4000a000 	.word	0x4000a000
 8000bec:	24000284 	.word	0x24000284
 8000bf0:	58024400 	.word	0x58024400
 8000bf4:	58020c00 	.word	0x58020c00
 8000bf8:	4000a400 	.word	0x4000a400
 8000bfc:	58020400 	.word	0x58020400
 8000c00:	4000d400 	.word	0x4000d400

08000c04 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
return 0;
 8000c16:	2300      	movs	r3, #0
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
 8000c2a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4a07      	ldr	r2, [pc, #28]	@ (8000c64 <vApplicationGetIdleTaskMemory+0x2c>)
 8000c48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	4a06      	ldr	r2, [pc, #24]	@ (8000c68 <vApplicationGetIdleTaskMemory+0x30>)
 8000c4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c56:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000c58:	bf00      	nop
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	2400028c 	.word	0x2400028c
 8000c68:	24000338 	.word	0x24000338

08000c6c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	4a07      	ldr	r2, [pc, #28]	@ (8000c98 <vApplicationGetTimerTaskMemory+0x2c>)
 8000c7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	4a06      	ldr	r2, [pc, #24]	@ (8000c9c <vApplicationGetTimerTaskMemory+0x30>)
 8000c82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c8a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	24000738 	.word	0x24000738
 8000c9c:	240007e4 	.word	0x240007e4

08000ca0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ca0:	b5b0      	push	{r4, r5, r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd0 <MX_FREERTOS_Init+0x30>)
 8000ca8:	1d3c      	adds	r4, r7, #4
 8000caa:	461d      	mov	r5, r3
 8000cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f00a fe1a 	bl	800b8f6 <osThreadCreate>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	4a03      	ldr	r2, [pc, #12]	@ (8000cd4 <MX_FREERTOS_Init+0x34>)
 8000cc6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000cc8:	bf00      	nop
 8000cca:	3720      	adds	r7, #32
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bdb0      	pop	{r4, r5, r7, pc}
 8000cd0:	0800e53c 	.word	0x0800e53c
 8000cd4:	24000288 	.word	0x24000288

08000cd8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	f00a fe54 	bl	800b98e <osDelay>
 8000ce6:	e7fb      	b.n	8000ce0 <StartDefaultTask+0x8>

08000ce8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08c      	sub	sp, #48	@ 0x30
 8000cec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cfe:	4b49      	ldr	r3, [pc, #292]	@ (8000e24 <MX_GPIO_Init+0x13c>)
 8000d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d04:	4a47      	ldr	r2, [pc, #284]	@ (8000e24 <MX_GPIO_Init+0x13c>)
 8000d06:	f043 0310 	orr.w	r3, r3, #16
 8000d0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d0e:	4b45      	ldr	r3, [pc, #276]	@ (8000e24 <MX_GPIO_Init+0x13c>)
 8000d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d14:	f003 0310 	and.w	r3, r3, #16
 8000d18:	61bb      	str	r3, [r7, #24]
 8000d1a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d1c:	4b41      	ldr	r3, [pc, #260]	@ (8000e24 <MX_GPIO_Init+0x13c>)
 8000d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d22:	4a40      	ldr	r2, [pc, #256]	@ (8000e24 <MX_GPIO_Init+0x13c>)
 8000d24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d2c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e24 <MX_GPIO_Init+0x13c>)
 8000d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3a:	4b3a      	ldr	r3, [pc, #232]	@ (8000e24 <MX_GPIO_Init+0x13c>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d40:	4a38      	ldr	r2, [pc, #224]	@ (8000e24 <MX_GPIO_Init+0x13c>)
 8000d42:	f043 0304 	orr.w	r3, r3, #4
 8000d46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d4a:	4b36      	ldr	r3, [pc, #216]	@ (8000e24 <MX_GPIO_Init+0x13c>)
 8000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d50:	f003 0304 	and.w	r3, r3, #4
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d58:	4b32      	ldr	r3, [pc, #200]	@ (8000e24 <MX_GPIO_Init+0x13c>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5e:	4a31      	ldr	r2, [pc, #196]	@ (8000e24 <MX_GPIO_Init+0x13c>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d68:	4b2e      	ldr	r3, [pc, #184]	@ (8000e24 <MX_GPIO_Init+0x13c>)
 8000d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d76:	4b2b      	ldr	r3, [pc, #172]	@ (8000e24 <MX_GPIO_Init+0x13c>)
 8000d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7c:	4a29      	ldr	r2, [pc, #164]	@ (8000e24 <MX_GPIO_Init+0x13c>)
 8000d7e:	f043 0302 	orr.w	r3, r3, #2
 8000d82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d86:	4b27      	ldr	r3, [pc, #156]	@ (8000e24 <MX_GPIO_Init+0x13c>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8c:	f003 0302 	and.w	r3, r3, #2
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d94:	4b23      	ldr	r3, [pc, #140]	@ (8000e24 <MX_GPIO_Init+0x13c>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9a:	4a22      	ldr	r2, [pc, #136]	@ (8000e24 <MX_GPIO_Init+0x13c>)
 8000d9c:	f043 0308 	orr.w	r3, r3, #8
 8000da0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000da4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e24 <MX_GPIO_Init+0x13c>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000daa:	f003 0308 	and.w	r3, r3, #8
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ACC_CS_Pin|GYRO_CS_Pin, GPIO_PIN_SET);
 8000db2:	2201      	movs	r2, #1
 8000db4:	2109      	movs	r1, #9
 8000db6:	481c      	ldr	r0, [pc, #112]	@ (8000e28 <MX_GPIO_Init+0x140>)
 8000db8:	f004 fd36 	bl	8005828 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ACC_CS_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = ACC_CS_Pin|GYRO_CS_Pin;
 8000dbc:	2309      	movs	r3, #9
 8000dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dcc:	f107 031c 	add.w	r3, r7, #28
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4815      	ldr	r0, [pc, #84]	@ (8000e28 <MX_GPIO_Init+0x140>)
 8000dd4:	f004 fb80 	bl	80054d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT_Pin */
  GPIO_InitStruct.Pin = ACC_INT_Pin;
 8000dd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dde:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000de2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ACC_INT_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	4619      	mov	r1, r3
 8000dee:	480f      	ldr	r0, [pc, #60]	@ (8000e2c <MX_GPIO_Init+0x144>)
 8000df0:	f004 fb72 	bl	80054d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_INT_Pin;
 8000df4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dfa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000dfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4808      	ldr	r0, [pc, #32]	@ (8000e2c <MX_GPIO_Init+0x144>)
 8000e0c:	f004 fb64 	bl	80054d8 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_CLOSE);
 8000e10:	2100      	movs	r1, #0
 8000e12:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8000e16:	f001 f8dd 	bl	8001fd4 <HAL_SYSCFG_AnalogSwitchConfig>

}
 8000e1a:	bf00      	nop
 8000e1c:	3730      	adds	r7, #48	@ 0x30
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	58024400 	.word	0x58024400
 8000e28:	58020800 	.word	0x58020800
 8000e2c:	58021000 	.word	0x58021000

08000e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e34:	f001 f872 	bl	8001f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e38:	f000 f822 	bl	8000e80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e3c:	f7ff ff54 	bl	8000ce8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e40:	f7ff fc40 	bl	80006c4 <MX_DMA_Init>
  MX_TIM2_Init();
 8000e44:	f000 fb94 	bl	8001570 <MX_TIM2_Init>
  MX_TIM12_Init();
 8000e48:	f000 fbf8 	bl	800163c <MX_TIM12_Init>
  MX_UART5_Init();
 8000e4c:	f000 fcec 	bl	8001828 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000e50:	f000 fd86 	bl	8001960 <MX_USART1_UART_Init>
  MX_UART7_Init();
 8000e54:	f000 fd38 	bl	80018c8 <MX_UART7_Init>
  MX_FDCAN1_Init();
 8000e58:	f7ff fc5c 	bl	8000714 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000e5c:	f7ff fcbe 	bl	80007dc <MX_FDCAN2_Init>
  MX_CRC_Init();
 8000e60:	f7ff fbec 	bl	800063c <MX_CRC_Init>
  MX_RNG_Init();
 8000e64:	f000 f894 	bl	8000f90 <MX_RNG_Init>
  MX_FDCAN3_Init();
 8000e68:	f7ff fd1e 	bl	80008a8 <MX_FDCAN3_Init>
  MX_SPI2_Init();
 8000e6c:	f000 f8e0 	bl	8001030 <MX_SPI2_Init>
  MX_USART10_UART_Init();
 8000e70:	f000 fdc2 	bl	80019f8 <MX_USART10_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000e74:	f7ff ff14 	bl	8000ca0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000e78:	f00a fd36 	bl	800b8e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <main+0x4c>

08000e80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b09c      	sub	sp, #112	@ 0x70
 8000e84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8a:	224c      	movs	r2, #76	@ 0x4c
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f00d fa52 	bl	800e338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	2220      	movs	r2, #32
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f00d fa4c 	bl	800e338 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	f004 fcdb 	bl	800585c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	603b      	str	r3, [r7, #0]
 8000eaa:	4b2c      	ldr	r3, [pc, #176]	@ (8000f5c <SystemClock_Config+0xdc>)
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	4a2b      	ldr	r2, [pc, #172]	@ (8000f5c <SystemClock_Config+0xdc>)
 8000eb0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000eb4:	6193      	str	r3, [r2, #24]
 8000eb6:	4b29      	ldr	r3, [pc, #164]	@ (8000f5c <SystemClock_Config+0xdc>)
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ec2:	bf00      	nop
 8000ec4:	4b25      	ldr	r3, [pc, #148]	@ (8000f5c <SystemClock_Config+0xdc>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ecc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ed0:	d1f8      	bne.n	8000ec4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000ed2:	2321      	movs	r3, #33	@ 0x21
 8000ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000eda:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000edc:	2301      	movs	r3, #1
 8000ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000eec:	2328      	movs	r3, #40	@ 0x28
 8000eee:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000ef4:	2306      	movs	r3, #6
 8000ef6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000efc:	230c      	movs	r3, #12
 8000efe:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f004 fcdf 	bl	80058d0 <HAL_RCC_OscConfig>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000f18:	f000 f834 	bl	8000f84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f1c:	233f      	movs	r3, #63	@ 0x3f
 8000f1e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f20:	2303      	movs	r3, #3
 8000f22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f28:	2308      	movs	r3, #8
 8000f2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f2c:	2340      	movs	r3, #64	@ 0x40
 8000f2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f30:	2340      	movs	r3, #64	@ 0x40
 8000f32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f38:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f3a:	2340      	movs	r3, #64	@ 0x40
 8000f3c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2103      	movs	r1, #3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f005 f89e 	bl	8006084 <HAL_RCC_ClockConfig>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000f4e:	f000 f819 	bl	8000f84 <Error_Handler>
  }
}
 8000f52:	bf00      	nop
 8000f54:	3770      	adds	r7, #112	@ 0x70
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	58024800 	.word	0x58024800

08000f60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM23)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a04      	ldr	r2, [pc, #16]	@ (8000f80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d101      	bne.n	8000f76 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000f72:	f001 f80f 	bl	8001f94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	4000e000 	.word	0x4000e000

08000f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f88:	b672      	cpsid	i
}
 8000f8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <Error_Handler+0x8>

08000f90 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000f94:	4b07      	ldr	r3, [pc, #28]	@ (8000fb4 <MX_RNG_Init+0x24>)
 8000f96:	4a08      	ldr	r2, [pc, #32]	@ (8000fb8 <MX_RNG_Init+0x28>)
 8000f98:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000f9a:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <MX_RNG_Init+0x24>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000fa0:	4804      	ldr	r0, [pc, #16]	@ (8000fb4 <MX_RNG_Init+0x24>)
 8000fa2:	f007 f9ff 	bl	80083a4 <HAL_RNG_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000fac:	f7ff ffea 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	24000fe4 	.word	0x24000fe4
 8000fb8:	48021800 	.word	0x48021800

08000fbc <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b0b2      	sub	sp, #200	@ 0xc8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fc4:	f107 0310 	add.w	r3, r7, #16
 8000fc8:	22b8      	movs	r2, #184	@ 0xb8
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f00d f9b3 	bl	800e338 <memset>
  if(rngHandle->Instance==RNG)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a14      	ldr	r2, [pc, #80]	@ (8001028 <HAL_RNG_MspInit+0x6c>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d121      	bne.n	8001020 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000fdc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000fe0:	f04f 0300 	mov.w	r3, #0
 8000fe4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fee:	f107 0310 	add.w	r3, r7, #16
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f005 fc14 	bl	8006820 <HAL_RCCEx_PeriphCLKConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8000ffe:	f7ff ffc1 	bl	8000f84 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001002:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <HAL_RNG_MspInit+0x70>)
 8001004:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001008:	4a08      	ldr	r2, [pc, #32]	@ (800102c <HAL_RNG_MspInit+0x70>)
 800100a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800100e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8001012:	4b06      	ldr	r3, [pc, #24]	@ (800102c <HAL_RNG_MspInit+0x70>)
 8001014:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001020:	bf00      	nop
 8001022:	37c8      	adds	r7, #200	@ 0xc8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	48021800 	.word	0x48021800
 800102c:	58024400 	.word	0x58024400

08001030 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001034:	4b28      	ldr	r3, [pc, #160]	@ (80010d8 <MX_SPI2_Init+0xa8>)
 8001036:	4a29      	ldr	r2, [pc, #164]	@ (80010dc <MX_SPI2_Init+0xac>)
 8001038:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800103a:	4b27      	ldr	r3, [pc, #156]	@ (80010d8 <MX_SPI2_Init+0xa8>)
 800103c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001040:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001042:	4b25      	ldr	r3, [pc, #148]	@ (80010d8 <MX_SPI2_Init+0xa8>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001048:	4b23      	ldr	r3, [pc, #140]	@ (80010d8 <MX_SPI2_Init+0xa8>)
 800104a:	2207      	movs	r2, #7
 800104c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800104e:	4b22      	ldr	r3, [pc, #136]	@ (80010d8 <MX_SPI2_Init+0xa8>)
 8001050:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001054:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001056:	4b20      	ldr	r3, [pc, #128]	@ (80010d8 <MX_SPI2_Init+0xa8>)
 8001058:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800105c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800105e:	4b1e      	ldr	r3, [pc, #120]	@ (80010d8 <MX_SPI2_Init+0xa8>)
 8001060:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001064:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001066:	4b1c      	ldr	r3, [pc, #112]	@ (80010d8 <MX_SPI2_Init+0xa8>)
 8001068:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800106c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800106e:	4b1a      	ldr	r3, [pc, #104]	@ (80010d8 <MX_SPI2_Init+0xa8>)
 8001070:	2200      	movs	r2, #0
 8001072:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001074:	4b18      	ldr	r3, [pc, #96]	@ (80010d8 <MX_SPI2_Init+0xa8>)
 8001076:	2200      	movs	r2, #0
 8001078:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800107a:	4b17      	ldr	r3, [pc, #92]	@ (80010d8 <MX_SPI2_Init+0xa8>)
 800107c:	2200      	movs	r2, #0
 800107e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001080:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <MX_SPI2_Init+0xa8>)
 8001082:	2200      	movs	r2, #0
 8001084:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001086:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <MX_SPI2_Init+0xa8>)
 8001088:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800108c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800108e:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <MX_SPI2_Init+0xa8>)
 8001090:	2200      	movs	r2, #0
 8001092:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001094:	4b10      	ldr	r3, [pc, #64]	@ (80010d8 <MX_SPI2_Init+0xa8>)
 8001096:	2200      	movs	r2, #0
 8001098:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800109a:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <MX_SPI2_Init+0xa8>)
 800109c:	2200      	movs	r2, #0
 800109e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010a0:	4b0d      	ldr	r3, [pc, #52]	@ (80010d8 <MX_SPI2_Init+0xa8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010a6:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <MX_SPI2_Init+0xa8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	@ (80010d8 <MX_SPI2_Init+0xa8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010b2:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <MX_SPI2_Init+0xa8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010b8:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <MX_SPI2_Init+0xa8>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010be:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <MX_SPI2_Init+0xa8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010c4:	4804      	ldr	r0, [pc, #16]	@ (80010d8 <MX_SPI2_Init+0xa8>)
 80010c6:	f007 fa11 	bl	80084ec <HAL_SPI_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 80010d0:	f7ff ff58 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	24000ff8 	.word	0x24000ff8
 80010dc:	40003800 	.word	0x40003800

080010e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b0ba      	sub	sp, #232	@ 0xe8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010f8:	f107 0318 	add.w	r3, r7, #24
 80010fc:	22b8      	movs	r2, #184	@ 0xb8
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f00d f919 	bl	800e338 <memset>
  if(spiHandle->Instance==SPI2)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a3c      	ldr	r2, [pc, #240]	@ (80011fc <HAL_SPI_MspInit+0x11c>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d171      	bne.n	80011f4 <HAL_SPI_MspInit+0x114>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001110:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001114:	f04f 0300 	mov.w	r3, #0
 8001118:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800111c:	2300      	movs	r3, #0
 800111e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001120:	f107 0318 	add.w	r3, r7, #24
 8001124:	4618      	mov	r0, r3
 8001126:	f005 fb7b 	bl	8006820 <HAL_RCCEx_PeriphCLKConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001130:	f7ff ff28 	bl	8000f84 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001134:	4b32      	ldr	r3, [pc, #200]	@ (8001200 <HAL_SPI_MspInit+0x120>)
 8001136:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800113a:	4a31      	ldr	r2, [pc, #196]	@ (8001200 <HAL_SPI_MspInit+0x120>)
 800113c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001140:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001144:	4b2e      	ldr	r3, [pc, #184]	@ (8001200 <HAL_SPI_MspInit+0x120>)
 8001146:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800114a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001152:	4b2b      	ldr	r3, [pc, #172]	@ (8001200 <HAL_SPI_MspInit+0x120>)
 8001154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001158:	4a29      	ldr	r2, [pc, #164]	@ (8001200 <HAL_SPI_MspInit+0x120>)
 800115a:	f043 0304 	orr.w	r3, r3, #4
 800115e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001162:	4b27      	ldr	r3, [pc, #156]	@ (8001200 <HAL_SPI_MspInit+0x120>)
 8001164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001170:	4b23      	ldr	r3, [pc, #140]	@ (8001200 <HAL_SPI_MspInit+0x120>)
 8001172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001176:	4a22      	ldr	r2, [pc, #136]	@ (8001200 <HAL_SPI_MspInit+0x120>)
 8001178:	f043 0302 	orr.w	r3, r3, #2
 800117c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001180:	4b1f      	ldr	r3, [pc, #124]	@ (8001200 <HAL_SPI_MspInit+0x120>)
 8001182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2_C     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800118e:	2306      	movs	r3, #6
 8001190:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011a6:	2305      	movs	r3, #5
 80011a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011b0:	4619      	mov	r1, r3
 80011b2:	4814      	ldr	r0, [pc, #80]	@ (8001204 <HAL_SPI_MspInit+0x124>)
 80011b4:	f004 f990 	bl	80054d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c0:	2302      	movs	r3, #2
 80011c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011d2:	2305      	movs	r3, #5
 80011d4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011dc:	4619      	mov	r1, r3
 80011de:	480a      	ldr	r0, [pc, #40]	@ (8001208 <HAL_SPI_MspInit+0x128>)
 80011e0:	f004 f97a 	bl	80054d8 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2105      	movs	r1, #5
 80011e8:	2024      	movs	r0, #36	@ 0x24
 80011ea:	f000 ffc1 	bl	8002170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80011ee:	2024      	movs	r0, #36	@ 0x24
 80011f0:	f000 ffd8 	bl	80021a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80011f4:	bf00      	nop
 80011f6:	37e8      	adds	r7, #232	@ 0xe8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40003800 	.word	0x40003800
 8001200:	58024400 	.word	0x58024400
 8001204:	58020800 	.word	0x58020800
 8001208:	58020400 	.word	0x58020400

0800120c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001212:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <HAL_MspInit+0x38>)
 8001214:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001218:	4a0a      	ldr	r2, [pc, #40]	@ (8001244 <HAL_MspInit+0x38>)
 800121a:	f043 0302 	orr.w	r3, r3, #2
 800121e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001222:	4b08      	ldr	r3, [pc, #32]	@ (8001244 <HAL_MspInit+0x38>)
 8001224:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	210f      	movs	r1, #15
 8001234:	f06f 0001 	mvn.w	r0, #1
 8001238:	f000 ff9a 	bl	8002170 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	58024400 	.word	0x58024400

08001248 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08e      	sub	sp, #56	@ 0x38
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM23 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b0f      	cmp	r3, #15
 8001254:	d844      	bhi.n	80012e0 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM23_IRQn, TickPriority ,0);
 8001256:	2200      	movs	r2, #0
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	20a1      	movs	r0, #161	@ 0xa1
 800125c:	f000 ff88 	bl	8002170 <HAL_NVIC_SetPriority>

     /* Enable the TIM23 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM23_IRQn);
 8001260:	20a1      	movs	r0, #161	@ 0xa1
 8001262:	f000 ff9f 	bl	80021a4 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001266:	4a24      	ldr	r2, [pc, #144]	@ (80012f8 <HAL_InitTick+0xb0>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM23 clock */
  __HAL_RCC_TIM23_CLK_ENABLE();
 800126c:	4b23      	ldr	r3, [pc, #140]	@ (80012fc <HAL_InitTick+0xb4>)
 800126e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001272:	4a22      	ldr	r2, [pc, #136]	@ (80012fc <HAL_InitTick+0xb4>)
 8001274:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001278:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800127c:	4b1f      	ldr	r3, [pc, #124]	@ (80012fc <HAL_InitTick+0xb4>)
 800127e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001282:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800128a:	f107 020c 	add.w	r2, r7, #12
 800128e:	f107 0310 	add.w	r3, r7, #16
 8001292:	4611      	mov	r1, r2
 8001294:	4618      	mov	r0, r3
 8001296:	f005 fa81 	bl	800679c <HAL_RCC_GetClockConfig>

  /* Compute TIM23 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800129a:	f005 fa69 	bl	8006770 <HAL_RCC_GetPCLK2Freq>
 800129e:	4603      	mov	r3, r0
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM23 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012a6:	4a16      	ldr	r2, [pc, #88]	@ (8001300 <HAL_InitTick+0xb8>)
 80012a8:	fba2 2303 	umull	r2, r3, r2, r3
 80012ac:	0c9b      	lsrs	r3, r3, #18
 80012ae:	3b01      	subs	r3, #1
 80012b0:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM23 */
  htim23.Instance = TIM23;
 80012b2:	4b14      	ldr	r3, [pc, #80]	@ (8001304 <HAL_InitTick+0xbc>)
 80012b4:	4a14      	ldr	r2, [pc, #80]	@ (8001308 <HAL_InitTick+0xc0>)
 80012b6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM23CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim23.Init.Period = (1000000U / 1000U) - 1U;
 80012b8:	4b12      	ldr	r3, [pc, #72]	@ (8001304 <HAL_InitTick+0xbc>)
 80012ba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012be:	60da      	str	r2, [r3, #12]
  htim23.Init.Prescaler = uwPrescalerValue;
 80012c0:	4a10      	ldr	r2, [pc, #64]	@ (8001304 <HAL_InitTick+0xbc>)
 80012c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012c4:	6053      	str	r3, [r2, #4]
  htim23.Init.ClockDivision = 0;
 80012c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <HAL_InitTick+0xbc>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001304 <HAL_InitTick+0xbc>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim23) == HAL_OK)
 80012d2:	480c      	ldr	r0, [pc, #48]	@ (8001304 <HAL_InitTick+0xbc>)
 80012d4:	f007 fd03 	bl	8008cde <HAL_TIM_Base_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d107      	bne.n	80012ee <HAL_InitTick+0xa6>
 80012de:	e001      	b.n	80012e4 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e005      	b.n	80012f0 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim23);
 80012e4:	4807      	ldr	r0, [pc, #28]	@ (8001304 <HAL_InitTick+0xbc>)
 80012e6:	f007 fd5b 	bl	8008da0 <HAL_TIM_Base_Start_IT>
 80012ea:	4603      	mov	r3, r0
 80012ec:	e000      	b.n	80012f0 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3738      	adds	r7, #56	@ 0x38
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	24000008 	.word	0x24000008
 80012fc:	58024400 	.word	0x58024400
 8001300:	431bde83 	.word	0x431bde83
 8001304:	24001080 	.word	0x24001080
 8001308:	4000e000 	.word	0x4000e000

0800130c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <NMI_Handler+0x4>

08001314 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <HardFault_Handler+0x4>

0800131c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <MemManage_Handler+0x4>

08001324 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <BusFault_Handler+0x4>

0800132c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <UsageFault_Handler+0x4>

08001334 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001348:	4802      	ldr	r0, [pc, #8]	@ (8001354 <DMA1_Stream1_IRQHandler+0x10>)
 800134a:	f002 f8e7 	bl	800351c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2400142c 	.word	0x2400142c

08001358 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800135c:	4802      	ldr	r0, [pc, #8]	@ (8001368 <DMA1_Stream5_IRQHandler+0x10>)
 800135e:	f002 f8dd 	bl	800351c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	240013b4 	.word	0x240013b4

0800136c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001370:	4802      	ldr	r0, [pc, #8]	@ (800137c <FDCAN1_IT0_IRQHandler+0x10>)
 8001372:	f003 fc17 	bl	8004ba4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	240000a4 	.word	0x240000a4

08001380 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001384:	4802      	ldr	r0, [pc, #8]	@ (8001390 <FDCAN1_IT1_IRQHandler+0x10>)
 8001386:	f003 fc0d 	bl	8004ba4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	240000a4 	.word	0x240000a4

08001394 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001398:	4802      	ldr	r0, [pc, #8]	@ (80013a4 <SPI2_IRQHandler+0x10>)
 800139a:	f007 f9cb 	bl	8008734 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	24000ff8 	.word	0x24000ff8

080013a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013ac:	4802      	ldr	r0, [pc, #8]	@ (80013b8 <USART1_IRQHandler+0x10>)
 80013ae:	f008 fca3 	bl	8009cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2400128c 	.word	0x2400128c

080013bc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80013c0:	4802      	ldr	r0, [pc, #8]	@ (80013cc <UART5_IRQHandler+0x10>)
 80013c2:	f008 fc99 	bl	8009cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	24001164 	.word	0x24001164

080013d0 <USART10_IRQHandler>:

/**
  * @brief This function handles USART10 global interrupt.
  */
void USART10_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART10_IRQn 0 */

  /* USER CODE END USART10_IRQn 0 */
  HAL_UART_IRQHandler(&huart10);
 80013d4:	4802      	ldr	r0, [pc, #8]	@ (80013e0 <USART10_IRQHandler+0x10>)
 80013d6:	f008 fc8f 	bl	8009cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART10_IRQn 1 */

  /* USER CODE END USART10_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	24001320 	.word	0x24001320

080013e4 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 80013e8:	4802      	ldr	r0, [pc, #8]	@ (80013f4 <FDCAN3_IT0_IRQHandler+0x10>)
 80013ea:	f003 fbdb 	bl	8004ba4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	240001e4 	.word	0x240001e4

080013f8 <FDCAN3_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 1.
  */
void FDCAN3_IT1_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 0 */

  /* USER CODE END FDCAN3_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 80013fc:	4802      	ldr	r0, [pc, #8]	@ (8001408 <FDCAN3_IT1_IRQHandler+0x10>)
 80013fe:	f003 fbd1 	bl	8004ba4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 1 */

  /* USER CODE END FDCAN3_IT1_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	240001e4 	.word	0x240001e4

0800140c <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8001410:	4802      	ldr	r0, [pc, #8]	@ (800141c <TIM23_IRQHandler+0x10>)
 8001412:	f007 fda2 	bl	8008f5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	24001080 	.word	0x24001080

08001420 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001424:	4b3e      	ldr	r3, [pc, #248]	@ (8001520 <SystemInit+0x100>)
 8001426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800142a:	4a3d      	ldr	r2, [pc, #244]	@ (8001520 <SystemInit+0x100>)
 800142c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001430:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001434:	4b3b      	ldr	r3, [pc, #236]	@ (8001524 <SystemInit+0x104>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 030f 	and.w	r3, r3, #15
 800143c:	2b06      	cmp	r3, #6
 800143e:	d807      	bhi.n	8001450 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001440:	4b38      	ldr	r3, [pc, #224]	@ (8001524 <SystemInit+0x104>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f023 030f 	bic.w	r3, r3, #15
 8001448:	4a36      	ldr	r2, [pc, #216]	@ (8001524 <SystemInit+0x104>)
 800144a:	f043 0307 	orr.w	r3, r3, #7
 800144e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001450:	4b35      	ldr	r3, [pc, #212]	@ (8001528 <SystemInit+0x108>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a34      	ldr	r2, [pc, #208]	@ (8001528 <SystemInit+0x108>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800145c:	4b32      	ldr	r3, [pc, #200]	@ (8001528 <SystemInit+0x108>)
 800145e:	2200      	movs	r2, #0
 8001460:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001462:	4b31      	ldr	r3, [pc, #196]	@ (8001528 <SystemInit+0x108>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	4930      	ldr	r1, [pc, #192]	@ (8001528 <SystemInit+0x108>)
 8001468:	4b30      	ldr	r3, [pc, #192]	@ (800152c <SystemInit+0x10c>)
 800146a:	4013      	ands	r3, r2
 800146c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800146e:	4b2d      	ldr	r3, [pc, #180]	@ (8001524 <SystemInit+0x104>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	2b00      	cmp	r3, #0
 8001478:	d007      	beq.n	800148a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800147a:	4b2a      	ldr	r3, [pc, #168]	@ (8001524 <SystemInit+0x104>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f023 030f 	bic.w	r3, r3, #15
 8001482:	4a28      	ldr	r2, [pc, #160]	@ (8001524 <SystemInit+0x104>)
 8001484:	f043 0307 	orr.w	r3, r3, #7
 8001488:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800148a:	4b27      	ldr	r3, [pc, #156]	@ (8001528 <SystemInit+0x108>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001490:	4b25      	ldr	r3, [pc, #148]	@ (8001528 <SystemInit+0x108>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001496:	4b24      	ldr	r3, [pc, #144]	@ (8001528 <SystemInit+0x108>)
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800149c:	4b22      	ldr	r3, [pc, #136]	@ (8001528 <SystemInit+0x108>)
 800149e:	4a24      	ldr	r2, [pc, #144]	@ (8001530 <SystemInit+0x110>)
 80014a0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014a2:	4b21      	ldr	r3, [pc, #132]	@ (8001528 <SystemInit+0x108>)
 80014a4:	4a23      	ldr	r2, [pc, #140]	@ (8001534 <SystemInit+0x114>)
 80014a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001528 <SystemInit+0x108>)
 80014aa:	4a23      	ldr	r2, [pc, #140]	@ (8001538 <SystemInit+0x118>)
 80014ac:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001528 <SystemInit+0x108>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001528 <SystemInit+0x108>)
 80014b6:	4a20      	ldr	r2, [pc, #128]	@ (8001538 <SystemInit+0x118>)
 80014b8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001528 <SystemInit+0x108>)
 80014bc:	2200      	movs	r2, #0
 80014be:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014c0:	4b19      	ldr	r3, [pc, #100]	@ (8001528 <SystemInit+0x108>)
 80014c2:	4a1d      	ldr	r2, [pc, #116]	@ (8001538 <SystemInit+0x118>)
 80014c4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014c6:	4b18      	ldr	r3, [pc, #96]	@ (8001528 <SystemInit+0x108>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014cc:	4b16      	ldr	r3, [pc, #88]	@ (8001528 <SystemInit+0x108>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a15      	ldr	r2, [pc, #84]	@ (8001528 <SystemInit+0x108>)
 80014d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014d8:	4b13      	ldr	r3, [pc, #76]	@ (8001528 <SystemInit+0x108>)
 80014da:	2200      	movs	r2, #0
 80014dc:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80014de:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <SystemInit+0x108>)
 80014e0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80014e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d113      	bne.n	8001514 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80014ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <SystemInit+0x108>)
 80014ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80014f2:	4a0d      	ldr	r2, [pc, #52]	@ (8001528 <SystemInit+0x108>)
 80014f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014f8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	@ (800153c <SystemInit+0x11c>)
 80014fe:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001502:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001504:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <SystemInit+0x108>)
 8001506:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800150a:	4a07      	ldr	r2, [pc, #28]	@ (8001528 <SystemInit+0x108>)
 800150c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001510:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000ed00 	.word	0xe000ed00
 8001524:	52002000 	.word	0x52002000
 8001528:	58024400 	.word	0x58024400
 800152c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001530:	02020200 	.word	0x02020200
 8001534:	01ff0000 	.word	0x01ff0000
 8001538:	01010280 	.word	0x01010280
 800153c:	52004000 	.word	0x52004000

08001540 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001544:	4b09      	ldr	r3, [pc, #36]	@ (800156c <ExitRun0Mode+0x2c>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	4a08      	ldr	r2, [pc, #32]	@ (800156c <ExitRun0Mode+0x2c>)
 800154a:	f043 0302 	orr.w	r3, r3, #2
 800154e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001550:	bf00      	nop
 8001552:	4b06      	ldr	r3, [pc, #24]	@ (800156c <ExitRun0Mode+0x2c>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0f9      	beq.n	8001552 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800155e:	bf00      	nop
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	58024800 	.word	0x58024800

08001570 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	@ 0x28
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001576:	f107 031c 	add.w	r3, r7, #28
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001582:	463b      	mov	r3, r7
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
 8001590:	615a      	str	r2, [r3, #20]
 8001592:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001594:	4b28      	ldr	r3, [pc, #160]	@ (8001638 <MX_TIM2_Init+0xc8>)
 8001596:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800159a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2399;
 800159c:	4b26      	ldr	r3, [pc, #152]	@ (8001638 <MX_TIM2_Init+0xc8>)
 800159e:	f640 125f 	movw	r2, #2399	@ 0x95f
 80015a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a4:	4b24      	ldr	r3, [pc, #144]	@ (8001638 <MX_TIM2_Init+0xc8>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 80015aa:	4b23      	ldr	r3, [pc, #140]	@ (8001638 <MX_TIM2_Init+0xc8>)
 80015ac:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80015b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b2:	4b21      	ldr	r3, [pc, #132]	@ (8001638 <MX_TIM2_Init+0xc8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001638 <MX_TIM2_Init+0xc8>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015be:	481e      	ldr	r0, [pc, #120]	@ (8001638 <MX_TIM2_Init+0xc8>)
 80015c0:	f007 fc74 	bl	8008eac <HAL_TIM_PWM_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 80015ca:	f7ff fcdb 	bl	8000f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015d6:	f107 031c 	add.w	r3, r7, #28
 80015da:	4619      	mov	r1, r3
 80015dc:	4816      	ldr	r0, [pc, #88]	@ (8001638 <MX_TIM2_Init+0xc8>)
 80015de:	f008 fa81 	bl	8009ae4 <HAL_TIMEx_MasterConfigSynchronization>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80015e8:	f7ff fccc 	bl	8000f84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ec:	2360      	movs	r3, #96	@ 0x60
 80015ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015fc:	463b      	mov	r3, r7
 80015fe:	2200      	movs	r2, #0
 8001600:	4619      	mov	r1, r3
 8001602:	480d      	ldr	r0, [pc, #52]	@ (8001638 <MX_TIM2_Init+0xc8>)
 8001604:	f007 fdb0 	bl	8009168 <HAL_TIM_PWM_ConfigChannel>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800160e:	f7ff fcb9 	bl	8000f84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001612:	463b      	mov	r3, r7
 8001614:	2208      	movs	r2, #8
 8001616:	4619      	mov	r1, r3
 8001618:	4807      	ldr	r0, [pc, #28]	@ (8001638 <MX_TIM2_Init+0xc8>)
 800161a:	f007 fda5 	bl	8009168 <HAL_TIM_PWM_ConfigChannel>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8001624:	f7ff fcae 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001628:	4803      	ldr	r0, [pc, #12]	@ (8001638 <MX_TIM2_Init+0xc8>)
 800162a:	f000 f89b 	bl	8001764 <HAL_TIM_MspPostInit>

}
 800162e:	bf00      	nop
 8001630:	3728      	adds	r7, #40	@ 0x28
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	240010cc 	.word	0x240010cc

0800163c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	@ 0x28
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001642:	f107 031c 	add.w	r3, r7, #28
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800164e:	463b      	mov	r3, r7
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
 800165c:	615a      	str	r2, [r3, #20]
 800165e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001660:	4b22      	ldr	r3, [pc, #136]	@ (80016ec <MX_TIM12_Init+0xb0>)
 8001662:	4a23      	ldr	r2, [pc, #140]	@ (80016f0 <MX_TIM12_Init+0xb4>)
 8001664:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 24-1;
 8001666:	4b21      	ldr	r3, [pc, #132]	@ (80016ec <MX_TIM12_Init+0xb0>)
 8001668:	2217      	movs	r2, #23
 800166a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166c:	4b1f      	ldr	r3, [pc, #124]	@ (80016ec <MX_TIM12_Init+0xb0>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 2000-1;
 8001672:	4b1e      	ldr	r3, [pc, #120]	@ (80016ec <MX_TIM12_Init+0xb0>)
 8001674:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001678:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167a:	4b1c      	ldr	r3, [pc, #112]	@ (80016ec <MX_TIM12_Init+0xb0>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001680:	4b1a      	ldr	r3, [pc, #104]	@ (80016ec <MX_TIM12_Init+0xb0>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001686:	4819      	ldr	r0, [pc, #100]	@ (80016ec <MX_TIM12_Init+0xb0>)
 8001688:	f007 fc10 	bl	8008eac <HAL_TIM_PWM_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8001692:	f7ff fc77 	bl	8000f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 800169e:	f107 031c 	add.w	r3, r7, #28
 80016a2:	4619      	mov	r1, r3
 80016a4:	4811      	ldr	r0, [pc, #68]	@ (80016ec <MX_TIM12_Init+0xb0>)
 80016a6:	f008 fa1d 	bl	8009ae4 <HAL_TIMEx_MasterConfigSynchronization>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80016b0:	f7ff fc68 	bl	8000f84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b4:	2360      	movs	r3, #96	@ 0x60
 80016b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 80016b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016c6:	463b      	mov	r3, r7
 80016c8:	2204      	movs	r2, #4
 80016ca:	4619      	mov	r1, r3
 80016cc:	4807      	ldr	r0, [pc, #28]	@ (80016ec <MX_TIM12_Init+0xb0>)
 80016ce:	f007 fd4b 	bl	8009168 <HAL_TIM_PWM_ConfigChannel>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM12_Init+0xa0>
  {
    Error_Handler();
 80016d8:	f7ff fc54 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80016dc:	4803      	ldr	r0, [pc, #12]	@ (80016ec <MX_TIM12_Init+0xb0>)
 80016de:	f000 f841 	bl	8001764 <HAL_TIM_MspPostInit>

}
 80016e2:	bf00      	nop
 80016e4:	3728      	adds	r7, #40	@ 0x28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	24001118 	.word	0x24001118
 80016f0:	40001800 	.word	0x40001800

080016f4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001704:	d10f      	bne.n	8001726 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001706:	4b15      	ldr	r3, [pc, #84]	@ (800175c <HAL_TIM_PWM_MspInit+0x68>)
 8001708:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800170c:	4a13      	ldr	r2, [pc, #76]	@ (800175c <HAL_TIM_PWM_MspInit+0x68>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001716:	4b11      	ldr	r3, [pc, #68]	@ (800175c <HAL_TIM_PWM_MspInit+0x68>)
 8001718:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001724:	e013      	b.n	800174e <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM12)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a0d      	ldr	r2, [pc, #52]	@ (8001760 <HAL_TIM_PWM_MspInit+0x6c>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d10e      	bne.n	800174e <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001730:	4b0a      	ldr	r3, [pc, #40]	@ (800175c <HAL_TIM_PWM_MspInit+0x68>)
 8001732:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001736:	4a09      	ldr	r2, [pc, #36]	@ (800175c <HAL_TIM_PWM_MspInit+0x68>)
 8001738:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800173c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001740:	4b06      	ldr	r3, [pc, #24]	@ (800175c <HAL_TIM_PWM_MspInit+0x68>)
 8001742:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
}
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	58024400 	.word	0x58024400
 8001760:	40001800 	.word	0x40001800

08001764 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	@ 0x28
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001784:	d11f      	bne.n	80017c6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	4b24      	ldr	r3, [pc, #144]	@ (8001818 <HAL_TIM_MspPostInit+0xb4>)
 8001788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800178c:	4a22      	ldr	r2, [pc, #136]	@ (8001818 <HAL_TIM_MspPostInit+0xb4>)
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001796:	4b20      	ldr	r3, [pc, #128]	@ (8001818 <HAL_TIM_MspPostInit+0xb4>)
 8001798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80017a4:	2305      	movs	r3, #5
 80017a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017b4:	2301      	movs	r3, #1
 80017b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	4619      	mov	r1, r3
 80017be:	4817      	ldr	r0, [pc, #92]	@ (800181c <HAL_TIM_MspPostInit+0xb8>)
 80017c0:	f003 fe8a 	bl	80054d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80017c4:	e024      	b.n	8001810 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM12)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a15      	ldr	r2, [pc, #84]	@ (8001820 <HAL_TIM_MspPostInit+0xbc>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d11f      	bne.n	8001810 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d0:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <HAL_TIM_MspPostInit+0xb4>)
 80017d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017d6:	4a10      	ldr	r2, [pc, #64]	@ (8001818 <HAL_TIM_MspPostInit+0xb4>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001818 <HAL_TIM_MspPostInit+0xb4>)
 80017e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8001800:	2302      	movs	r3, #2
 8001802:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4619      	mov	r1, r3
 800180a:	4806      	ldr	r0, [pc, #24]	@ (8001824 <HAL_TIM_MspPostInit+0xc0>)
 800180c:	f003 fe64 	bl	80054d8 <HAL_GPIO_Init>
}
 8001810:	bf00      	nop
 8001812:	3728      	adds	r7, #40	@ 0x28
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	58024400 	.word	0x58024400
 800181c:	58020000 	.word	0x58020000
 8001820:	40001800 	.word	0x40001800
 8001824:	58020400 	.word	0x58020400

08001828 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_usart1_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800182c:	4b23      	ldr	r3, [pc, #140]	@ (80018bc <MX_UART5_Init+0x94>)
 800182e:	4a24      	ldr	r2, [pc, #144]	@ (80018c0 <MX_UART5_Init+0x98>)
 8001830:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 100000;
 8001832:	4b22      	ldr	r3, [pc, #136]	@ (80018bc <MX_UART5_Init+0x94>)
 8001834:	4a23      	ldr	r2, [pc, #140]	@ (80018c4 <MX_UART5_Init+0x9c>)
 8001836:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 8001838:	4b20      	ldr	r3, [pc, #128]	@ (80018bc <MX_UART5_Init+0x94>)
 800183a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800183e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001840:	4b1e      	ldr	r3, [pc, #120]	@ (80018bc <MX_UART5_Init+0x94>)
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 8001846:	4b1d      	ldr	r3, [pc, #116]	@ (80018bc <MX_UART5_Init+0x94>)
 8001848:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800184c:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800184e:	4b1b      	ldr	r3, [pc, #108]	@ (80018bc <MX_UART5_Init+0x94>)
 8001850:	220c      	movs	r2, #12
 8001852:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001854:	4b19      	ldr	r3, [pc, #100]	@ (80018bc <MX_UART5_Init+0x94>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800185a:	4b18      	ldr	r3, [pc, #96]	@ (80018bc <MX_UART5_Init+0x94>)
 800185c:	2200      	movs	r2, #0
 800185e:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001860:	4b16      	ldr	r3, [pc, #88]	@ (80018bc <MX_UART5_Init+0x94>)
 8001862:	2200      	movs	r2, #0
 8001864:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001866:	4b15      	ldr	r3, [pc, #84]	@ (80018bc <MX_UART5_Init+0x94>)
 8001868:	2200      	movs	r2, #0
 800186a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800186c:	4b13      	ldr	r3, [pc, #76]	@ (80018bc <MX_UART5_Init+0x94>)
 800186e:	2200      	movs	r2, #0
 8001870:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001872:	4812      	ldr	r0, [pc, #72]	@ (80018bc <MX_UART5_Init+0x94>)
 8001874:	f008 f9f0 	bl	8009c58 <HAL_UART_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_UART5_Init+0x5a>
  {
    Error_Handler();
 800187e:	f7ff fb81 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001882:	2100      	movs	r1, #0
 8001884:	480d      	ldr	r0, [pc, #52]	@ (80018bc <MX_UART5_Init+0x94>)
 8001886:	f009 ff4d 	bl	800b724 <HAL_UARTEx_SetTxFifoThreshold>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_UART5_Init+0x6c>
  {
    Error_Handler();
 8001890:	f7ff fb78 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001894:	2100      	movs	r1, #0
 8001896:	4809      	ldr	r0, [pc, #36]	@ (80018bc <MX_UART5_Init+0x94>)
 8001898:	f009 ff82 	bl	800b7a0 <HAL_UARTEx_SetRxFifoThreshold>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_UART5_Init+0x7e>
  {
    Error_Handler();
 80018a2:	f7ff fb6f 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80018a6:	4805      	ldr	r0, [pc, #20]	@ (80018bc <MX_UART5_Init+0x94>)
 80018a8:	f009 ff03 	bl	800b6b2 <HAL_UARTEx_DisableFifoMode>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_UART5_Init+0x8e>
  {
    Error_Handler();
 80018b2:	f7ff fb67 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	24001164 	.word	0x24001164
 80018c0:	40005000 	.word	0x40005000
 80018c4:	000186a0 	.word	0x000186a0

080018c8 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80018cc:	4b22      	ldr	r3, [pc, #136]	@ (8001958 <MX_UART7_Init+0x90>)
 80018ce:	4a23      	ldr	r2, [pc, #140]	@ (800195c <MX_UART7_Init+0x94>)
 80018d0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 921600;
 80018d2:	4b21      	ldr	r3, [pc, #132]	@ (8001958 <MX_UART7_Init+0x90>)
 80018d4:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80018d8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80018da:	4b1f      	ldr	r3, [pc, #124]	@ (8001958 <MX_UART7_Init+0x90>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80018e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001958 <MX_UART7_Init+0x90>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80018e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001958 <MX_UART7_Init+0x90>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80018ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001958 <MX_UART7_Init+0x90>)
 80018ee:	220c      	movs	r2, #12
 80018f0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018f2:	4b19      	ldr	r3, [pc, #100]	@ (8001958 <MX_UART7_Init+0x90>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f8:	4b17      	ldr	r3, [pc, #92]	@ (8001958 <MX_UART7_Init+0x90>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018fe:	4b16      	ldr	r3, [pc, #88]	@ (8001958 <MX_UART7_Init+0x90>)
 8001900:	2200      	movs	r2, #0
 8001902:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001904:	4b14      	ldr	r3, [pc, #80]	@ (8001958 <MX_UART7_Init+0x90>)
 8001906:	2200      	movs	r2, #0
 8001908:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800190a:	4b13      	ldr	r3, [pc, #76]	@ (8001958 <MX_UART7_Init+0x90>)
 800190c:	2200      	movs	r2, #0
 800190e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001910:	4811      	ldr	r0, [pc, #68]	@ (8001958 <MX_UART7_Init+0x90>)
 8001912:	f008 f9a1 	bl	8009c58 <HAL_UART_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 800191c:	f7ff fb32 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001920:	2100      	movs	r1, #0
 8001922:	480d      	ldr	r0, [pc, #52]	@ (8001958 <MX_UART7_Init+0x90>)
 8001924:	f009 fefe 	bl	800b724 <HAL_UARTEx_SetTxFifoThreshold>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 800192e:	f7ff fb29 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001932:	2100      	movs	r1, #0
 8001934:	4808      	ldr	r0, [pc, #32]	@ (8001958 <MX_UART7_Init+0x90>)
 8001936:	f009 ff33 	bl	800b7a0 <HAL_UARTEx_SetRxFifoThreshold>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001940:	f7ff fb20 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001944:	4804      	ldr	r0, [pc, #16]	@ (8001958 <MX_UART7_Init+0x90>)
 8001946:	f009 feb4 	bl	800b6b2 <HAL_UARTEx_DisableFifoMode>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001950:	f7ff fb18 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}
 8001958:	240011f8 	.word	0x240011f8
 800195c:	40007800 	.word	0x40007800

08001960 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001964:	4b22      	ldr	r3, [pc, #136]	@ (80019f0 <MX_USART1_UART_Init+0x90>)
 8001966:	4a23      	ldr	r2, [pc, #140]	@ (80019f4 <MX_USART1_UART_Init+0x94>)
 8001968:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800196a:	4b21      	ldr	r3, [pc, #132]	@ (80019f0 <MX_USART1_UART_Init+0x90>)
 800196c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001970:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001972:	4b1f      	ldr	r3, [pc, #124]	@ (80019f0 <MX_USART1_UART_Init+0x90>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001978:	4b1d      	ldr	r3, [pc, #116]	@ (80019f0 <MX_USART1_UART_Init+0x90>)
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800197e:	4b1c      	ldr	r3, [pc, #112]	@ (80019f0 <MX_USART1_UART_Init+0x90>)
 8001980:	2200      	movs	r2, #0
 8001982:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001984:	4b1a      	ldr	r3, [pc, #104]	@ (80019f0 <MX_USART1_UART_Init+0x90>)
 8001986:	220c      	movs	r2, #12
 8001988:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198a:	4b19      	ldr	r3, [pc, #100]	@ (80019f0 <MX_USART1_UART_Init+0x90>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001990:	4b17      	ldr	r3, [pc, #92]	@ (80019f0 <MX_USART1_UART_Init+0x90>)
 8001992:	2200      	movs	r2, #0
 8001994:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001996:	4b16      	ldr	r3, [pc, #88]	@ (80019f0 <MX_USART1_UART_Init+0x90>)
 8001998:	2200      	movs	r2, #0
 800199a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800199c:	4b14      	ldr	r3, [pc, #80]	@ (80019f0 <MX_USART1_UART_Init+0x90>)
 800199e:	2200      	movs	r2, #0
 80019a0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019a2:	4b13      	ldr	r3, [pc, #76]	@ (80019f0 <MX_USART1_UART_Init+0x90>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019a8:	4811      	ldr	r0, [pc, #68]	@ (80019f0 <MX_USART1_UART_Init+0x90>)
 80019aa:	f008 f955 	bl	8009c58 <HAL_UART_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80019b4:	f7ff fae6 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019b8:	2100      	movs	r1, #0
 80019ba:	480d      	ldr	r0, [pc, #52]	@ (80019f0 <MX_USART1_UART_Init+0x90>)
 80019bc:	f009 feb2 	bl	800b724 <HAL_UARTEx_SetTxFifoThreshold>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80019c6:	f7ff fadd 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ca:	2100      	movs	r1, #0
 80019cc:	4808      	ldr	r0, [pc, #32]	@ (80019f0 <MX_USART1_UART_Init+0x90>)
 80019ce:	f009 fee7 	bl	800b7a0 <HAL_UARTEx_SetRxFifoThreshold>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80019d8:	f7ff fad4 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80019dc:	4804      	ldr	r0, [pc, #16]	@ (80019f0 <MX_USART1_UART_Init+0x90>)
 80019de:	f009 fe68 	bl	800b6b2 <HAL_UARTEx_DisableFifoMode>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80019e8:	f7ff facc 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	2400128c 	.word	0x2400128c
 80019f4:	40011000 	.word	0x40011000

080019f8 <MX_USART10_UART_Init>:
/* USART10 init function */

void MX_USART10_UART_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 80019fc:	4b22      	ldr	r3, [pc, #136]	@ (8001a88 <MX_USART10_UART_Init+0x90>)
 80019fe:	4a23      	ldr	r2, [pc, #140]	@ (8001a8c <MX_USART10_UART_Init+0x94>)
 8001a00:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 921600;
 8001a02:	4b21      	ldr	r3, [pc, #132]	@ (8001a88 <MX_USART10_UART_Init+0x90>)
 8001a04:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001a08:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001a88 <MX_USART10_UART_Init+0x90>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8001a10:	4b1d      	ldr	r3, [pc, #116]	@ (8001a88 <MX_USART10_UART_Init+0x90>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8001a16:	4b1c      	ldr	r3, [pc, #112]	@ (8001a88 <MX_USART10_UART_Init+0x90>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8001a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a88 <MX_USART10_UART_Init+0x90>)
 8001a1e:	220c      	movs	r2, #12
 8001a20:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a22:	4b19      	ldr	r3, [pc, #100]	@ (8001a88 <MX_USART10_UART_Init+0x90>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a28:	4b17      	ldr	r3, [pc, #92]	@ (8001a88 <MX_USART10_UART_Init+0x90>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a2e:	4b16      	ldr	r3, [pc, #88]	@ (8001a88 <MX_USART10_UART_Init+0x90>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a34:	4b14      	ldr	r3, [pc, #80]	@ (8001a88 <MX_USART10_UART_Init+0x90>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	625a      	str	r2, [r3, #36]	@ 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a3a:	4b13      	ldr	r3, [pc, #76]	@ (8001a88 <MX_USART10_UART_Init+0x90>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8001a40:	4811      	ldr	r0, [pc, #68]	@ (8001a88 <MX_USART10_UART_Init+0x90>)
 8001a42:	f008 f909 	bl	8009c58 <HAL_UART_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 8001a4c:	f7ff fa9a 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a50:	2100      	movs	r1, #0
 8001a52:	480d      	ldr	r0, [pc, #52]	@ (8001a88 <MX_USART10_UART_Init+0x90>)
 8001a54:	f009 fe66 	bl	800b724 <HAL_UARTEx_SetTxFifoThreshold>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 8001a5e:	f7ff fa91 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a62:	2100      	movs	r1, #0
 8001a64:	4808      	ldr	r0, [pc, #32]	@ (8001a88 <MX_USART10_UART_Init+0x90>)
 8001a66:	f009 fe9b 	bl	800b7a0 <HAL_UARTEx_SetRxFifoThreshold>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 8001a70:	f7ff fa88 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 8001a74:	4804      	ldr	r0, [pc, #16]	@ (8001a88 <MX_USART10_UART_Init+0x90>)
 8001a76:	f009 fe1c 	bl	800b6b2 <HAL_UARTEx_DisableFifoMode>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 8001a80:	f7ff fa80 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	24001320 	.word	0x24001320
 8001a8c:	40011c00 	.word	0x40011c00

08001a90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b0c0      	sub	sp, #256	@ 0x100
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aa8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001aac:	22b8      	movs	r2, #184	@ 0xb8
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f00c fc41 	bl	800e338 <memset>
  if(uartHandle->Instance==UART5)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4abc      	ldr	r2, [pc, #752]	@ (8001dac <HAL_UART_MspInit+0x31c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	f040 80a3 	bne.w	8001c08 <HAL_UART_MspInit+0x178>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001ac2:	f04f 0202 	mov.w	r2, #2
 8001ac6:	f04f 0300 	mov.w	r3, #0
 8001aca:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ad4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f004 fea1 	bl	8006820 <HAL_RCCEx_PeriphCLKConfig>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001ae4:	f7ff fa4e 	bl	8000f84 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001ae8:	4bb1      	ldr	r3, [pc, #708]	@ (8001db0 <HAL_UART_MspInit+0x320>)
 8001aea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001aee:	4ab0      	ldr	r2, [pc, #704]	@ (8001db0 <HAL_UART_MspInit+0x320>)
 8001af0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001af4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001af8:	4bad      	ldr	r3, [pc, #692]	@ (8001db0 <HAL_UART_MspInit+0x320>)
 8001afa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001afe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b06:	4baa      	ldr	r3, [pc, #680]	@ (8001db0 <HAL_UART_MspInit+0x320>)
 8001b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b0c:	4aa8      	ldr	r2, [pc, #672]	@ (8001db0 <HAL_UART_MspInit+0x320>)
 8001b0e:	f043 0304 	orr.w	r3, r3, #4
 8001b12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b16:	4ba6      	ldr	r3, [pc, #664]	@ (8001db0 <HAL_UART_MspInit+0x320>)
 8001b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b24:	4ba2      	ldr	r3, [pc, #648]	@ (8001db0 <HAL_UART_MspInit+0x320>)
 8001b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b2a:	4aa1      	ldr	r2, [pc, #644]	@ (8001db0 <HAL_UART_MspInit+0x320>)
 8001b2c:	f043 0308 	orr.w	r3, r3, #8
 8001b30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b34:	4b9e      	ldr	r3, [pc, #632]	@ (8001db0 <HAL_UART_MspInit+0x320>)
 8001b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b46:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001b5c:	2308      	movs	r3, #8
 8001b5e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b62:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001b66:	4619      	mov	r1, r3
 8001b68:	4892      	ldr	r0, [pc, #584]	@ (8001db4 <HAL_UART_MspInit+0x324>)
 8001b6a:	f003 fcb5 	bl	80054d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b6e:	2304      	movs	r3, #4
 8001b70:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b80:	2300      	movs	r3, #0
 8001b82:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001b86:	2308      	movs	r3, #8
 8001b88:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b8c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001b90:	4619      	mov	r1, r3
 8001b92:	4889      	ldr	r0, [pc, #548]	@ (8001db8 <HAL_UART_MspInit+0x328>)
 8001b94:	f003 fca0 	bl	80054d8 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream5;
 8001b98:	4b88      	ldr	r3, [pc, #544]	@ (8001dbc <HAL_UART_MspInit+0x32c>)
 8001b9a:	4a89      	ldr	r2, [pc, #548]	@ (8001dc0 <HAL_UART_MspInit+0x330>)
 8001b9c:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8001b9e:	4b87      	ldr	r3, [pc, #540]	@ (8001dbc <HAL_UART_MspInit+0x32c>)
 8001ba0:	2241      	movs	r2, #65	@ 0x41
 8001ba2:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ba4:	4b85      	ldr	r3, [pc, #532]	@ (8001dbc <HAL_UART_MspInit+0x32c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001baa:	4b84      	ldr	r3, [pc, #528]	@ (8001dbc <HAL_UART_MspInit+0x32c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bb0:	4b82      	ldr	r3, [pc, #520]	@ (8001dbc <HAL_UART_MspInit+0x32c>)
 8001bb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bb6:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bb8:	4b80      	ldr	r3, [pc, #512]	@ (8001dbc <HAL_UART_MspInit+0x32c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bbe:	4b7f      	ldr	r3, [pc, #508]	@ (8001dbc <HAL_UART_MspInit+0x32c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8001bc4:	4b7d      	ldr	r3, [pc, #500]	@ (8001dbc <HAL_UART_MspInit+0x32c>)
 8001bc6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bca:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bcc:	4b7b      	ldr	r3, [pc, #492]	@ (8001dbc <HAL_UART_MspInit+0x32c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bd2:	4b7a      	ldr	r3, [pc, #488]	@ (8001dbc <HAL_UART_MspInit+0x32c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001bd8:	4878      	ldr	r0, [pc, #480]	@ (8001dbc <HAL_UART_MspInit+0x32c>)
 8001bda:	f000 fbe3 	bl	80023a4 <HAL_DMA_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 8001be4:	f7ff f9ce 	bl	8000f84 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a74      	ldr	r2, [pc, #464]	@ (8001dbc <HAL_UART_MspInit+0x32c>)
 8001bec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001bf0:	4a72      	ldr	r2, [pc, #456]	@ (8001dbc <HAL_UART_MspInit+0x32c>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2105      	movs	r1, #5
 8001bfa:	2035      	movs	r0, #53	@ 0x35
 8001bfc:	f000 fab8 	bl	8002170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001c00:	2035      	movs	r0, #53	@ 0x35
 8001c02:	f000 facf 	bl	80021a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }
}
 8001c06:	e151      	b.n	8001eac <HAL_UART_MspInit+0x41c>
  else if(uartHandle->Instance==UART7)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a6d      	ldr	r2, [pc, #436]	@ (8001dc4 <HAL_UART_MspInit+0x334>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d147      	bne.n	8001ca2 <HAL_UART_MspInit+0x212>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001c12:	f04f 0202 	mov.w	r2, #2
 8001c16:	f04f 0300 	mov.w	r3, #0
 8001c1a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c24:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f004 fdf9 	bl	8006820 <HAL_RCCEx_PeriphCLKConfig>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8001c34:	f7ff f9a6 	bl	8000f84 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001c38:	4b5d      	ldr	r3, [pc, #372]	@ (8001db0 <HAL_UART_MspInit+0x320>)
 8001c3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c3e:	4a5c      	ldr	r2, [pc, #368]	@ (8001db0 <HAL_UART_MspInit+0x320>)
 8001c40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001c44:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c48:	4b59      	ldr	r3, [pc, #356]	@ (8001db0 <HAL_UART_MspInit+0x320>)
 8001c4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c4e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001c52:	623b      	str	r3, [r7, #32]
 8001c54:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c56:	4b56      	ldr	r3, [pc, #344]	@ (8001db0 <HAL_UART_MspInit+0x320>)
 8001c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c5c:	4a54      	ldr	r2, [pc, #336]	@ (8001db0 <HAL_UART_MspInit+0x320>)
 8001c5e:	f043 0310 	orr.w	r3, r3, #16
 8001c62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c66:	4b52      	ldr	r3, [pc, #328]	@ (8001db0 <HAL_UART_MspInit+0x320>)
 8001c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	61fb      	str	r3, [r7, #28]
 8001c72:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001c74:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001c78:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001c8e:	2307      	movs	r3, #7
 8001c90:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c94:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001c98:	4619      	mov	r1, r3
 8001c9a:	484b      	ldr	r0, [pc, #300]	@ (8001dc8 <HAL_UART_MspInit+0x338>)
 8001c9c:	f003 fc1c 	bl	80054d8 <HAL_GPIO_Init>
}
 8001ca0:	e104      	b.n	8001eac <HAL_UART_MspInit+0x41c>
  else if(uartHandle->Instance==USART1)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a49      	ldr	r2, [pc, #292]	@ (8001dcc <HAL_UART_MspInit+0x33c>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	f040 8097 	bne.w	8001ddc <HAL_UART_MspInit+0x34c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001cae:	f04f 0201 	mov.w	r2, #1
 8001cb2:	f04f 0300 	mov.w	r3, #0
 8001cb6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cc0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f004 fdab 	bl	8006820 <HAL_RCCEx_PeriphCLKConfig>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <HAL_UART_MspInit+0x244>
      Error_Handler();
 8001cd0:	f7ff f958 	bl	8000f84 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cd4:	4b36      	ldr	r3, [pc, #216]	@ (8001db0 <HAL_UART_MspInit+0x320>)
 8001cd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cda:	4a35      	ldr	r2, [pc, #212]	@ (8001db0 <HAL_UART_MspInit+0x320>)
 8001cdc:	f043 0310 	orr.w	r3, r3, #16
 8001ce0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ce4:	4b32      	ldr	r3, [pc, #200]	@ (8001db0 <HAL_UART_MspInit+0x320>)
 8001ce6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cea:	f003 0310 	and.w	r3, r3, #16
 8001cee:	61bb      	str	r3, [r7, #24]
 8001cf0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf2:	4b2f      	ldr	r3, [pc, #188]	@ (8001db0 <HAL_UART_MspInit+0x320>)
 8001cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cf8:	4a2d      	ldr	r2, [pc, #180]	@ (8001db0 <HAL_UART_MspInit+0x320>)
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d02:	4b2b      	ldr	r3, [pc, #172]	@ (8001db0 <HAL_UART_MspInit+0x320>)
 8001d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d10:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d14:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d2a:	2307      	movs	r3, #7
 8001d2c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d30:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001d34:	4619      	mov	r1, r3
 8001d36:	4826      	ldr	r0, [pc, #152]	@ (8001dd0 <HAL_UART_MspInit+0x340>)
 8001d38:	f003 fbce 	bl	80054d8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream1;
 8001d3c:	4b25      	ldr	r3, [pc, #148]	@ (8001dd4 <HAL_UART_MspInit+0x344>)
 8001d3e:	4a26      	ldr	r2, [pc, #152]	@ (8001dd8 <HAL_UART_MspInit+0x348>)
 8001d40:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001d42:	4b24      	ldr	r3, [pc, #144]	@ (8001dd4 <HAL_UART_MspInit+0x344>)
 8001d44:	2229      	movs	r2, #41	@ 0x29
 8001d46:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d48:	4b22      	ldr	r3, [pc, #136]	@ (8001dd4 <HAL_UART_MspInit+0x344>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d4e:	4b21      	ldr	r3, [pc, #132]	@ (8001dd4 <HAL_UART_MspInit+0x344>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d54:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd4 <HAL_UART_MspInit+0x344>)
 8001d56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d5a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd4 <HAL_UART_MspInit+0x344>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d62:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd4 <HAL_UART_MspInit+0x344>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001d68:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd4 <HAL_UART_MspInit+0x344>)
 8001d6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d6e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d70:	4b18      	ldr	r3, [pc, #96]	@ (8001dd4 <HAL_UART_MspInit+0x344>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d76:	4b17      	ldr	r3, [pc, #92]	@ (8001dd4 <HAL_UART_MspInit+0x344>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d7c:	4815      	ldr	r0, [pc, #84]	@ (8001dd4 <HAL_UART_MspInit+0x344>)
 8001d7e:	f000 fb11 	bl	80023a4 <HAL_DMA_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <HAL_UART_MspInit+0x2fc>
      Error_Handler();
 8001d88:	f7ff f8fc 	bl	8000f84 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a11      	ldr	r2, [pc, #68]	@ (8001dd4 <HAL_UART_MspInit+0x344>)
 8001d90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001d94:	4a0f      	ldr	r2, [pc, #60]	@ (8001dd4 <HAL_UART_MspInit+0x344>)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2105      	movs	r1, #5
 8001d9e:	2025      	movs	r0, #37	@ 0x25
 8001da0:	f000 f9e6 	bl	8002170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001da4:	2025      	movs	r0, #37	@ 0x25
 8001da6:	f000 f9fd 	bl	80021a4 <HAL_NVIC_EnableIRQ>
}
 8001daa:	e07f      	b.n	8001eac <HAL_UART_MspInit+0x41c>
 8001dac:	40005000 	.word	0x40005000
 8001db0:	58024400 	.word	0x58024400
 8001db4:	58020800 	.word	0x58020800
 8001db8:	58020c00 	.word	0x58020c00
 8001dbc:	240013b4 	.word	0x240013b4
 8001dc0:	40020088 	.word	0x40020088
 8001dc4:	40007800 	.word	0x40007800
 8001dc8:	58021000 	.word	0x58021000
 8001dcc:	40011000 	.word	0x40011000
 8001dd0:	58020000 	.word	0x58020000
 8001dd4:	2400142c 	.word	0x2400142c
 8001dd8:	40020028 	.word	0x40020028
  else if(uartHandle->Instance==USART10)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a35      	ldr	r2, [pc, #212]	@ (8001eb8 <HAL_UART_MspInit+0x428>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d162      	bne.n	8001eac <HAL_UART_MspInit+0x41c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 8001de6:	f04f 0201 	mov.w	r2, #1
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001df8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f004 fd0f 	bl	8006820 <HAL_RCCEx_PeriphCLKConfig>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <HAL_UART_MspInit+0x37c>
      Error_Handler();
 8001e08:	f7ff f8bc 	bl	8000f84 <Error_Handler>
    __HAL_RCC_USART10_CLK_ENABLE();
 8001e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001ebc <HAL_UART_MspInit+0x42c>)
 8001e0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e12:	4a2a      	ldr	r2, [pc, #168]	@ (8001ebc <HAL_UART_MspInit+0x42c>)
 8001e14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e18:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e1c:	4b27      	ldr	r3, [pc, #156]	@ (8001ebc <HAL_UART_MspInit+0x42c>)
 8001e1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e2a:	4b24      	ldr	r3, [pc, #144]	@ (8001ebc <HAL_UART_MspInit+0x42c>)
 8001e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e30:	4a22      	ldr	r2, [pc, #136]	@ (8001ebc <HAL_UART_MspInit+0x42c>)
 8001e32:	f043 0310 	orr.w	r3, r3, #16
 8001e36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e3a:	4b20      	ldr	r3, [pc, #128]	@ (8001ebc <HAL_UART_MspInit+0x42c>)
 8001e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e40:	f003 0310 	and.w	r3, r3, #16
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e48:	2304      	movs	r3, #4
 8001e4a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 8001e60:	2304      	movs	r3, #4
 8001e62:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e66:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4814      	ldr	r0, [pc, #80]	@ (8001ec0 <HAL_UART_MspInit+0x430>)
 8001e6e:	f003 fb33 	bl	80054d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e72:	2308      	movs	r3, #8
 8001e74:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 8001e8a:	230b      	movs	r3, #11
 8001e8c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e90:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001e94:	4619      	mov	r1, r3
 8001e96:	480a      	ldr	r0, [pc, #40]	@ (8001ec0 <HAL_UART_MspInit+0x430>)
 8001e98:	f003 fb1e 	bl	80054d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART10_IRQn, 5, 0);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2105      	movs	r1, #5
 8001ea0:	209c      	movs	r0, #156	@ 0x9c
 8001ea2:	f000 f965 	bl	8002170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
 8001ea6:	209c      	movs	r0, #156	@ 0x9c
 8001ea8:	f000 f97c 	bl	80021a4 <HAL_NVIC_EnableIRQ>
}
 8001eac:	bf00      	nop
 8001eae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40011c00 	.word	0x40011c00
 8001ebc:	58024400 	.word	0x58024400
 8001ec0:	58021000 	.word	0x58021000

08001ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ec4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001f00 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001ec8:	f7ff fb3a 	bl	8001540 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ecc:	f7ff faa8 	bl	8001420 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ed0:	480c      	ldr	r0, [pc, #48]	@ (8001f04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ed2:	490d      	ldr	r1, [pc, #52]	@ (8001f08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ed4:	4a0d      	ldr	r2, [pc, #52]	@ (8001f0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed8:	e002      	b.n	8001ee0 <LoopCopyDataInit>

08001eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ede:	3304      	adds	r3, #4

08001ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee4:	d3f9      	bcc.n	8001eda <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ee8:	4c0a      	ldr	r4, [pc, #40]	@ (8001f14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eec:	e001      	b.n	8001ef2 <LoopFillZerobss>

08001eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef0:	3204      	adds	r2, #4

08001ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef4:	d3fb      	bcc.n	8001eee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ef6:	f00c fa85 	bl	800e404 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001efa:	f7fe ff99 	bl	8000e30 <main>
  bx  lr
 8001efe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f00:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001f04:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f08:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001f0c:	0800e634 	.word	0x0800e634
  ldr r2, =_sbss
 8001f10:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8001f14:	2400c850 	.word	0x2400c850

08001f18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f18:	e7fe      	b.n	8001f18 <ADC3_IRQHandler>
	...

08001f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f22:	2003      	movs	r0, #3
 8001f24:	f000 f919 	bl	800215a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f28:	f004 fa62 	bl	80063f0 <HAL_RCC_GetSysClockFreq>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	4b15      	ldr	r3, [pc, #84]	@ (8001f84 <HAL_Init+0x68>)
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	0a1b      	lsrs	r3, r3, #8
 8001f34:	f003 030f 	and.w	r3, r3, #15
 8001f38:	4913      	ldr	r1, [pc, #76]	@ (8001f88 <HAL_Init+0x6c>)
 8001f3a:	5ccb      	ldrb	r3, [r1, r3]
 8001f3c:	f003 031f 	and.w	r3, r3, #31
 8001f40:	fa22 f303 	lsr.w	r3, r2, r3
 8001f44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f46:	4b0f      	ldr	r3, [pc, #60]	@ (8001f84 <HAL_Init+0x68>)
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	4a0e      	ldr	r2, [pc, #56]	@ (8001f88 <HAL_Init+0x6c>)
 8001f50:	5cd3      	ldrb	r3, [r2, r3]
 8001f52:	f003 031f 	and.w	r3, r3, #31
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f8c <HAL_Init+0x70>)
 8001f5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f60:	4a0b      	ldr	r2, [pc, #44]	@ (8001f90 <HAL_Init+0x74>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f66:	200f      	movs	r0, #15
 8001f68:	f7ff f96e 	bl	8001248 <HAL_InitTick>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e002      	b.n	8001f7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f76:	f7ff f949 	bl	800120c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	58024400 	.word	0x58024400
 8001f88:	0800e5e4 	.word	0x0800e5e4
 8001f8c:	24000004 	.word	0x24000004
 8001f90:	24000000 	.word	0x24000000

08001f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f98:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <HAL_IncTick+0x20>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4b06      	ldr	r3, [pc, #24]	@ (8001fb8 <HAL_IncTick+0x24>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	4a04      	ldr	r2, [pc, #16]	@ (8001fb8 <HAL_IncTick+0x24>)
 8001fa6:	6013      	str	r3, [r2, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	2400000c 	.word	0x2400000c
 8001fb8:	240014a4 	.word	0x240014a4

08001fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc0:	4b03      	ldr	r3, [pc, #12]	@ (8001fd0 <HAL_GetTick+0x14>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	240014a4 	.word	0x240014a4

08001fd4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001fde:	4b07      	ldr	r3, [pc, #28]	@ (8001ffc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	4904      	ldr	r1, [pc, #16]	@ (8001ffc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	604b      	str	r3, [r1, #4]
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	58000400 	.word	0x58000400

08002000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002010:	4b0b      	ldr	r3, [pc, #44]	@ (8002040 <__NVIC_SetPriorityGrouping+0x40>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800201c:	4013      	ands	r3, r2
 800201e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002028:	4b06      	ldr	r3, [pc, #24]	@ (8002044 <__NVIC_SetPriorityGrouping+0x44>)
 800202a:	4313      	orrs	r3, r2
 800202c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800202e:	4a04      	ldr	r2, [pc, #16]	@ (8002040 <__NVIC_SetPriorityGrouping+0x40>)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	60d3      	str	r3, [r2, #12]
}
 8002034:	bf00      	nop
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	e000ed00 	.word	0xe000ed00
 8002044:	05fa0000 	.word	0x05fa0000

08002048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800204c:	4b04      	ldr	r3, [pc, #16]	@ (8002060 <__NVIC_GetPriorityGrouping+0x18>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	f003 0307 	and.w	r3, r3, #7
}
 8002056:	4618      	mov	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800206e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002072:	2b00      	cmp	r3, #0
 8002074:	db0b      	blt.n	800208e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	f003 021f 	and.w	r2, r3, #31
 800207c:	4907      	ldr	r1, [pc, #28]	@ (800209c <__NVIC_EnableIRQ+0x38>)
 800207e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002082:	095b      	lsrs	r3, r3, #5
 8002084:	2001      	movs	r0, #1
 8002086:	fa00 f202 	lsl.w	r2, r0, r2
 800208a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	e000e100 	.word	0xe000e100

080020a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	6039      	str	r1, [r7, #0]
 80020aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	db0a      	blt.n	80020ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	490c      	ldr	r1, [pc, #48]	@ (80020ec <__NVIC_SetPriority+0x4c>)
 80020ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020be:	0112      	lsls	r2, r2, #4
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	440b      	add	r3, r1
 80020c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c8:	e00a      	b.n	80020e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	4908      	ldr	r1, [pc, #32]	@ (80020f0 <__NVIC_SetPriority+0x50>)
 80020d0:	88fb      	ldrh	r3, [r7, #6]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	3b04      	subs	r3, #4
 80020d8:	0112      	lsls	r2, r2, #4
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	440b      	add	r3, r1
 80020de:	761a      	strb	r2, [r3, #24]
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000e100 	.word	0xe000e100
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b089      	sub	sp, #36	@ 0x24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f1c3 0307 	rsb	r3, r3, #7
 800210e:	2b04      	cmp	r3, #4
 8002110:	bf28      	it	cs
 8002112:	2304      	movcs	r3, #4
 8002114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3304      	adds	r3, #4
 800211a:	2b06      	cmp	r3, #6
 800211c:	d902      	bls.n	8002124 <NVIC_EncodePriority+0x30>
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3b03      	subs	r3, #3
 8002122:	e000      	b.n	8002126 <NVIC_EncodePriority+0x32>
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002128:	f04f 32ff 	mov.w	r2, #4294967295
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43da      	mvns	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	401a      	ands	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800213c:	f04f 31ff 	mov.w	r1, #4294967295
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	fa01 f303 	lsl.w	r3, r1, r3
 8002146:	43d9      	mvns	r1, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	4313      	orrs	r3, r2
         );
}
 800214e:	4618      	mov	r0, r3
 8002150:	3724      	adds	r7, #36	@ 0x24
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff ff4c 	bl	8002000 <__NVIC_SetPriorityGrouping>
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800217e:	f7ff ff63 	bl	8002048 <__NVIC_GetPriorityGrouping>
 8002182:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	68b9      	ldr	r1, [r7, #8]
 8002188:	6978      	ldr	r0, [r7, #20]
 800218a:	f7ff ffb3 	bl	80020f4 <NVIC_EncodePriority>
 800218e:	4602      	mov	r2, r0
 8002190:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002194:	4611      	mov	r1, r2
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff ff82 	bl	80020a0 <__NVIC_SetPriority>
}
 800219c:	bf00      	nop
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff ff56 	bl	8002064 <__NVIC_EnableIRQ>
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e054      	b.n	800227c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	7f5b      	ldrb	r3, [r3, #29]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d105      	bne.n	80021e8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7fe fa4c 	bl	8000680 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2202      	movs	r2, #2
 80021ec:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	791b      	ldrb	r3, [r3, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10c      	bne.n	8002210 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a22      	ldr	r2, [pc, #136]	@ (8002284 <HAL_CRC_Init+0xc4>)
 80021fc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0218 	bic.w	r2, r2, #24
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	e00c      	b.n	800222a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6899      	ldr	r1, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	461a      	mov	r2, r3
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f834 	bl	8002288 <HAL_CRCEx_Polynomial_Set>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e028      	b.n	800227c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	795b      	ldrb	r3, [r3, #5]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d105      	bne.n	800223e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f04f 32ff 	mov.w	r2, #4294967295
 800223a:	611a      	str	r2, [r3, #16]
 800223c:	e004      	b.n	8002248 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6912      	ldr	r2, [r2, #16]
 8002246:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	695a      	ldr	r2, [r3, #20]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	699a      	ldr	r2, [r3, #24]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	04c11db7 	.word	0x04c11db7

08002288 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002288:	b480      	push	{r7}
 800228a:	b087      	sub	sp, #28
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002298:	231f      	movs	r3, #31
 800229a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d102      	bne.n	80022ac <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	75fb      	strb	r3, [r7, #23]
 80022aa:	e063      	b.n	8002374 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80022ac:	bf00      	nop
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1e5a      	subs	r2, r3, #1
 80022b2:	613a      	str	r2, [r7, #16]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d009      	beq.n	80022cc <HAL_CRCEx_Polynomial_Set+0x44>
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	f003 031f 	and.w	r3, r3, #31
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	fa22 f303 	lsr.w	r3, r2, r3
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0f0      	beq.n	80022ae <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b18      	cmp	r3, #24
 80022d0:	d846      	bhi.n	8002360 <HAL_CRCEx_Polynomial_Set+0xd8>
 80022d2:	a201      	add	r2, pc, #4	@ (adr r2, 80022d8 <HAL_CRCEx_Polynomial_Set+0x50>)
 80022d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d8:	08002367 	.word	0x08002367
 80022dc:	08002361 	.word	0x08002361
 80022e0:	08002361 	.word	0x08002361
 80022e4:	08002361 	.word	0x08002361
 80022e8:	08002361 	.word	0x08002361
 80022ec:	08002361 	.word	0x08002361
 80022f0:	08002361 	.word	0x08002361
 80022f4:	08002361 	.word	0x08002361
 80022f8:	08002355 	.word	0x08002355
 80022fc:	08002361 	.word	0x08002361
 8002300:	08002361 	.word	0x08002361
 8002304:	08002361 	.word	0x08002361
 8002308:	08002361 	.word	0x08002361
 800230c:	08002361 	.word	0x08002361
 8002310:	08002361 	.word	0x08002361
 8002314:	08002361 	.word	0x08002361
 8002318:	08002349 	.word	0x08002349
 800231c:	08002361 	.word	0x08002361
 8002320:	08002361 	.word	0x08002361
 8002324:	08002361 	.word	0x08002361
 8002328:	08002361 	.word	0x08002361
 800232c:	08002361 	.word	0x08002361
 8002330:	08002361 	.word	0x08002361
 8002334:	08002361 	.word	0x08002361
 8002338:	0800233d 	.word	0x0800233d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	2b06      	cmp	r3, #6
 8002340:	d913      	bls.n	800236a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002346:	e010      	b.n	800236a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	2b07      	cmp	r3, #7
 800234c:	d90f      	bls.n	800236e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002352:	e00c      	b.n	800236e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	2b0f      	cmp	r3, #15
 8002358:	d90b      	bls.n	8002372 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800235e:	e008      	b.n	8002372 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	75fb      	strb	r3, [r7, #23]
        break;
 8002364:	e006      	b.n	8002374 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002366:	bf00      	nop
 8002368:	e004      	b.n	8002374 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800236a:	bf00      	nop
 800236c:	e002      	b.n	8002374 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800236e:	bf00      	nop
 8002370:	e000      	b.n	8002374 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002372:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002374:	7dfb      	ldrb	r3, [r7, #23]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10d      	bne.n	8002396 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f023 0118 	bic.w	r1, r3, #24
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	430a      	orrs	r2, r1
 8002394:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002396:	7dfb      	ldrb	r3, [r7, #23]
}
 8002398:	4618      	mov	r0, r3
 800239a:	371c      	adds	r7, #28
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80023ac:	f7ff fe06 	bl	8001fbc <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e312      	b.n	80029e2 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a66      	ldr	r2, [pc, #408]	@ (800255c <HAL_DMA_Init+0x1b8>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d04a      	beq.n	800245c <HAL_DMA_Init+0xb8>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a65      	ldr	r2, [pc, #404]	@ (8002560 <HAL_DMA_Init+0x1bc>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d045      	beq.n	800245c <HAL_DMA_Init+0xb8>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a63      	ldr	r2, [pc, #396]	@ (8002564 <HAL_DMA_Init+0x1c0>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d040      	beq.n	800245c <HAL_DMA_Init+0xb8>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a62      	ldr	r2, [pc, #392]	@ (8002568 <HAL_DMA_Init+0x1c4>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d03b      	beq.n	800245c <HAL_DMA_Init+0xb8>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a60      	ldr	r2, [pc, #384]	@ (800256c <HAL_DMA_Init+0x1c8>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d036      	beq.n	800245c <HAL_DMA_Init+0xb8>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a5f      	ldr	r2, [pc, #380]	@ (8002570 <HAL_DMA_Init+0x1cc>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d031      	beq.n	800245c <HAL_DMA_Init+0xb8>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a5d      	ldr	r2, [pc, #372]	@ (8002574 <HAL_DMA_Init+0x1d0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d02c      	beq.n	800245c <HAL_DMA_Init+0xb8>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a5c      	ldr	r2, [pc, #368]	@ (8002578 <HAL_DMA_Init+0x1d4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d027      	beq.n	800245c <HAL_DMA_Init+0xb8>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a5a      	ldr	r2, [pc, #360]	@ (800257c <HAL_DMA_Init+0x1d8>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d022      	beq.n	800245c <HAL_DMA_Init+0xb8>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a59      	ldr	r2, [pc, #356]	@ (8002580 <HAL_DMA_Init+0x1dc>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d01d      	beq.n	800245c <HAL_DMA_Init+0xb8>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a57      	ldr	r2, [pc, #348]	@ (8002584 <HAL_DMA_Init+0x1e0>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d018      	beq.n	800245c <HAL_DMA_Init+0xb8>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a56      	ldr	r2, [pc, #344]	@ (8002588 <HAL_DMA_Init+0x1e4>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d013      	beq.n	800245c <HAL_DMA_Init+0xb8>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a54      	ldr	r2, [pc, #336]	@ (800258c <HAL_DMA_Init+0x1e8>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d00e      	beq.n	800245c <HAL_DMA_Init+0xb8>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a53      	ldr	r2, [pc, #332]	@ (8002590 <HAL_DMA_Init+0x1ec>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d009      	beq.n	800245c <HAL_DMA_Init+0xb8>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a51      	ldr	r2, [pc, #324]	@ (8002594 <HAL_DMA_Init+0x1f0>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d004      	beq.n	800245c <HAL_DMA_Init+0xb8>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a50      	ldr	r2, [pc, #320]	@ (8002598 <HAL_DMA_Init+0x1f4>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d101      	bne.n	8002460 <HAL_DMA_Init+0xbc>
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <HAL_DMA_Init+0xbe>
 8002460:	2300      	movs	r3, #0
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 813c 	beq.w	80026e0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a37      	ldr	r2, [pc, #220]	@ (800255c <HAL_DMA_Init+0x1b8>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d04a      	beq.n	8002518 <HAL_DMA_Init+0x174>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a36      	ldr	r2, [pc, #216]	@ (8002560 <HAL_DMA_Init+0x1bc>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d045      	beq.n	8002518 <HAL_DMA_Init+0x174>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a34      	ldr	r2, [pc, #208]	@ (8002564 <HAL_DMA_Init+0x1c0>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d040      	beq.n	8002518 <HAL_DMA_Init+0x174>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a33      	ldr	r2, [pc, #204]	@ (8002568 <HAL_DMA_Init+0x1c4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d03b      	beq.n	8002518 <HAL_DMA_Init+0x174>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a31      	ldr	r2, [pc, #196]	@ (800256c <HAL_DMA_Init+0x1c8>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d036      	beq.n	8002518 <HAL_DMA_Init+0x174>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a30      	ldr	r2, [pc, #192]	@ (8002570 <HAL_DMA_Init+0x1cc>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d031      	beq.n	8002518 <HAL_DMA_Init+0x174>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a2e      	ldr	r2, [pc, #184]	@ (8002574 <HAL_DMA_Init+0x1d0>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d02c      	beq.n	8002518 <HAL_DMA_Init+0x174>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a2d      	ldr	r2, [pc, #180]	@ (8002578 <HAL_DMA_Init+0x1d4>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d027      	beq.n	8002518 <HAL_DMA_Init+0x174>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a2b      	ldr	r2, [pc, #172]	@ (800257c <HAL_DMA_Init+0x1d8>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d022      	beq.n	8002518 <HAL_DMA_Init+0x174>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a2a      	ldr	r2, [pc, #168]	@ (8002580 <HAL_DMA_Init+0x1dc>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d01d      	beq.n	8002518 <HAL_DMA_Init+0x174>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a28      	ldr	r2, [pc, #160]	@ (8002584 <HAL_DMA_Init+0x1e0>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d018      	beq.n	8002518 <HAL_DMA_Init+0x174>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a27      	ldr	r2, [pc, #156]	@ (8002588 <HAL_DMA_Init+0x1e4>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d013      	beq.n	8002518 <HAL_DMA_Init+0x174>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a25      	ldr	r2, [pc, #148]	@ (800258c <HAL_DMA_Init+0x1e8>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00e      	beq.n	8002518 <HAL_DMA_Init+0x174>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a24      	ldr	r2, [pc, #144]	@ (8002590 <HAL_DMA_Init+0x1ec>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d009      	beq.n	8002518 <HAL_DMA_Init+0x174>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a22      	ldr	r2, [pc, #136]	@ (8002594 <HAL_DMA_Init+0x1f0>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d004      	beq.n	8002518 <HAL_DMA_Init+0x174>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a21      	ldr	r2, [pc, #132]	@ (8002598 <HAL_DMA_Init+0x1f4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d108      	bne.n	800252a <HAL_DMA_Init+0x186>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0201 	bic.w	r2, r2, #1
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	e007      	b.n	800253a <HAL_DMA_Init+0x196>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0201 	bic.w	r2, r2, #1
 8002538:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800253a:	e02f      	b.n	800259c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800253c:	f7ff fd3e 	bl	8001fbc <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b05      	cmp	r3, #5
 8002548:	d928      	bls.n	800259c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2220      	movs	r2, #32
 800254e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2203      	movs	r2, #3
 8002554:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e242      	b.n	80029e2 <HAL_DMA_Init+0x63e>
 800255c:	40020010 	.word	0x40020010
 8002560:	40020028 	.word	0x40020028
 8002564:	40020040 	.word	0x40020040
 8002568:	40020058 	.word	0x40020058
 800256c:	40020070 	.word	0x40020070
 8002570:	40020088 	.word	0x40020088
 8002574:	400200a0 	.word	0x400200a0
 8002578:	400200b8 	.word	0x400200b8
 800257c:	40020410 	.word	0x40020410
 8002580:	40020428 	.word	0x40020428
 8002584:	40020440 	.word	0x40020440
 8002588:	40020458 	.word	0x40020458
 800258c:	40020470 	.word	0x40020470
 8002590:	40020488 	.word	0x40020488
 8002594:	400204a0 	.word	0x400204a0
 8002598:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1c8      	bne.n	800253c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	4b83      	ldr	r3, [pc, #524]	@ (80027c4 <HAL_DMA_Init+0x420>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80025c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025da:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d107      	bne.n	8002600 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f8:	4313      	orrs	r3, r2
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b28      	cmp	r3, #40	@ 0x28
 8002606:	d903      	bls.n	8002610 <HAL_DMA_Init+0x26c>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b2e      	cmp	r3, #46	@ 0x2e
 800260e:	d91f      	bls.n	8002650 <HAL_DMA_Init+0x2ac>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b3e      	cmp	r3, #62	@ 0x3e
 8002616:	d903      	bls.n	8002620 <HAL_DMA_Init+0x27c>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b42      	cmp	r3, #66	@ 0x42
 800261e:	d917      	bls.n	8002650 <HAL_DMA_Init+0x2ac>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b46      	cmp	r3, #70	@ 0x46
 8002626:	d903      	bls.n	8002630 <HAL_DMA_Init+0x28c>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b48      	cmp	r3, #72	@ 0x48
 800262e:	d90f      	bls.n	8002650 <HAL_DMA_Init+0x2ac>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b4e      	cmp	r3, #78	@ 0x4e
 8002636:	d903      	bls.n	8002640 <HAL_DMA_Init+0x29c>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b52      	cmp	r3, #82	@ 0x52
 800263e:	d907      	bls.n	8002650 <HAL_DMA_Init+0x2ac>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b73      	cmp	r3, #115	@ 0x73
 8002646:	d905      	bls.n	8002654 <HAL_DMA_Init+0x2b0>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b77      	cmp	r3, #119	@ 0x77
 800264e:	d801      	bhi.n	8002654 <HAL_DMA_Init+0x2b0>
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <HAL_DMA_Init+0x2b2>
 8002654:	2300      	movs	r3, #0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002660:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f023 0307 	bic.w	r3, r3, #7
 8002678:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	4313      	orrs	r3, r2
 8002682:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002688:	2b04      	cmp	r3, #4
 800268a:	d117      	bne.n	80026bc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	4313      	orrs	r3, r2
 8002694:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00e      	beq.n	80026bc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f001 ff18 	bl	80044d4 <DMA_CheckFifoParam>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d008      	beq.n	80026bc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2240      	movs	r2, #64	@ 0x40
 80026ae:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e192      	b.n	80029e2 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f001 fe53 	bl	8004370 <DMA_CalcBaseAndBitshift>
 80026ca:	4603      	mov	r3, r0
 80026cc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d2:	f003 031f 	and.w	r3, r3, #31
 80026d6:	223f      	movs	r2, #63	@ 0x3f
 80026d8:	409a      	lsls	r2, r3
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	609a      	str	r2, [r3, #8]
 80026de:	e0c8      	b.n	8002872 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a38      	ldr	r2, [pc, #224]	@ (80027c8 <HAL_DMA_Init+0x424>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d022      	beq.n	8002730 <HAL_DMA_Init+0x38c>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a37      	ldr	r2, [pc, #220]	@ (80027cc <HAL_DMA_Init+0x428>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d01d      	beq.n	8002730 <HAL_DMA_Init+0x38c>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a35      	ldr	r2, [pc, #212]	@ (80027d0 <HAL_DMA_Init+0x42c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d018      	beq.n	8002730 <HAL_DMA_Init+0x38c>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a34      	ldr	r2, [pc, #208]	@ (80027d4 <HAL_DMA_Init+0x430>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d013      	beq.n	8002730 <HAL_DMA_Init+0x38c>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a32      	ldr	r2, [pc, #200]	@ (80027d8 <HAL_DMA_Init+0x434>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d00e      	beq.n	8002730 <HAL_DMA_Init+0x38c>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a31      	ldr	r2, [pc, #196]	@ (80027dc <HAL_DMA_Init+0x438>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d009      	beq.n	8002730 <HAL_DMA_Init+0x38c>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a2f      	ldr	r2, [pc, #188]	@ (80027e0 <HAL_DMA_Init+0x43c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d004      	beq.n	8002730 <HAL_DMA_Init+0x38c>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a2e      	ldr	r2, [pc, #184]	@ (80027e4 <HAL_DMA_Init+0x440>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d101      	bne.n	8002734 <HAL_DMA_Init+0x390>
 8002730:	2301      	movs	r3, #1
 8002732:	e000      	b.n	8002736 <HAL_DMA_Init+0x392>
 8002734:	2300      	movs	r3, #0
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 8092 	beq.w	8002860 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a21      	ldr	r2, [pc, #132]	@ (80027c8 <HAL_DMA_Init+0x424>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d021      	beq.n	800278a <HAL_DMA_Init+0x3e6>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a20      	ldr	r2, [pc, #128]	@ (80027cc <HAL_DMA_Init+0x428>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d01c      	beq.n	800278a <HAL_DMA_Init+0x3e6>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a1e      	ldr	r2, [pc, #120]	@ (80027d0 <HAL_DMA_Init+0x42c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d017      	beq.n	800278a <HAL_DMA_Init+0x3e6>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a1d      	ldr	r2, [pc, #116]	@ (80027d4 <HAL_DMA_Init+0x430>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d012      	beq.n	800278a <HAL_DMA_Init+0x3e6>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a1b      	ldr	r2, [pc, #108]	@ (80027d8 <HAL_DMA_Init+0x434>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d00d      	beq.n	800278a <HAL_DMA_Init+0x3e6>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a1a      	ldr	r2, [pc, #104]	@ (80027dc <HAL_DMA_Init+0x438>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d008      	beq.n	800278a <HAL_DMA_Init+0x3e6>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a18      	ldr	r2, [pc, #96]	@ (80027e0 <HAL_DMA_Init+0x43c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d003      	beq.n	800278a <HAL_DMA_Init+0x3e6>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a17      	ldr	r2, [pc, #92]	@ (80027e4 <HAL_DMA_Init+0x440>)
 8002788:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2202      	movs	r2, #2
 800278e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	4b10      	ldr	r3, [pc, #64]	@ (80027e8 <HAL_DMA_Init+0x444>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b40      	cmp	r3, #64	@ 0x40
 80027b0:	d01c      	beq.n	80027ec <HAL_DMA_Init+0x448>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b80      	cmp	r3, #128	@ 0x80
 80027b8:	d102      	bne.n	80027c0 <HAL_DMA_Init+0x41c>
 80027ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80027be:	e016      	b.n	80027ee <HAL_DMA_Init+0x44a>
 80027c0:	2300      	movs	r3, #0
 80027c2:	e014      	b.n	80027ee <HAL_DMA_Init+0x44a>
 80027c4:	fe10803f 	.word	0xfe10803f
 80027c8:	58025408 	.word	0x58025408
 80027cc:	5802541c 	.word	0x5802541c
 80027d0:	58025430 	.word	0x58025430
 80027d4:	58025444 	.word	0x58025444
 80027d8:	58025458 	.word	0x58025458
 80027dc:	5802546c 	.word	0x5802546c
 80027e0:	58025480 	.word	0x58025480
 80027e4:	58025494 	.word	0x58025494
 80027e8:	fffe000f 	.word	0xfffe000f
 80027ec:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	68d2      	ldr	r2, [r2, #12]
 80027f2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80027f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80027fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002804:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800280c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002814:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800281c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	4313      	orrs	r3, r2
 8002822:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	461a      	mov	r2, r3
 8002832:	4b6e      	ldr	r3, [pc, #440]	@ (80029ec <HAL_DMA_Init+0x648>)
 8002834:	4413      	add	r3, r2
 8002836:	4a6e      	ldr	r2, [pc, #440]	@ (80029f0 <HAL_DMA_Init+0x64c>)
 8002838:	fba2 2303 	umull	r2, r3, r2, r3
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	009a      	lsls	r2, r3, #2
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f001 fd93 	bl	8004370 <DMA_CalcBaseAndBitshift>
 800284a:	4603      	mov	r3, r0
 800284c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002852:	f003 031f 	and.w	r3, r3, #31
 8002856:	2201      	movs	r2, #1
 8002858:	409a      	lsls	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	e008      	b.n	8002872 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2240      	movs	r2, #64	@ 0x40
 8002864:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2203      	movs	r2, #3
 800286a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e0b7      	b.n	80029e2 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a5f      	ldr	r2, [pc, #380]	@ (80029f4 <HAL_DMA_Init+0x650>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d072      	beq.n	8002962 <HAL_DMA_Init+0x5be>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a5d      	ldr	r2, [pc, #372]	@ (80029f8 <HAL_DMA_Init+0x654>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d06d      	beq.n	8002962 <HAL_DMA_Init+0x5be>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a5c      	ldr	r2, [pc, #368]	@ (80029fc <HAL_DMA_Init+0x658>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d068      	beq.n	8002962 <HAL_DMA_Init+0x5be>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a5a      	ldr	r2, [pc, #360]	@ (8002a00 <HAL_DMA_Init+0x65c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d063      	beq.n	8002962 <HAL_DMA_Init+0x5be>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a59      	ldr	r2, [pc, #356]	@ (8002a04 <HAL_DMA_Init+0x660>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d05e      	beq.n	8002962 <HAL_DMA_Init+0x5be>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a57      	ldr	r2, [pc, #348]	@ (8002a08 <HAL_DMA_Init+0x664>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d059      	beq.n	8002962 <HAL_DMA_Init+0x5be>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a56      	ldr	r2, [pc, #344]	@ (8002a0c <HAL_DMA_Init+0x668>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d054      	beq.n	8002962 <HAL_DMA_Init+0x5be>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a54      	ldr	r2, [pc, #336]	@ (8002a10 <HAL_DMA_Init+0x66c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d04f      	beq.n	8002962 <HAL_DMA_Init+0x5be>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a53      	ldr	r2, [pc, #332]	@ (8002a14 <HAL_DMA_Init+0x670>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d04a      	beq.n	8002962 <HAL_DMA_Init+0x5be>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a51      	ldr	r2, [pc, #324]	@ (8002a18 <HAL_DMA_Init+0x674>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d045      	beq.n	8002962 <HAL_DMA_Init+0x5be>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a50      	ldr	r2, [pc, #320]	@ (8002a1c <HAL_DMA_Init+0x678>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d040      	beq.n	8002962 <HAL_DMA_Init+0x5be>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a4e      	ldr	r2, [pc, #312]	@ (8002a20 <HAL_DMA_Init+0x67c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d03b      	beq.n	8002962 <HAL_DMA_Init+0x5be>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a4d      	ldr	r2, [pc, #308]	@ (8002a24 <HAL_DMA_Init+0x680>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d036      	beq.n	8002962 <HAL_DMA_Init+0x5be>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002a28 <HAL_DMA_Init+0x684>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d031      	beq.n	8002962 <HAL_DMA_Init+0x5be>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a4a      	ldr	r2, [pc, #296]	@ (8002a2c <HAL_DMA_Init+0x688>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d02c      	beq.n	8002962 <HAL_DMA_Init+0x5be>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a48      	ldr	r2, [pc, #288]	@ (8002a30 <HAL_DMA_Init+0x68c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d027      	beq.n	8002962 <HAL_DMA_Init+0x5be>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a47      	ldr	r2, [pc, #284]	@ (8002a34 <HAL_DMA_Init+0x690>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d022      	beq.n	8002962 <HAL_DMA_Init+0x5be>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a45      	ldr	r2, [pc, #276]	@ (8002a38 <HAL_DMA_Init+0x694>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d01d      	beq.n	8002962 <HAL_DMA_Init+0x5be>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a44      	ldr	r2, [pc, #272]	@ (8002a3c <HAL_DMA_Init+0x698>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d018      	beq.n	8002962 <HAL_DMA_Init+0x5be>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a42      	ldr	r2, [pc, #264]	@ (8002a40 <HAL_DMA_Init+0x69c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d013      	beq.n	8002962 <HAL_DMA_Init+0x5be>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a41      	ldr	r2, [pc, #260]	@ (8002a44 <HAL_DMA_Init+0x6a0>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d00e      	beq.n	8002962 <HAL_DMA_Init+0x5be>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a3f      	ldr	r2, [pc, #252]	@ (8002a48 <HAL_DMA_Init+0x6a4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d009      	beq.n	8002962 <HAL_DMA_Init+0x5be>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a3e      	ldr	r2, [pc, #248]	@ (8002a4c <HAL_DMA_Init+0x6a8>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d004      	beq.n	8002962 <HAL_DMA_Init+0x5be>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a3c      	ldr	r2, [pc, #240]	@ (8002a50 <HAL_DMA_Init+0x6ac>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d101      	bne.n	8002966 <HAL_DMA_Init+0x5c2>
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <HAL_DMA_Init+0x5c4>
 8002966:	2300      	movs	r3, #0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d032      	beq.n	80029d2 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f001 fe2d 	bl	80045cc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2b80      	cmp	r3, #128	@ 0x80
 8002978:	d102      	bne.n	8002980 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002994:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d010      	beq.n	80029c0 <HAL_DMA_Init+0x61c>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d80c      	bhi.n	80029c0 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f001 feaa 	bl	8004700 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	e008      	b.n	80029d2 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	a7fdabf8 	.word	0xa7fdabf8
 80029f0:	cccccccd 	.word	0xcccccccd
 80029f4:	40020010 	.word	0x40020010
 80029f8:	40020028 	.word	0x40020028
 80029fc:	40020040 	.word	0x40020040
 8002a00:	40020058 	.word	0x40020058
 8002a04:	40020070 	.word	0x40020070
 8002a08:	40020088 	.word	0x40020088
 8002a0c:	400200a0 	.word	0x400200a0
 8002a10:	400200b8 	.word	0x400200b8
 8002a14:	40020410 	.word	0x40020410
 8002a18:	40020428 	.word	0x40020428
 8002a1c:	40020440 	.word	0x40020440
 8002a20:	40020458 	.word	0x40020458
 8002a24:	40020470 	.word	0x40020470
 8002a28:	40020488 	.word	0x40020488
 8002a2c:	400204a0 	.word	0x400204a0
 8002a30:	400204b8 	.word	0x400204b8
 8002a34:	58025408 	.word	0x58025408
 8002a38:	5802541c 	.word	0x5802541c
 8002a3c:	58025430 	.word	0x58025430
 8002a40:	58025444 	.word	0x58025444
 8002a44:	58025458 	.word	0x58025458
 8002a48:	5802546c 	.word	0x5802546c
 8002a4c:	58025480 	.word	0x58025480
 8002a50:	58025494 	.word	0x58025494

08002a54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002a5c:	f7ff faae 	bl	8001fbc <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e2dc      	b.n	8003026 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d008      	beq.n	8002a8a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2280      	movs	r2, #128	@ 0x80
 8002a7c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e2cd      	b.n	8003026 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a76      	ldr	r2, [pc, #472]	@ (8002c68 <HAL_DMA_Abort+0x214>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d04a      	beq.n	8002b2a <HAL_DMA_Abort+0xd6>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a74      	ldr	r2, [pc, #464]	@ (8002c6c <HAL_DMA_Abort+0x218>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d045      	beq.n	8002b2a <HAL_DMA_Abort+0xd6>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a73      	ldr	r2, [pc, #460]	@ (8002c70 <HAL_DMA_Abort+0x21c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d040      	beq.n	8002b2a <HAL_DMA_Abort+0xd6>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a71      	ldr	r2, [pc, #452]	@ (8002c74 <HAL_DMA_Abort+0x220>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d03b      	beq.n	8002b2a <HAL_DMA_Abort+0xd6>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a70      	ldr	r2, [pc, #448]	@ (8002c78 <HAL_DMA_Abort+0x224>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d036      	beq.n	8002b2a <HAL_DMA_Abort+0xd6>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a6e      	ldr	r2, [pc, #440]	@ (8002c7c <HAL_DMA_Abort+0x228>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d031      	beq.n	8002b2a <HAL_DMA_Abort+0xd6>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a6d      	ldr	r2, [pc, #436]	@ (8002c80 <HAL_DMA_Abort+0x22c>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d02c      	beq.n	8002b2a <HAL_DMA_Abort+0xd6>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a6b      	ldr	r2, [pc, #428]	@ (8002c84 <HAL_DMA_Abort+0x230>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d027      	beq.n	8002b2a <HAL_DMA_Abort+0xd6>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a6a      	ldr	r2, [pc, #424]	@ (8002c88 <HAL_DMA_Abort+0x234>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d022      	beq.n	8002b2a <HAL_DMA_Abort+0xd6>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a68      	ldr	r2, [pc, #416]	@ (8002c8c <HAL_DMA_Abort+0x238>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d01d      	beq.n	8002b2a <HAL_DMA_Abort+0xd6>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a67      	ldr	r2, [pc, #412]	@ (8002c90 <HAL_DMA_Abort+0x23c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d018      	beq.n	8002b2a <HAL_DMA_Abort+0xd6>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a65      	ldr	r2, [pc, #404]	@ (8002c94 <HAL_DMA_Abort+0x240>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d013      	beq.n	8002b2a <HAL_DMA_Abort+0xd6>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a64      	ldr	r2, [pc, #400]	@ (8002c98 <HAL_DMA_Abort+0x244>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d00e      	beq.n	8002b2a <HAL_DMA_Abort+0xd6>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a62      	ldr	r2, [pc, #392]	@ (8002c9c <HAL_DMA_Abort+0x248>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d009      	beq.n	8002b2a <HAL_DMA_Abort+0xd6>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a61      	ldr	r2, [pc, #388]	@ (8002ca0 <HAL_DMA_Abort+0x24c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d004      	beq.n	8002b2a <HAL_DMA_Abort+0xd6>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a5f      	ldr	r2, [pc, #380]	@ (8002ca4 <HAL_DMA_Abort+0x250>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d101      	bne.n	8002b2e <HAL_DMA_Abort+0xda>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <HAL_DMA_Abort+0xdc>
 8002b2e:	2300      	movs	r3, #0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d013      	beq.n	8002b5c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 021e 	bic.w	r2, r2, #30
 8002b42:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	695a      	ldr	r2, [r3, #20]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b52:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	e00a      	b.n	8002b72 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 020e 	bic.w	r2, r2, #14
 8002b6a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a3c      	ldr	r2, [pc, #240]	@ (8002c68 <HAL_DMA_Abort+0x214>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d072      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a3a      	ldr	r2, [pc, #232]	@ (8002c6c <HAL_DMA_Abort+0x218>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d06d      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a39      	ldr	r2, [pc, #228]	@ (8002c70 <HAL_DMA_Abort+0x21c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d068      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a37      	ldr	r2, [pc, #220]	@ (8002c74 <HAL_DMA_Abort+0x220>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d063      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a36      	ldr	r2, [pc, #216]	@ (8002c78 <HAL_DMA_Abort+0x224>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d05e      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a34      	ldr	r2, [pc, #208]	@ (8002c7c <HAL_DMA_Abort+0x228>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d059      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a33      	ldr	r2, [pc, #204]	@ (8002c80 <HAL_DMA_Abort+0x22c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d054      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a31      	ldr	r2, [pc, #196]	@ (8002c84 <HAL_DMA_Abort+0x230>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d04f      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a30      	ldr	r2, [pc, #192]	@ (8002c88 <HAL_DMA_Abort+0x234>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d04a      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a2e      	ldr	r2, [pc, #184]	@ (8002c8c <HAL_DMA_Abort+0x238>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d045      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a2d      	ldr	r2, [pc, #180]	@ (8002c90 <HAL_DMA_Abort+0x23c>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d040      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a2b      	ldr	r2, [pc, #172]	@ (8002c94 <HAL_DMA_Abort+0x240>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d03b      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a2a      	ldr	r2, [pc, #168]	@ (8002c98 <HAL_DMA_Abort+0x244>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d036      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a28      	ldr	r2, [pc, #160]	@ (8002c9c <HAL_DMA_Abort+0x248>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d031      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a27      	ldr	r2, [pc, #156]	@ (8002ca0 <HAL_DMA_Abort+0x24c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d02c      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a25      	ldr	r2, [pc, #148]	@ (8002ca4 <HAL_DMA_Abort+0x250>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d027      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a24      	ldr	r2, [pc, #144]	@ (8002ca8 <HAL_DMA_Abort+0x254>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d022      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a22      	ldr	r2, [pc, #136]	@ (8002cac <HAL_DMA_Abort+0x258>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d01d      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a21      	ldr	r2, [pc, #132]	@ (8002cb0 <HAL_DMA_Abort+0x25c>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d018      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a1f      	ldr	r2, [pc, #124]	@ (8002cb4 <HAL_DMA_Abort+0x260>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d013      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a1e      	ldr	r2, [pc, #120]	@ (8002cb8 <HAL_DMA_Abort+0x264>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d00e      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a1c      	ldr	r2, [pc, #112]	@ (8002cbc <HAL_DMA_Abort+0x268>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d009      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a1b      	ldr	r2, [pc, #108]	@ (8002cc0 <HAL_DMA_Abort+0x26c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d004      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a19      	ldr	r2, [pc, #100]	@ (8002cc4 <HAL_DMA_Abort+0x270>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d132      	bne.n	8002cc8 <HAL_DMA_Abort+0x274>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e031      	b.n	8002cca <HAL_DMA_Abort+0x276>
 8002c66:	bf00      	nop
 8002c68:	40020010 	.word	0x40020010
 8002c6c:	40020028 	.word	0x40020028
 8002c70:	40020040 	.word	0x40020040
 8002c74:	40020058 	.word	0x40020058
 8002c78:	40020070 	.word	0x40020070
 8002c7c:	40020088 	.word	0x40020088
 8002c80:	400200a0 	.word	0x400200a0
 8002c84:	400200b8 	.word	0x400200b8
 8002c88:	40020410 	.word	0x40020410
 8002c8c:	40020428 	.word	0x40020428
 8002c90:	40020440 	.word	0x40020440
 8002c94:	40020458 	.word	0x40020458
 8002c98:	40020470 	.word	0x40020470
 8002c9c:	40020488 	.word	0x40020488
 8002ca0:	400204a0 	.word	0x400204a0
 8002ca4:	400204b8 	.word	0x400204b8
 8002ca8:	58025408 	.word	0x58025408
 8002cac:	5802541c 	.word	0x5802541c
 8002cb0:	58025430 	.word	0x58025430
 8002cb4:	58025444 	.word	0x58025444
 8002cb8:	58025458 	.word	0x58025458
 8002cbc:	5802546c 	.word	0x5802546c
 8002cc0:	58025480 	.word	0x58025480
 8002cc4:	58025494 	.word	0x58025494
 8002cc8:	2300      	movs	r3, #0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d007      	beq.n	8002cde <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cdc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a6d      	ldr	r2, [pc, #436]	@ (8002e98 <HAL_DMA_Abort+0x444>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d04a      	beq.n	8002d7e <HAL_DMA_Abort+0x32a>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a6b      	ldr	r2, [pc, #428]	@ (8002e9c <HAL_DMA_Abort+0x448>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d045      	beq.n	8002d7e <HAL_DMA_Abort+0x32a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a6a      	ldr	r2, [pc, #424]	@ (8002ea0 <HAL_DMA_Abort+0x44c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d040      	beq.n	8002d7e <HAL_DMA_Abort+0x32a>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a68      	ldr	r2, [pc, #416]	@ (8002ea4 <HAL_DMA_Abort+0x450>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d03b      	beq.n	8002d7e <HAL_DMA_Abort+0x32a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a67      	ldr	r2, [pc, #412]	@ (8002ea8 <HAL_DMA_Abort+0x454>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d036      	beq.n	8002d7e <HAL_DMA_Abort+0x32a>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a65      	ldr	r2, [pc, #404]	@ (8002eac <HAL_DMA_Abort+0x458>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d031      	beq.n	8002d7e <HAL_DMA_Abort+0x32a>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a64      	ldr	r2, [pc, #400]	@ (8002eb0 <HAL_DMA_Abort+0x45c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d02c      	beq.n	8002d7e <HAL_DMA_Abort+0x32a>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a62      	ldr	r2, [pc, #392]	@ (8002eb4 <HAL_DMA_Abort+0x460>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d027      	beq.n	8002d7e <HAL_DMA_Abort+0x32a>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a61      	ldr	r2, [pc, #388]	@ (8002eb8 <HAL_DMA_Abort+0x464>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d022      	beq.n	8002d7e <HAL_DMA_Abort+0x32a>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a5f      	ldr	r2, [pc, #380]	@ (8002ebc <HAL_DMA_Abort+0x468>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d01d      	beq.n	8002d7e <HAL_DMA_Abort+0x32a>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a5e      	ldr	r2, [pc, #376]	@ (8002ec0 <HAL_DMA_Abort+0x46c>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d018      	beq.n	8002d7e <HAL_DMA_Abort+0x32a>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a5c      	ldr	r2, [pc, #368]	@ (8002ec4 <HAL_DMA_Abort+0x470>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d013      	beq.n	8002d7e <HAL_DMA_Abort+0x32a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a5b      	ldr	r2, [pc, #364]	@ (8002ec8 <HAL_DMA_Abort+0x474>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d00e      	beq.n	8002d7e <HAL_DMA_Abort+0x32a>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a59      	ldr	r2, [pc, #356]	@ (8002ecc <HAL_DMA_Abort+0x478>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d009      	beq.n	8002d7e <HAL_DMA_Abort+0x32a>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a58      	ldr	r2, [pc, #352]	@ (8002ed0 <HAL_DMA_Abort+0x47c>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d004      	beq.n	8002d7e <HAL_DMA_Abort+0x32a>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a56      	ldr	r2, [pc, #344]	@ (8002ed4 <HAL_DMA_Abort+0x480>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d108      	bne.n	8002d90 <HAL_DMA_Abort+0x33c>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0201 	bic.w	r2, r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	e007      	b.n	8002da0 <HAL_DMA_Abort+0x34c>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0201 	bic.w	r2, r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002da0:	e013      	b.n	8002dca <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002da2:	f7ff f90b 	bl	8001fbc <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b05      	cmp	r3, #5
 8002dae:	d90c      	bls.n	8002dca <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2220      	movs	r2, #32
 8002db4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2203      	movs	r2, #3
 8002dba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e12d      	b.n	8003026 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1e5      	bne.n	8002da2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a2f      	ldr	r2, [pc, #188]	@ (8002e98 <HAL_DMA_Abort+0x444>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d04a      	beq.n	8002e76 <HAL_DMA_Abort+0x422>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a2d      	ldr	r2, [pc, #180]	@ (8002e9c <HAL_DMA_Abort+0x448>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d045      	beq.n	8002e76 <HAL_DMA_Abort+0x422>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a2c      	ldr	r2, [pc, #176]	@ (8002ea0 <HAL_DMA_Abort+0x44c>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d040      	beq.n	8002e76 <HAL_DMA_Abort+0x422>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a2a      	ldr	r2, [pc, #168]	@ (8002ea4 <HAL_DMA_Abort+0x450>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d03b      	beq.n	8002e76 <HAL_DMA_Abort+0x422>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a29      	ldr	r2, [pc, #164]	@ (8002ea8 <HAL_DMA_Abort+0x454>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d036      	beq.n	8002e76 <HAL_DMA_Abort+0x422>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a27      	ldr	r2, [pc, #156]	@ (8002eac <HAL_DMA_Abort+0x458>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d031      	beq.n	8002e76 <HAL_DMA_Abort+0x422>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a26      	ldr	r2, [pc, #152]	@ (8002eb0 <HAL_DMA_Abort+0x45c>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d02c      	beq.n	8002e76 <HAL_DMA_Abort+0x422>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a24      	ldr	r2, [pc, #144]	@ (8002eb4 <HAL_DMA_Abort+0x460>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d027      	beq.n	8002e76 <HAL_DMA_Abort+0x422>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a23      	ldr	r2, [pc, #140]	@ (8002eb8 <HAL_DMA_Abort+0x464>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d022      	beq.n	8002e76 <HAL_DMA_Abort+0x422>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a21      	ldr	r2, [pc, #132]	@ (8002ebc <HAL_DMA_Abort+0x468>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d01d      	beq.n	8002e76 <HAL_DMA_Abort+0x422>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a20      	ldr	r2, [pc, #128]	@ (8002ec0 <HAL_DMA_Abort+0x46c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d018      	beq.n	8002e76 <HAL_DMA_Abort+0x422>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a1e      	ldr	r2, [pc, #120]	@ (8002ec4 <HAL_DMA_Abort+0x470>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d013      	beq.n	8002e76 <HAL_DMA_Abort+0x422>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a1d      	ldr	r2, [pc, #116]	@ (8002ec8 <HAL_DMA_Abort+0x474>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d00e      	beq.n	8002e76 <HAL_DMA_Abort+0x422>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a1b      	ldr	r2, [pc, #108]	@ (8002ecc <HAL_DMA_Abort+0x478>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d009      	beq.n	8002e76 <HAL_DMA_Abort+0x422>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a1a      	ldr	r2, [pc, #104]	@ (8002ed0 <HAL_DMA_Abort+0x47c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d004      	beq.n	8002e76 <HAL_DMA_Abort+0x422>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a18      	ldr	r2, [pc, #96]	@ (8002ed4 <HAL_DMA_Abort+0x480>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d101      	bne.n	8002e7a <HAL_DMA_Abort+0x426>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <HAL_DMA_Abort+0x428>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d02b      	beq.n	8002ed8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e84:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e8a:	f003 031f 	and.w	r3, r3, #31
 8002e8e:	223f      	movs	r2, #63	@ 0x3f
 8002e90:	409a      	lsls	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	609a      	str	r2, [r3, #8]
 8002e96:	e02a      	b.n	8002eee <HAL_DMA_Abort+0x49a>
 8002e98:	40020010 	.word	0x40020010
 8002e9c:	40020028 	.word	0x40020028
 8002ea0:	40020040 	.word	0x40020040
 8002ea4:	40020058 	.word	0x40020058
 8002ea8:	40020070 	.word	0x40020070
 8002eac:	40020088 	.word	0x40020088
 8002eb0:	400200a0 	.word	0x400200a0
 8002eb4:	400200b8 	.word	0x400200b8
 8002eb8:	40020410 	.word	0x40020410
 8002ebc:	40020428 	.word	0x40020428
 8002ec0:	40020440 	.word	0x40020440
 8002ec4:	40020458 	.word	0x40020458
 8002ec8:	40020470 	.word	0x40020470
 8002ecc:	40020488 	.word	0x40020488
 8002ed0:	400204a0 	.word	0x400204a0
 8002ed4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002edc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee2:	f003 031f 	and.w	r3, r3, #31
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a4f      	ldr	r2, [pc, #316]	@ (8003030 <HAL_DMA_Abort+0x5dc>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d072      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a4d      	ldr	r2, [pc, #308]	@ (8003034 <HAL_DMA_Abort+0x5e0>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d06d      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a4c      	ldr	r2, [pc, #304]	@ (8003038 <HAL_DMA_Abort+0x5e4>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d068      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a4a      	ldr	r2, [pc, #296]	@ (800303c <HAL_DMA_Abort+0x5e8>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d063      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a49      	ldr	r2, [pc, #292]	@ (8003040 <HAL_DMA_Abort+0x5ec>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d05e      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a47      	ldr	r2, [pc, #284]	@ (8003044 <HAL_DMA_Abort+0x5f0>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d059      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a46      	ldr	r2, [pc, #280]	@ (8003048 <HAL_DMA_Abort+0x5f4>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d054      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a44      	ldr	r2, [pc, #272]	@ (800304c <HAL_DMA_Abort+0x5f8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d04f      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a43      	ldr	r2, [pc, #268]	@ (8003050 <HAL_DMA_Abort+0x5fc>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d04a      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a41      	ldr	r2, [pc, #260]	@ (8003054 <HAL_DMA_Abort+0x600>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d045      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a40      	ldr	r2, [pc, #256]	@ (8003058 <HAL_DMA_Abort+0x604>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d040      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a3e      	ldr	r2, [pc, #248]	@ (800305c <HAL_DMA_Abort+0x608>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d03b      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a3d      	ldr	r2, [pc, #244]	@ (8003060 <HAL_DMA_Abort+0x60c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d036      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a3b      	ldr	r2, [pc, #236]	@ (8003064 <HAL_DMA_Abort+0x610>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d031      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a3a      	ldr	r2, [pc, #232]	@ (8003068 <HAL_DMA_Abort+0x614>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d02c      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a38      	ldr	r2, [pc, #224]	@ (800306c <HAL_DMA_Abort+0x618>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d027      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a37      	ldr	r2, [pc, #220]	@ (8003070 <HAL_DMA_Abort+0x61c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d022      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a35      	ldr	r2, [pc, #212]	@ (8003074 <HAL_DMA_Abort+0x620>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d01d      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a34      	ldr	r2, [pc, #208]	@ (8003078 <HAL_DMA_Abort+0x624>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d018      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a32      	ldr	r2, [pc, #200]	@ (800307c <HAL_DMA_Abort+0x628>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d013      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a31      	ldr	r2, [pc, #196]	@ (8003080 <HAL_DMA_Abort+0x62c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d00e      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a2f      	ldr	r2, [pc, #188]	@ (8003084 <HAL_DMA_Abort+0x630>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d009      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a2e      	ldr	r2, [pc, #184]	@ (8003088 <HAL_DMA_Abort+0x634>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d004      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2c      	ldr	r2, [pc, #176]	@ (800308c <HAL_DMA_Abort+0x638>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d101      	bne.n	8002fe2 <HAL_DMA_Abort+0x58e>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <HAL_DMA_Abort+0x590>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d015      	beq.n	8003014 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002ff0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00c      	beq.n	8003014 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003004:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003008:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003012:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40020010 	.word	0x40020010
 8003034:	40020028 	.word	0x40020028
 8003038:	40020040 	.word	0x40020040
 800303c:	40020058 	.word	0x40020058
 8003040:	40020070 	.word	0x40020070
 8003044:	40020088 	.word	0x40020088
 8003048:	400200a0 	.word	0x400200a0
 800304c:	400200b8 	.word	0x400200b8
 8003050:	40020410 	.word	0x40020410
 8003054:	40020428 	.word	0x40020428
 8003058:	40020440 	.word	0x40020440
 800305c:	40020458 	.word	0x40020458
 8003060:	40020470 	.word	0x40020470
 8003064:	40020488 	.word	0x40020488
 8003068:	400204a0 	.word	0x400204a0
 800306c:	400204b8 	.word	0x400204b8
 8003070:	58025408 	.word	0x58025408
 8003074:	5802541c 	.word	0x5802541c
 8003078:	58025430 	.word	0x58025430
 800307c:	58025444 	.word	0x58025444
 8003080:	58025458 	.word	0x58025458
 8003084:	5802546c 	.word	0x5802546c
 8003088:	58025480 	.word	0x58025480
 800308c:	58025494 	.word	0x58025494

08003090 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e237      	b.n	8003512 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d004      	beq.n	80030b8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2280      	movs	r2, #128	@ 0x80
 80030b2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e22c      	b.n	8003512 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a5c      	ldr	r2, [pc, #368]	@ (8003230 <HAL_DMA_Abort_IT+0x1a0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d04a      	beq.n	8003158 <HAL_DMA_Abort_IT+0xc8>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a5b      	ldr	r2, [pc, #364]	@ (8003234 <HAL_DMA_Abort_IT+0x1a4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d045      	beq.n	8003158 <HAL_DMA_Abort_IT+0xc8>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a59      	ldr	r2, [pc, #356]	@ (8003238 <HAL_DMA_Abort_IT+0x1a8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d040      	beq.n	8003158 <HAL_DMA_Abort_IT+0xc8>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a58      	ldr	r2, [pc, #352]	@ (800323c <HAL_DMA_Abort_IT+0x1ac>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d03b      	beq.n	8003158 <HAL_DMA_Abort_IT+0xc8>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a56      	ldr	r2, [pc, #344]	@ (8003240 <HAL_DMA_Abort_IT+0x1b0>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d036      	beq.n	8003158 <HAL_DMA_Abort_IT+0xc8>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a55      	ldr	r2, [pc, #340]	@ (8003244 <HAL_DMA_Abort_IT+0x1b4>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d031      	beq.n	8003158 <HAL_DMA_Abort_IT+0xc8>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a53      	ldr	r2, [pc, #332]	@ (8003248 <HAL_DMA_Abort_IT+0x1b8>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d02c      	beq.n	8003158 <HAL_DMA_Abort_IT+0xc8>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a52      	ldr	r2, [pc, #328]	@ (800324c <HAL_DMA_Abort_IT+0x1bc>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d027      	beq.n	8003158 <HAL_DMA_Abort_IT+0xc8>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a50      	ldr	r2, [pc, #320]	@ (8003250 <HAL_DMA_Abort_IT+0x1c0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d022      	beq.n	8003158 <HAL_DMA_Abort_IT+0xc8>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a4f      	ldr	r2, [pc, #316]	@ (8003254 <HAL_DMA_Abort_IT+0x1c4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d01d      	beq.n	8003158 <HAL_DMA_Abort_IT+0xc8>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a4d      	ldr	r2, [pc, #308]	@ (8003258 <HAL_DMA_Abort_IT+0x1c8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d018      	beq.n	8003158 <HAL_DMA_Abort_IT+0xc8>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a4c      	ldr	r2, [pc, #304]	@ (800325c <HAL_DMA_Abort_IT+0x1cc>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d013      	beq.n	8003158 <HAL_DMA_Abort_IT+0xc8>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a4a      	ldr	r2, [pc, #296]	@ (8003260 <HAL_DMA_Abort_IT+0x1d0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d00e      	beq.n	8003158 <HAL_DMA_Abort_IT+0xc8>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a49      	ldr	r2, [pc, #292]	@ (8003264 <HAL_DMA_Abort_IT+0x1d4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d009      	beq.n	8003158 <HAL_DMA_Abort_IT+0xc8>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a47      	ldr	r2, [pc, #284]	@ (8003268 <HAL_DMA_Abort_IT+0x1d8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d004      	beq.n	8003158 <HAL_DMA_Abort_IT+0xc8>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a46      	ldr	r2, [pc, #280]	@ (800326c <HAL_DMA_Abort_IT+0x1dc>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d101      	bne.n	800315c <HAL_DMA_Abort_IT+0xcc>
 8003158:	2301      	movs	r3, #1
 800315a:	e000      	b.n	800315e <HAL_DMA_Abort_IT+0xce>
 800315c:	2300      	movs	r3, #0
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 8086 	beq.w	8003270 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2204      	movs	r2, #4
 8003168:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a2f      	ldr	r2, [pc, #188]	@ (8003230 <HAL_DMA_Abort_IT+0x1a0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d04a      	beq.n	800320c <HAL_DMA_Abort_IT+0x17c>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a2e      	ldr	r2, [pc, #184]	@ (8003234 <HAL_DMA_Abort_IT+0x1a4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d045      	beq.n	800320c <HAL_DMA_Abort_IT+0x17c>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a2c      	ldr	r2, [pc, #176]	@ (8003238 <HAL_DMA_Abort_IT+0x1a8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d040      	beq.n	800320c <HAL_DMA_Abort_IT+0x17c>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a2b      	ldr	r2, [pc, #172]	@ (800323c <HAL_DMA_Abort_IT+0x1ac>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d03b      	beq.n	800320c <HAL_DMA_Abort_IT+0x17c>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a29      	ldr	r2, [pc, #164]	@ (8003240 <HAL_DMA_Abort_IT+0x1b0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d036      	beq.n	800320c <HAL_DMA_Abort_IT+0x17c>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a28      	ldr	r2, [pc, #160]	@ (8003244 <HAL_DMA_Abort_IT+0x1b4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d031      	beq.n	800320c <HAL_DMA_Abort_IT+0x17c>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a26      	ldr	r2, [pc, #152]	@ (8003248 <HAL_DMA_Abort_IT+0x1b8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d02c      	beq.n	800320c <HAL_DMA_Abort_IT+0x17c>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a25      	ldr	r2, [pc, #148]	@ (800324c <HAL_DMA_Abort_IT+0x1bc>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d027      	beq.n	800320c <HAL_DMA_Abort_IT+0x17c>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a23      	ldr	r2, [pc, #140]	@ (8003250 <HAL_DMA_Abort_IT+0x1c0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d022      	beq.n	800320c <HAL_DMA_Abort_IT+0x17c>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a22      	ldr	r2, [pc, #136]	@ (8003254 <HAL_DMA_Abort_IT+0x1c4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d01d      	beq.n	800320c <HAL_DMA_Abort_IT+0x17c>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a20      	ldr	r2, [pc, #128]	@ (8003258 <HAL_DMA_Abort_IT+0x1c8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d018      	beq.n	800320c <HAL_DMA_Abort_IT+0x17c>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a1f      	ldr	r2, [pc, #124]	@ (800325c <HAL_DMA_Abort_IT+0x1cc>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d013      	beq.n	800320c <HAL_DMA_Abort_IT+0x17c>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003260 <HAL_DMA_Abort_IT+0x1d0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d00e      	beq.n	800320c <HAL_DMA_Abort_IT+0x17c>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a1c      	ldr	r2, [pc, #112]	@ (8003264 <HAL_DMA_Abort_IT+0x1d4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d009      	beq.n	800320c <HAL_DMA_Abort_IT+0x17c>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a1a      	ldr	r2, [pc, #104]	@ (8003268 <HAL_DMA_Abort_IT+0x1d8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d004      	beq.n	800320c <HAL_DMA_Abort_IT+0x17c>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a19      	ldr	r2, [pc, #100]	@ (800326c <HAL_DMA_Abort_IT+0x1dc>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d108      	bne.n	800321e <HAL_DMA_Abort_IT+0x18e>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0201 	bic.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	e178      	b.n	8003510 <HAL_DMA_Abort_IT+0x480>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0201 	bic.w	r2, r2, #1
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	e16f      	b.n	8003510 <HAL_DMA_Abort_IT+0x480>
 8003230:	40020010 	.word	0x40020010
 8003234:	40020028 	.word	0x40020028
 8003238:	40020040 	.word	0x40020040
 800323c:	40020058 	.word	0x40020058
 8003240:	40020070 	.word	0x40020070
 8003244:	40020088 	.word	0x40020088
 8003248:	400200a0 	.word	0x400200a0
 800324c:	400200b8 	.word	0x400200b8
 8003250:	40020410 	.word	0x40020410
 8003254:	40020428 	.word	0x40020428
 8003258:	40020440 	.word	0x40020440
 800325c:	40020458 	.word	0x40020458
 8003260:	40020470 	.word	0x40020470
 8003264:	40020488 	.word	0x40020488
 8003268:	400204a0 	.word	0x400204a0
 800326c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 020e 	bic.w	r2, r2, #14
 800327e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a6c      	ldr	r2, [pc, #432]	@ (8003438 <HAL_DMA_Abort_IT+0x3a8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d04a      	beq.n	8003320 <HAL_DMA_Abort_IT+0x290>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a6b      	ldr	r2, [pc, #428]	@ (800343c <HAL_DMA_Abort_IT+0x3ac>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d045      	beq.n	8003320 <HAL_DMA_Abort_IT+0x290>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a69      	ldr	r2, [pc, #420]	@ (8003440 <HAL_DMA_Abort_IT+0x3b0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d040      	beq.n	8003320 <HAL_DMA_Abort_IT+0x290>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a68      	ldr	r2, [pc, #416]	@ (8003444 <HAL_DMA_Abort_IT+0x3b4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d03b      	beq.n	8003320 <HAL_DMA_Abort_IT+0x290>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a66      	ldr	r2, [pc, #408]	@ (8003448 <HAL_DMA_Abort_IT+0x3b8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d036      	beq.n	8003320 <HAL_DMA_Abort_IT+0x290>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a65      	ldr	r2, [pc, #404]	@ (800344c <HAL_DMA_Abort_IT+0x3bc>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d031      	beq.n	8003320 <HAL_DMA_Abort_IT+0x290>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a63      	ldr	r2, [pc, #396]	@ (8003450 <HAL_DMA_Abort_IT+0x3c0>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d02c      	beq.n	8003320 <HAL_DMA_Abort_IT+0x290>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a62      	ldr	r2, [pc, #392]	@ (8003454 <HAL_DMA_Abort_IT+0x3c4>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d027      	beq.n	8003320 <HAL_DMA_Abort_IT+0x290>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a60      	ldr	r2, [pc, #384]	@ (8003458 <HAL_DMA_Abort_IT+0x3c8>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d022      	beq.n	8003320 <HAL_DMA_Abort_IT+0x290>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a5f      	ldr	r2, [pc, #380]	@ (800345c <HAL_DMA_Abort_IT+0x3cc>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d01d      	beq.n	8003320 <HAL_DMA_Abort_IT+0x290>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a5d      	ldr	r2, [pc, #372]	@ (8003460 <HAL_DMA_Abort_IT+0x3d0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d018      	beq.n	8003320 <HAL_DMA_Abort_IT+0x290>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a5c      	ldr	r2, [pc, #368]	@ (8003464 <HAL_DMA_Abort_IT+0x3d4>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d013      	beq.n	8003320 <HAL_DMA_Abort_IT+0x290>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a5a      	ldr	r2, [pc, #360]	@ (8003468 <HAL_DMA_Abort_IT+0x3d8>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00e      	beq.n	8003320 <HAL_DMA_Abort_IT+0x290>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a59      	ldr	r2, [pc, #356]	@ (800346c <HAL_DMA_Abort_IT+0x3dc>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d009      	beq.n	8003320 <HAL_DMA_Abort_IT+0x290>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a57      	ldr	r2, [pc, #348]	@ (8003470 <HAL_DMA_Abort_IT+0x3e0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d004      	beq.n	8003320 <HAL_DMA_Abort_IT+0x290>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a56      	ldr	r2, [pc, #344]	@ (8003474 <HAL_DMA_Abort_IT+0x3e4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d108      	bne.n	8003332 <HAL_DMA_Abort_IT+0x2a2>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0201 	bic.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	e007      	b.n	8003342 <HAL_DMA_Abort_IT+0x2b2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 0201 	bic.w	r2, r2, #1
 8003340:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a3c      	ldr	r2, [pc, #240]	@ (8003438 <HAL_DMA_Abort_IT+0x3a8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d072      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a3a      	ldr	r2, [pc, #232]	@ (800343c <HAL_DMA_Abort_IT+0x3ac>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d06d      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a39      	ldr	r2, [pc, #228]	@ (8003440 <HAL_DMA_Abort_IT+0x3b0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d068      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a37      	ldr	r2, [pc, #220]	@ (8003444 <HAL_DMA_Abort_IT+0x3b4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d063      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a36      	ldr	r2, [pc, #216]	@ (8003448 <HAL_DMA_Abort_IT+0x3b8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d05e      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a34      	ldr	r2, [pc, #208]	@ (800344c <HAL_DMA_Abort_IT+0x3bc>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d059      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a33      	ldr	r2, [pc, #204]	@ (8003450 <HAL_DMA_Abort_IT+0x3c0>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d054      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a31      	ldr	r2, [pc, #196]	@ (8003454 <HAL_DMA_Abort_IT+0x3c4>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d04f      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a30      	ldr	r2, [pc, #192]	@ (8003458 <HAL_DMA_Abort_IT+0x3c8>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d04a      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a2e      	ldr	r2, [pc, #184]	@ (800345c <HAL_DMA_Abort_IT+0x3cc>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d045      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a2d      	ldr	r2, [pc, #180]	@ (8003460 <HAL_DMA_Abort_IT+0x3d0>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d040      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a2b      	ldr	r2, [pc, #172]	@ (8003464 <HAL_DMA_Abort_IT+0x3d4>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d03b      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a2a      	ldr	r2, [pc, #168]	@ (8003468 <HAL_DMA_Abort_IT+0x3d8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d036      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a28      	ldr	r2, [pc, #160]	@ (800346c <HAL_DMA_Abort_IT+0x3dc>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d031      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a27      	ldr	r2, [pc, #156]	@ (8003470 <HAL_DMA_Abort_IT+0x3e0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d02c      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a25      	ldr	r2, [pc, #148]	@ (8003474 <HAL_DMA_Abort_IT+0x3e4>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d027      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a24      	ldr	r2, [pc, #144]	@ (8003478 <HAL_DMA_Abort_IT+0x3e8>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d022      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a22      	ldr	r2, [pc, #136]	@ (800347c <HAL_DMA_Abort_IT+0x3ec>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d01d      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a21      	ldr	r2, [pc, #132]	@ (8003480 <HAL_DMA_Abort_IT+0x3f0>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d018      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a1f      	ldr	r2, [pc, #124]	@ (8003484 <HAL_DMA_Abort_IT+0x3f4>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d013      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a1e      	ldr	r2, [pc, #120]	@ (8003488 <HAL_DMA_Abort_IT+0x3f8>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d00e      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a1c      	ldr	r2, [pc, #112]	@ (800348c <HAL_DMA_Abort_IT+0x3fc>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d009      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a1b      	ldr	r2, [pc, #108]	@ (8003490 <HAL_DMA_Abort_IT+0x400>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d004      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a19      	ldr	r2, [pc, #100]	@ (8003494 <HAL_DMA_Abort_IT+0x404>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d132      	bne.n	8003498 <HAL_DMA_Abort_IT+0x408>
 8003432:	2301      	movs	r3, #1
 8003434:	e031      	b.n	800349a <HAL_DMA_Abort_IT+0x40a>
 8003436:	bf00      	nop
 8003438:	40020010 	.word	0x40020010
 800343c:	40020028 	.word	0x40020028
 8003440:	40020040 	.word	0x40020040
 8003444:	40020058 	.word	0x40020058
 8003448:	40020070 	.word	0x40020070
 800344c:	40020088 	.word	0x40020088
 8003450:	400200a0 	.word	0x400200a0
 8003454:	400200b8 	.word	0x400200b8
 8003458:	40020410 	.word	0x40020410
 800345c:	40020428 	.word	0x40020428
 8003460:	40020440 	.word	0x40020440
 8003464:	40020458 	.word	0x40020458
 8003468:	40020470 	.word	0x40020470
 800346c:	40020488 	.word	0x40020488
 8003470:	400204a0 	.word	0x400204a0
 8003474:	400204b8 	.word	0x400204b8
 8003478:	58025408 	.word	0x58025408
 800347c:	5802541c 	.word	0x5802541c
 8003480:	58025430 	.word	0x58025430
 8003484:	58025444 	.word	0x58025444
 8003488:	58025458 	.word	0x58025458
 800348c:	5802546c 	.word	0x5802546c
 8003490:	58025480 	.word	0x58025480
 8003494:	58025494 	.word	0x58025494
 8003498:	2300      	movs	r3, #0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d028      	beq.n	80034f0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034ac:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b8:	f003 031f 	and.w	r3, r3, #31
 80034bc:	2201      	movs	r2, #1
 80034be:	409a      	lsls	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80034cc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00c      	beq.n	80034f0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034e4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80034ee:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop

0800351c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08a      	sub	sp, #40	@ 0x28
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003528:	4b67      	ldr	r3, [pc, #412]	@ (80036c8 <HAL_DMA_IRQHandler+0x1ac>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a67      	ldr	r2, [pc, #412]	@ (80036cc <HAL_DMA_IRQHandler+0x1b0>)
 800352e:	fba2 2303 	umull	r2, r3, r2, r3
 8003532:	0a9b      	lsrs	r3, r3, #10
 8003534:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800353a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003540:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a5f      	ldr	r2, [pc, #380]	@ (80036d0 <HAL_DMA_IRQHandler+0x1b4>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d04a      	beq.n	80035ee <HAL_DMA_IRQHandler+0xd2>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a5d      	ldr	r2, [pc, #372]	@ (80036d4 <HAL_DMA_IRQHandler+0x1b8>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d045      	beq.n	80035ee <HAL_DMA_IRQHandler+0xd2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a5c      	ldr	r2, [pc, #368]	@ (80036d8 <HAL_DMA_IRQHandler+0x1bc>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d040      	beq.n	80035ee <HAL_DMA_IRQHandler+0xd2>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a5a      	ldr	r2, [pc, #360]	@ (80036dc <HAL_DMA_IRQHandler+0x1c0>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d03b      	beq.n	80035ee <HAL_DMA_IRQHandler+0xd2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a59      	ldr	r2, [pc, #356]	@ (80036e0 <HAL_DMA_IRQHandler+0x1c4>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d036      	beq.n	80035ee <HAL_DMA_IRQHandler+0xd2>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a57      	ldr	r2, [pc, #348]	@ (80036e4 <HAL_DMA_IRQHandler+0x1c8>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d031      	beq.n	80035ee <HAL_DMA_IRQHandler+0xd2>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a56      	ldr	r2, [pc, #344]	@ (80036e8 <HAL_DMA_IRQHandler+0x1cc>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d02c      	beq.n	80035ee <HAL_DMA_IRQHandler+0xd2>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a54      	ldr	r2, [pc, #336]	@ (80036ec <HAL_DMA_IRQHandler+0x1d0>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d027      	beq.n	80035ee <HAL_DMA_IRQHandler+0xd2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a53      	ldr	r2, [pc, #332]	@ (80036f0 <HAL_DMA_IRQHandler+0x1d4>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d022      	beq.n	80035ee <HAL_DMA_IRQHandler+0xd2>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a51      	ldr	r2, [pc, #324]	@ (80036f4 <HAL_DMA_IRQHandler+0x1d8>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d01d      	beq.n	80035ee <HAL_DMA_IRQHandler+0xd2>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a50      	ldr	r2, [pc, #320]	@ (80036f8 <HAL_DMA_IRQHandler+0x1dc>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d018      	beq.n	80035ee <HAL_DMA_IRQHandler+0xd2>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a4e      	ldr	r2, [pc, #312]	@ (80036fc <HAL_DMA_IRQHandler+0x1e0>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d013      	beq.n	80035ee <HAL_DMA_IRQHandler+0xd2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a4d      	ldr	r2, [pc, #308]	@ (8003700 <HAL_DMA_IRQHandler+0x1e4>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d00e      	beq.n	80035ee <HAL_DMA_IRQHandler+0xd2>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003704 <HAL_DMA_IRQHandler+0x1e8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d009      	beq.n	80035ee <HAL_DMA_IRQHandler+0xd2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a4a      	ldr	r2, [pc, #296]	@ (8003708 <HAL_DMA_IRQHandler+0x1ec>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d004      	beq.n	80035ee <HAL_DMA_IRQHandler+0xd2>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a48      	ldr	r2, [pc, #288]	@ (800370c <HAL_DMA_IRQHandler+0x1f0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d101      	bne.n	80035f2 <HAL_DMA_IRQHandler+0xd6>
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <HAL_DMA_IRQHandler+0xd8>
 80035f2:	2300      	movs	r3, #0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 842b 	beq.w	8003e50 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035fe:	f003 031f 	and.w	r3, r3, #31
 8003602:	2208      	movs	r2, #8
 8003604:	409a      	lsls	r2, r3
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	4013      	ands	r3, r2
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 80a2 	beq.w	8003754 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a2e      	ldr	r2, [pc, #184]	@ (80036d0 <HAL_DMA_IRQHandler+0x1b4>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d04a      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x194>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a2d      	ldr	r2, [pc, #180]	@ (80036d4 <HAL_DMA_IRQHandler+0x1b8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d045      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x194>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a2b      	ldr	r2, [pc, #172]	@ (80036d8 <HAL_DMA_IRQHandler+0x1bc>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d040      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x194>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a2a      	ldr	r2, [pc, #168]	@ (80036dc <HAL_DMA_IRQHandler+0x1c0>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d03b      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x194>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a28      	ldr	r2, [pc, #160]	@ (80036e0 <HAL_DMA_IRQHandler+0x1c4>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d036      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x194>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a27      	ldr	r2, [pc, #156]	@ (80036e4 <HAL_DMA_IRQHandler+0x1c8>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d031      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x194>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a25      	ldr	r2, [pc, #148]	@ (80036e8 <HAL_DMA_IRQHandler+0x1cc>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d02c      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x194>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a24      	ldr	r2, [pc, #144]	@ (80036ec <HAL_DMA_IRQHandler+0x1d0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d027      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x194>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a22      	ldr	r2, [pc, #136]	@ (80036f0 <HAL_DMA_IRQHandler+0x1d4>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d022      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x194>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a21      	ldr	r2, [pc, #132]	@ (80036f4 <HAL_DMA_IRQHandler+0x1d8>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d01d      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x194>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a1f      	ldr	r2, [pc, #124]	@ (80036f8 <HAL_DMA_IRQHandler+0x1dc>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d018      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x194>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a1e      	ldr	r2, [pc, #120]	@ (80036fc <HAL_DMA_IRQHandler+0x1e0>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d013      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x194>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1c      	ldr	r2, [pc, #112]	@ (8003700 <HAL_DMA_IRQHandler+0x1e4>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d00e      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x194>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a1b      	ldr	r2, [pc, #108]	@ (8003704 <HAL_DMA_IRQHandler+0x1e8>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d009      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x194>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a19      	ldr	r2, [pc, #100]	@ (8003708 <HAL_DMA_IRQHandler+0x1ec>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d004      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x194>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a18      	ldr	r2, [pc, #96]	@ (800370c <HAL_DMA_IRQHandler+0x1f0>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d12f      	bne.n	8003710 <HAL_DMA_IRQHandler+0x1f4>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	bf14      	ite	ne
 80036be:	2301      	movne	r3, #1
 80036c0:	2300      	moveq	r3, #0
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	e02e      	b.n	8003724 <HAL_DMA_IRQHandler+0x208>
 80036c6:	bf00      	nop
 80036c8:	24000000 	.word	0x24000000
 80036cc:	1b4e81b5 	.word	0x1b4e81b5
 80036d0:	40020010 	.word	0x40020010
 80036d4:	40020028 	.word	0x40020028
 80036d8:	40020040 	.word	0x40020040
 80036dc:	40020058 	.word	0x40020058
 80036e0:	40020070 	.word	0x40020070
 80036e4:	40020088 	.word	0x40020088
 80036e8:	400200a0 	.word	0x400200a0
 80036ec:	400200b8 	.word	0x400200b8
 80036f0:	40020410 	.word	0x40020410
 80036f4:	40020428 	.word	0x40020428
 80036f8:	40020440 	.word	0x40020440
 80036fc:	40020458 	.word	0x40020458
 8003700:	40020470 	.word	0x40020470
 8003704:	40020488 	.word	0x40020488
 8003708:	400204a0 	.word	0x400204a0
 800370c:	400204b8 	.word	0x400204b8
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	bf14      	ite	ne
 800371e:	2301      	movne	r3, #1
 8003720:	2300      	moveq	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d015      	beq.n	8003754 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0204 	bic.w	r2, r2, #4
 8003736:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800373c:	f003 031f 	and.w	r3, r3, #31
 8003740:	2208      	movs	r2, #8
 8003742:	409a      	lsls	r2, r3
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800374c:	f043 0201 	orr.w	r2, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003758:	f003 031f 	and.w	r3, r3, #31
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	fa22 f303 	lsr.w	r3, r2, r3
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d06e      	beq.n	8003848 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a69      	ldr	r2, [pc, #420]	@ (8003914 <HAL_DMA_IRQHandler+0x3f8>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d04a      	beq.n	800380a <HAL_DMA_IRQHandler+0x2ee>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a67      	ldr	r2, [pc, #412]	@ (8003918 <HAL_DMA_IRQHandler+0x3fc>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d045      	beq.n	800380a <HAL_DMA_IRQHandler+0x2ee>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a66      	ldr	r2, [pc, #408]	@ (800391c <HAL_DMA_IRQHandler+0x400>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d040      	beq.n	800380a <HAL_DMA_IRQHandler+0x2ee>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a64      	ldr	r2, [pc, #400]	@ (8003920 <HAL_DMA_IRQHandler+0x404>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d03b      	beq.n	800380a <HAL_DMA_IRQHandler+0x2ee>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a63      	ldr	r2, [pc, #396]	@ (8003924 <HAL_DMA_IRQHandler+0x408>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d036      	beq.n	800380a <HAL_DMA_IRQHandler+0x2ee>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a61      	ldr	r2, [pc, #388]	@ (8003928 <HAL_DMA_IRQHandler+0x40c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d031      	beq.n	800380a <HAL_DMA_IRQHandler+0x2ee>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a60      	ldr	r2, [pc, #384]	@ (800392c <HAL_DMA_IRQHandler+0x410>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d02c      	beq.n	800380a <HAL_DMA_IRQHandler+0x2ee>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a5e      	ldr	r2, [pc, #376]	@ (8003930 <HAL_DMA_IRQHandler+0x414>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d027      	beq.n	800380a <HAL_DMA_IRQHandler+0x2ee>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a5d      	ldr	r2, [pc, #372]	@ (8003934 <HAL_DMA_IRQHandler+0x418>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d022      	beq.n	800380a <HAL_DMA_IRQHandler+0x2ee>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a5b      	ldr	r2, [pc, #364]	@ (8003938 <HAL_DMA_IRQHandler+0x41c>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d01d      	beq.n	800380a <HAL_DMA_IRQHandler+0x2ee>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a5a      	ldr	r2, [pc, #360]	@ (800393c <HAL_DMA_IRQHandler+0x420>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d018      	beq.n	800380a <HAL_DMA_IRQHandler+0x2ee>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a58      	ldr	r2, [pc, #352]	@ (8003940 <HAL_DMA_IRQHandler+0x424>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d013      	beq.n	800380a <HAL_DMA_IRQHandler+0x2ee>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a57      	ldr	r2, [pc, #348]	@ (8003944 <HAL_DMA_IRQHandler+0x428>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00e      	beq.n	800380a <HAL_DMA_IRQHandler+0x2ee>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a55      	ldr	r2, [pc, #340]	@ (8003948 <HAL_DMA_IRQHandler+0x42c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d009      	beq.n	800380a <HAL_DMA_IRQHandler+0x2ee>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a54      	ldr	r2, [pc, #336]	@ (800394c <HAL_DMA_IRQHandler+0x430>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d004      	beq.n	800380a <HAL_DMA_IRQHandler+0x2ee>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a52      	ldr	r2, [pc, #328]	@ (8003950 <HAL_DMA_IRQHandler+0x434>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d10a      	bne.n	8003820 <HAL_DMA_IRQHandler+0x304>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003814:	2b00      	cmp	r3, #0
 8003816:	bf14      	ite	ne
 8003818:	2301      	movne	r3, #1
 800381a:	2300      	moveq	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	e003      	b.n	8003828 <HAL_DMA_IRQHandler+0x30c>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2300      	movs	r3, #0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00d      	beq.n	8003848 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003830:	f003 031f 	and.w	r3, r3, #31
 8003834:	2201      	movs	r2, #1
 8003836:	409a      	lsls	r2, r3
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003840:	f043 0202 	orr.w	r2, r3, #2
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800384c:	f003 031f 	and.w	r3, r3, #31
 8003850:	2204      	movs	r2, #4
 8003852:	409a      	lsls	r2, r3
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	4013      	ands	r3, r2
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 808f 	beq.w	800397c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a2c      	ldr	r2, [pc, #176]	@ (8003914 <HAL_DMA_IRQHandler+0x3f8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d04a      	beq.n	80038fe <HAL_DMA_IRQHandler+0x3e2>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a2a      	ldr	r2, [pc, #168]	@ (8003918 <HAL_DMA_IRQHandler+0x3fc>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d045      	beq.n	80038fe <HAL_DMA_IRQHandler+0x3e2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a29      	ldr	r2, [pc, #164]	@ (800391c <HAL_DMA_IRQHandler+0x400>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d040      	beq.n	80038fe <HAL_DMA_IRQHandler+0x3e2>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a27      	ldr	r2, [pc, #156]	@ (8003920 <HAL_DMA_IRQHandler+0x404>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d03b      	beq.n	80038fe <HAL_DMA_IRQHandler+0x3e2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a26      	ldr	r2, [pc, #152]	@ (8003924 <HAL_DMA_IRQHandler+0x408>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d036      	beq.n	80038fe <HAL_DMA_IRQHandler+0x3e2>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a24      	ldr	r2, [pc, #144]	@ (8003928 <HAL_DMA_IRQHandler+0x40c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d031      	beq.n	80038fe <HAL_DMA_IRQHandler+0x3e2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a23      	ldr	r2, [pc, #140]	@ (800392c <HAL_DMA_IRQHandler+0x410>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d02c      	beq.n	80038fe <HAL_DMA_IRQHandler+0x3e2>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a21      	ldr	r2, [pc, #132]	@ (8003930 <HAL_DMA_IRQHandler+0x414>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d027      	beq.n	80038fe <HAL_DMA_IRQHandler+0x3e2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a20      	ldr	r2, [pc, #128]	@ (8003934 <HAL_DMA_IRQHandler+0x418>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d022      	beq.n	80038fe <HAL_DMA_IRQHandler+0x3e2>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003938 <HAL_DMA_IRQHandler+0x41c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d01d      	beq.n	80038fe <HAL_DMA_IRQHandler+0x3e2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a1d      	ldr	r2, [pc, #116]	@ (800393c <HAL_DMA_IRQHandler+0x420>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d018      	beq.n	80038fe <HAL_DMA_IRQHandler+0x3e2>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003940 <HAL_DMA_IRQHandler+0x424>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d013      	beq.n	80038fe <HAL_DMA_IRQHandler+0x3e2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a1a      	ldr	r2, [pc, #104]	@ (8003944 <HAL_DMA_IRQHandler+0x428>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d00e      	beq.n	80038fe <HAL_DMA_IRQHandler+0x3e2>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a18      	ldr	r2, [pc, #96]	@ (8003948 <HAL_DMA_IRQHandler+0x42c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d009      	beq.n	80038fe <HAL_DMA_IRQHandler+0x3e2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a17      	ldr	r2, [pc, #92]	@ (800394c <HAL_DMA_IRQHandler+0x430>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d004      	beq.n	80038fe <HAL_DMA_IRQHandler+0x3e2>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a15      	ldr	r2, [pc, #84]	@ (8003950 <HAL_DMA_IRQHandler+0x434>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d12a      	bne.n	8003954 <HAL_DMA_IRQHandler+0x438>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	bf14      	ite	ne
 800390c:	2301      	movne	r3, #1
 800390e:	2300      	moveq	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	e023      	b.n	800395c <HAL_DMA_IRQHandler+0x440>
 8003914:	40020010 	.word	0x40020010
 8003918:	40020028 	.word	0x40020028
 800391c:	40020040 	.word	0x40020040
 8003920:	40020058 	.word	0x40020058
 8003924:	40020070 	.word	0x40020070
 8003928:	40020088 	.word	0x40020088
 800392c:	400200a0 	.word	0x400200a0
 8003930:	400200b8 	.word	0x400200b8
 8003934:	40020410 	.word	0x40020410
 8003938:	40020428 	.word	0x40020428
 800393c:	40020440 	.word	0x40020440
 8003940:	40020458 	.word	0x40020458
 8003944:	40020470 	.word	0x40020470
 8003948:	40020488 	.word	0x40020488
 800394c:	400204a0 	.word	0x400204a0
 8003950:	400204b8 	.word	0x400204b8
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2300      	movs	r3, #0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00d      	beq.n	800397c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003964:	f003 031f 	and.w	r3, r3, #31
 8003968:	2204      	movs	r2, #4
 800396a:	409a      	lsls	r2, r3
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003974:	f043 0204 	orr.w	r2, r3, #4
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003980:	f003 031f 	and.w	r3, r3, #31
 8003984:	2210      	movs	r2, #16
 8003986:	409a      	lsls	r2, r3
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	4013      	ands	r3, r2
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 80a6 	beq.w	8003ade <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a85      	ldr	r2, [pc, #532]	@ (8003bac <HAL_DMA_IRQHandler+0x690>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d04a      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x516>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a83      	ldr	r2, [pc, #524]	@ (8003bb0 <HAL_DMA_IRQHandler+0x694>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d045      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x516>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a82      	ldr	r2, [pc, #520]	@ (8003bb4 <HAL_DMA_IRQHandler+0x698>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d040      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x516>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a80      	ldr	r2, [pc, #512]	@ (8003bb8 <HAL_DMA_IRQHandler+0x69c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d03b      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x516>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a7f      	ldr	r2, [pc, #508]	@ (8003bbc <HAL_DMA_IRQHandler+0x6a0>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d036      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x516>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a7d      	ldr	r2, [pc, #500]	@ (8003bc0 <HAL_DMA_IRQHandler+0x6a4>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d031      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x516>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a7c      	ldr	r2, [pc, #496]	@ (8003bc4 <HAL_DMA_IRQHandler+0x6a8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d02c      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x516>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a7a      	ldr	r2, [pc, #488]	@ (8003bc8 <HAL_DMA_IRQHandler+0x6ac>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d027      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x516>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a79      	ldr	r2, [pc, #484]	@ (8003bcc <HAL_DMA_IRQHandler+0x6b0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d022      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x516>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a77      	ldr	r2, [pc, #476]	@ (8003bd0 <HAL_DMA_IRQHandler+0x6b4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d01d      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x516>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a76      	ldr	r2, [pc, #472]	@ (8003bd4 <HAL_DMA_IRQHandler+0x6b8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d018      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x516>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a74      	ldr	r2, [pc, #464]	@ (8003bd8 <HAL_DMA_IRQHandler+0x6bc>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d013      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x516>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a73      	ldr	r2, [pc, #460]	@ (8003bdc <HAL_DMA_IRQHandler+0x6c0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d00e      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x516>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a71      	ldr	r2, [pc, #452]	@ (8003be0 <HAL_DMA_IRQHandler+0x6c4>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d009      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x516>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a70      	ldr	r2, [pc, #448]	@ (8003be4 <HAL_DMA_IRQHandler+0x6c8>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d004      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x516>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a6e      	ldr	r2, [pc, #440]	@ (8003be8 <HAL_DMA_IRQHandler+0x6cc>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d10a      	bne.n	8003a48 <HAL_DMA_IRQHandler+0x52c>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0308 	and.w	r3, r3, #8
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	bf14      	ite	ne
 8003a40:	2301      	movne	r3, #1
 8003a42:	2300      	moveq	r3, #0
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	e009      	b.n	8003a5c <HAL_DMA_IRQHandler+0x540>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	bf14      	ite	ne
 8003a56:	2301      	movne	r3, #1
 8003a58:	2300      	moveq	r3, #0
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d03e      	beq.n	8003ade <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a64:	f003 031f 	and.w	r3, r3, #31
 8003a68:	2210      	movs	r2, #16
 8003a6a:	409a      	lsls	r2, r3
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d018      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d108      	bne.n	8003a9e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d024      	beq.n	8003ade <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	4798      	blx	r3
 8003a9c:	e01f      	b.n	8003ade <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d01b      	beq.n	8003ade <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	4798      	blx	r3
 8003aae:	e016      	b.n	8003ade <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d107      	bne.n	8003ace <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0208 	bic.w	r2, r2, #8
 8003acc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae2:	f003 031f 	and.w	r3, r3, #31
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	409a      	lsls	r2, r3
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	4013      	ands	r3, r2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 8110 	beq.w	8003d14 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a2c      	ldr	r2, [pc, #176]	@ (8003bac <HAL_DMA_IRQHandler+0x690>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d04a      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x678>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a2b      	ldr	r2, [pc, #172]	@ (8003bb0 <HAL_DMA_IRQHandler+0x694>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d045      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x678>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a29      	ldr	r2, [pc, #164]	@ (8003bb4 <HAL_DMA_IRQHandler+0x698>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d040      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x678>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a28      	ldr	r2, [pc, #160]	@ (8003bb8 <HAL_DMA_IRQHandler+0x69c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d03b      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x678>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a26      	ldr	r2, [pc, #152]	@ (8003bbc <HAL_DMA_IRQHandler+0x6a0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d036      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x678>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a25      	ldr	r2, [pc, #148]	@ (8003bc0 <HAL_DMA_IRQHandler+0x6a4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d031      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x678>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a23      	ldr	r2, [pc, #140]	@ (8003bc4 <HAL_DMA_IRQHandler+0x6a8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d02c      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x678>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a22      	ldr	r2, [pc, #136]	@ (8003bc8 <HAL_DMA_IRQHandler+0x6ac>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d027      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x678>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a20      	ldr	r2, [pc, #128]	@ (8003bcc <HAL_DMA_IRQHandler+0x6b0>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d022      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x678>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a1f      	ldr	r2, [pc, #124]	@ (8003bd0 <HAL_DMA_IRQHandler+0x6b4>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d01d      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x678>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8003bd4 <HAL_DMA_IRQHandler+0x6b8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d018      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x678>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a1c      	ldr	r2, [pc, #112]	@ (8003bd8 <HAL_DMA_IRQHandler+0x6bc>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d013      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x678>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a1a      	ldr	r2, [pc, #104]	@ (8003bdc <HAL_DMA_IRQHandler+0x6c0>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d00e      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x678>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a19      	ldr	r2, [pc, #100]	@ (8003be0 <HAL_DMA_IRQHandler+0x6c4>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d009      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x678>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a17      	ldr	r2, [pc, #92]	@ (8003be4 <HAL_DMA_IRQHandler+0x6c8>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d004      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x678>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a16      	ldr	r2, [pc, #88]	@ (8003be8 <HAL_DMA_IRQHandler+0x6cc>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d12b      	bne.n	8003bec <HAL_DMA_IRQHandler+0x6d0>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0310 	and.w	r3, r3, #16
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	bf14      	ite	ne
 8003ba2:	2301      	movne	r3, #1
 8003ba4:	2300      	moveq	r3, #0
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	e02a      	b.n	8003c00 <HAL_DMA_IRQHandler+0x6e4>
 8003baa:	bf00      	nop
 8003bac:	40020010 	.word	0x40020010
 8003bb0:	40020028 	.word	0x40020028
 8003bb4:	40020040 	.word	0x40020040
 8003bb8:	40020058 	.word	0x40020058
 8003bbc:	40020070 	.word	0x40020070
 8003bc0:	40020088 	.word	0x40020088
 8003bc4:	400200a0 	.word	0x400200a0
 8003bc8:	400200b8 	.word	0x400200b8
 8003bcc:	40020410 	.word	0x40020410
 8003bd0:	40020428 	.word	0x40020428
 8003bd4:	40020440 	.word	0x40020440
 8003bd8:	40020458 	.word	0x40020458
 8003bdc:	40020470 	.word	0x40020470
 8003be0:	40020488 	.word	0x40020488
 8003be4:	400204a0 	.word	0x400204a0
 8003be8:	400204b8 	.word	0x400204b8
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	bf14      	ite	ne
 8003bfa:	2301      	movne	r3, #1
 8003bfc:	2300      	moveq	r3, #0
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 8087 	beq.w	8003d14 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c0a:	f003 031f 	and.w	r3, r3, #31
 8003c0e:	2220      	movs	r2, #32
 8003c10:	409a      	lsls	r2, r3
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d139      	bne.n	8003c96 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0216 	bic.w	r2, r2, #22
 8003c30:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695a      	ldr	r2, [r3, #20]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c40:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d103      	bne.n	8003c52 <HAL_DMA_IRQHandler+0x736>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d007      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0208 	bic.w	r2, r2, #8
 8003c60:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c66:	f003 031f 	and.w	r3, r3, #31
 8003c6a:	223f      	movs	r2, #63	@ 0x3f
 8003c6c:	409a      	lsls	r2, r3
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 834a 	beq.w	8004320 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	4798      	blx	r3
          }
          return;
 8003c94:	e344      	b.n	8004320 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d018      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d108      	bne.n	8003cc4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d02c      	beq.n	8003d14 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	4798      	blx	r3
 8003cc2:	e027      	b.n	8003d14 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d023      	beq.n	8003d14 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	4798      	blx	r3
 8003cd4:	e01e      	b.n	8003d14 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10f      	bne.n	8003d04 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0210 	bic.w	r2, r2, #16
 8003cf2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 8306 	beq.w	800432a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 8088 	beq.w	8003e3c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2204      	movs	r2, #4
 8003d30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a7a      	ldr	r2, [pc, #488]	@ (8003f24 <HAL_DMA_IRQHandler+0xa08>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d04a      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x8b8>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a79      	ldr	r2, [pc, #484]	@ (8003f28 <HAL_DMA_IRQHandler+0xa0c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d045      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x8b8>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a77      	ldr	r2, [pc, #476]	@ (8003f2c <HAL_DMA_IRQHandler+0xa10>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d040      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x8b8>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a76      	ldr	r2, [pc, #472]	@ (8003f30 <HAL_DMA_IRQHandler+0xa14>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d03b      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x8b8>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a74      	ldr	r2, [pc, #464]	@ (8003f34 <HAL_DMA_IRQHandler+0xa18>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d036      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x8b8>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a73      	ldr	r2, [pc, #460]	@ (8003f38 <HAL_DMA_IRQHandler+0xa1c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d031      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x8b8>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a71      	ldr	r2, [pc, #452]	@ (8003f3c <HAL_DMA_IRQHandler+0xa20>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d02c      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x8b8>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a70      	ldr	r2, [pc, #448]	@ (8003f40 <HAL_DMA_IRQHandler+0xa24>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d027      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x8b8>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a6e      	ldr	r2, [pc, #440]	@ (8003f44 <HAL_DMA_IRQHandler+0xa28>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d022      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x8b8>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a6d      	ldr	r2, [pc, #436]	@ (8003f48 <HAL_DMA_IRQHandler+0xa2c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d01d      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x8b8>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a6b      	ldr	r2, [pc, #428]	@ (8003f4c <HAL_DMA_IRQHandler+0xa30>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d018      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x8b8>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a6a      	ldr	r2, [pc, #424]	@ (8003f50 <HAL_DMA_IRQHandler+0xa34>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d013      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x8b8>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a68      	ldr	r2, [pc, #416]	@ (8003f54 <HAL_DMA_IRQHandler+0xa38>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d00e      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x8b8>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a67      	ldr	r2, [pc, #412]	@ (8003f58 <HAL_DMA_IRQHandler+0xa3c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d009      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x8b8>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a65      	ldr	r2, [pc, #404]	@ (8003f5c <HAL_DMA_IRQHandler+0xa40>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d004      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x8b8>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a64      	ldr	r2, [pc, #400]	@ (8003f60 <HAL_DMA_IRQHandler+0xa44>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d108      	bne.n	8003de6 <HAL_DMA_IRQHandler+0x8ca>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0201 	bic.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	e007      	b.n	8003df6 <HAL_DMA_IRQHandler+0x8da>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0201 	bic.w	r2, r2, #1
 8003df4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d307      	bcc.n	8003e12 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1f2      	bne.n	8003df6 <HAL_DMA_IRQHandler+0x8da>
 8003e10:	e000      	b.n	8003e14 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003e12:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d004      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2203      	movs	r2, #3
 8003e26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003e2a:	e003      	b.n	8003e34 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 8272 	beq.w	800432a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	4798      	blx	r3
 8003e4e:	e26c      	b.n	800432a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a43      	ldr	r2, [pc, #268]	@ (8003f64 <HAL_DMA_IRQHandler+0xa48>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d022      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x984>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a42      	ldr	r2, [pc, #264]	@ (8003f68 <HAL_DMA_IRQHandler+0xa4c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d01d      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x984>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a40      	ldr	r2, [pc, #256]	@ (8003f6c <HAL_DMA_IRQHandler+0xa50>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d018      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x984>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a3f      	ldr	r2, [pc, #252]	@ (8003f70 <HAL_DMA_IRQHandler+0xa54>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d013      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x984>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a3d      	ldr	r2, [pc, #244]	@ (8003f74 <HAL_DMA_IRQHandler+0xa58>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d00e      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x984>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a3c      	ldr	r2, [pc, #240]	@ (8003f78 <HAL_DMA_IRQHandler+0xa5c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d009      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x984>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a3a      	ldr	r2, [pc, #232]	@ (8003f7c <HAL_DMA_IRQHandler+0xa60>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d004      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x984>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a39      	ldr	r2, [pc, #228]	@ (8003f80 <HAL_DMA_IRQHandler+0xa64>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d101      	bne.n	8003ea4 <HAL_DMA_IRQHandler+0x988>
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e000      	b.n	8003ea6 <HAL_DMA_IRQHandler+0x98a>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 823f 	beq.w	800432a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb8:	f003 031f 	and.w	r3, r3, #31
 8003ebc:	2204      	movs	r2, #4
 8003ebe:	409a      	lsls	r2, r3
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 80cd 	beq.w	8004064 <HAL_DMA_IRQHandler+0xb48>
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 80c7 	beq.w	8004064 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eda:	f003 031f 	and.w	r3, r3, #31
 8003ede:	2204      	movs	r2, #4
 8003ee0:	409a      	lsls	r2, r3
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d049      	beq.n	8003f84 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d109      	bne.n	8003f0e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 8210 	beq.w	8004324 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f0c:	e20a      	b.n	8004324 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 8206 	beq.w	8004324 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f20:	e200      	b.n	8004324 <HAL_DMA_IRQHandler+0xe08>
 8003f22:	bf00      	nop
 8003f24:	40020010 	.word	0x40020010
 8003f28:	40020028 	.word	0x40020028
 8003f2c:	40020040 	.word	0x40020040
 8003f30:	40020058 	.word	0x40020058
 8003f34:	40020070 	.word	0x40020070
 8003f38:	40020088 	.word	0x40020088
 8003f3c:	400200a0 	.word	0x400200a0
 8003f40:	400200b8 	.word	0x400200b8
 8003f44:	40020410 	.word	0x40020410
 8003f48:	40020428 	.word	0x40020428
 8003f4c:	40020440 	.word	0x40020440
 8003f50:	40020458 	.word	0x40020458
 8003f54:	40020470 	.word	0x40020470
 8003f58:	40020488 	.word	0x40020488
 8003f5c:	400204a0 	.word	0x400204a0
 8003f60:	400204b8 	.word	0x400204b8
 8003f64:	58025408 	.word	0x58025408
 8003f68:	5802541c 	.word	0x5802541c
 8003f6c:	58025430 	.word	0x58025430
 8003f70:	58025444 	.word	0x58025444
 8003f74:	58025458 	.word	0x58025458
 8003f78:	5802546c 	.word	0x5802546c
 8003f7c:	58025480 	.word	0x58025480
 8003f80:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f003 0320 	and.w	r3, r3, #32
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d160      	bne.n	8004050 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a7f      	ldr	r2, [pc, #508]	@ (8004190 <HAL_DMA_IRQHandler+0xc74>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d04a      	beq.n	800402e <HAL_DMA_IRQHandler+0xb12>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a7d      	ldr	r2, [pc, #500]	@ (8004194 <HAL_DMA_IRQHandler+0xc78>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d045      	beq.n	800402e <HAL_DMA_IRQHandler+0xb12>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a7c      	ldr	r2, [pc, #496]	@ (8004198 <HAL_DMA_IRQHandler+0xc7c>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d040      	beq.n	800402e <HAL_DMA_IRQHandler+0xb12>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a7a      	ldr	r2, [pc, #488]	@ (800419c <HAL_DMA_IRQHandler+0xc80>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d03b      	beq.n	800402e <HAL_DMA_IRQHandler+0xb12>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a79      	ldr	r2, [pc, #484]	@ (80041a0 <HAL_DMA_IRQHandler+0xc84>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d036      	beq.n	800402e <HAL_DMA_IRQHandler+0xb12>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a77      	ldr	r2, [pc, #476]	@ (80041a4 <HAL_DMA_IRQHandler+0xc88>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d031      	beq.n	800402e <HAL_DMA_IRQHandler+0xb12>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a76      	ldr	r2, [pc, #472]	@ (80041a8 <HAL_DMA_IRQHandler+0xc8c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d02c      	beq.n	800402e <HAL_DMA_IRQHandler+0xb12>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a74      	ldr	r2, [pc, #464]	@ (80041ac <HAL_DMA_IRQHandler+0xc90>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d027      	beq.n	800402e <HAL_DMA_IRQHandler+0xb12>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a73      	ldr	r2, [pc, #460]	@ (80041b0 <HAL_DMA_IRQHandler+0xc94>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d022      	beq.n	800402e <HAL_DMA_IRQHandler+0xb12>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a71      	ldr	r2, [pc, #452]	@ (80041b4 <HAL_DMA_IRQHandler+0xc98>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d01d      	beq.n	800402e <HAL_DMA_IRQHandler+0xb12>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a70      	ldr	r2, [pc, #448]	@ (80041b8 <HAL_DMA_IRQHandler+0xc9c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d018      	beq.n	800402e <HAL_DMA_IRQHandler+0xb12>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a6e      	ldr	r2, [pc, #440]	@ (80041bc <HAL_DMA_IRQHandler+0xca0>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d013      	beq.n	800402e <HAL_DMA_IRQHandler+0xb12>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a6d      	ldr	r2, [pc, #436]	@ (80041c0 <HAL_DMA_IRQHandler+0xca4>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d00e      	beq.n	800402e <HAL_DMA_IRQHandler+0xb12>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a6b      	ldr	r2, [pc, #428]	@ (80041c4 <HAL_DMA_IRQHandler+0xca8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d009      	beq.n	800402e <HAL_DMA_IRQHandler+0xb12>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a6a      	ldr	r2, [pc, #424]	@ (80041c8 <HAL_DMA_IRQHandler+0xcac>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d004      	beq.n	800402e <HAL_DMA_IRQHandler+0xb12>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a68      	ldr	r2, [pc, #416]	@ (80041cc <HAL_DMA_IRQHandler+0xcb0>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d108      	bne.n	8004040 <HAL_DMA_IRQHandler+0xb24>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0208 	bic.w	r2, r2, #8
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	e007      	b.n	8004050 <HAL_DMA_IRQHandler+0xb34>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0204 	bic.w	r2, r2, #4
 800404e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 8165 	beq.w	8004324 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004062:	e15f      	b.n	8004324 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004068:	f003 031f 	and.w	r3, r3, #31
 800406c:	2202      	movs	r2, #2
 800406e:	409a      	lsls	r2, r3
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	4013      	ands	r3, r2
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 80c5 	beq.w	8004204 <HAL_DMA_IRQHandler+0xce8>
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 80bf 	beq.w	8004204 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800408a:	f003 031f 	and.w	r3, r3, #31
 800408e:	2202      	movs	r2, #2
 8004090:	409a      	lsls	r2, r3
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d018      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d109      	bne.n	80040be <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 813a 	beq.w	8004328 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040bc:	e134      	b.n	8004328 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 8130 	beq.w	8004328 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040d0:	e12a      	b.n	8004328 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f003 0320 	and.w	r3, r3, #32
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f040 8089 	bne.w	80041f0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a2b      	ldr	r2, [pc, #172]	@ (8004190 <HAL_DMA_IRQHandler+0xc74>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d04a      	beq.n	800417e <HAL_DMA_IRQHandler+0xc62>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a29      	ldr	r2, [pc, #164]	@ (8004194 <HAL_DMA_IRQHandler+0xc78>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d045      	beq.n	800417e <HAL_DMA_IRQHandler+0xc62>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a28      	ldr	r2, [pc, #160]	@ (8004198 <HAL_DMA_IRQHandler+0xc7c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d040      	beq.n	800417e <HAL_DMA_IRQHandler+0xc62>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a26      	ldr	r2, [pc, #152]	@ (800419c <HAL_DMA_IRQHandler+0xc80>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d03b      	beq.n	800417e <HAL_DMA_IRQHandler+0xc62>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a25      	ldr	r2, [pc, #148]	@ (80041a0 <HAL_DMA_IRQHandler+0xc84>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d036      	beq.n	800417e <HAL_DMA_IRQHandler+0xc62>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a23      	ldr	r2, [pc, #140]	@ (80041a4 <HAL_DMA_IRQHandler+0xc88>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d031      	beq.n	800417e <HAL_DMA_IRQHandler+0xc62>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a22      	ldr	r2, [pc, #136]	@ (80041a8 <HAL_DMA_IRQHandler+0xc8c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d02c      	beq.n	800417e <HAL_DMA_IRQHandler+0xc62>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a20      	ldr	r2, [pc, #128]	@ (80041ac <HAL_DMA_IRQHandler+0xc90>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d027      	beq.n	800417e <HAL_DMA_IRQHandler+0xc62>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a1f      	ldr	r2, [pc, #124]	@ (80041b0 <HAL_DMA_IRQHandler+0xc94>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d022      	beq.n	800417e <HAL_DMA_IRQHandler+0xc62>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a1d      	ldr	r2, [pc, #116]	@ (80041b4 <HAL_DMA_IRQHandler+0xc98>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d01d      	beq.n	800417e <HAL_DMA_IRQHandler+0xc62>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a1c      	ldr	r2, [pc, #112]	@ (80041b8 <HAL_DMA_IRQHandler+0xc9c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d018      	beq.n	800417e <HAL_DMA_IRQHandler+0xc62>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a1a      	ldr	r2, [pc, #104]	@ (80041bc <HAL_DMA_IRQHandler+0xca0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d013      	beq.n	800417e <HAL_DMA_IRQHandler+0xc62>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a19      	ldr	r2, [pc, #100]	@ (80041c0 <HAL_DMA_IRQHandler+0xca4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d00e      	beq.n	800417e <HAL_DMA_IRQHandler+0xc62>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a17      	ldr	r2, [pc, #92]	@ (80041c4 <HAL_DMA_IRQHandler+0xca8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d009      	beq.n	800417e <HAL_DMA_IRQHandler+0xc62>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a16      	ldr	r2, [pc, #88]	@ (80041c8 <HAL_DMA_IRQHandler+0xcac>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d004      	beq.n	800417e <HAL_DMA_IRQHandler+0xc62>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a14      	ldr	r2, [pc, #80]	@ (80041cc <HAL_DMA_IRQHandler+0xcb0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d128      	bne.n	80041d0 <HAL_DMA_IRQHandler+0xcb4>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0214 	bic.w	r2, r2, #20
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	e027      	b.n	80041e0 <HAL_DMA_IRQHandler+0xcc4>
 8004190:	40020010 	.word	0x40020010
 8004194:	40020028 	.word	0x40020028
 8004198:	40020040 	.word	0x40020040
 800419c:	40020058 	.word	0x40020058
 80041a0:	40020070 	.word	0x40020070
 80041a4:	40020088 	.word	0x40020088
 80041a8:	400200a0 	.word	0x400200a0
 80041ac:	400200b8 	.word	0x400200b8
 80041b0:	40020410 	.word	0x40020410
 80041b4:	40020428 	.word	0x40020428
 80041b8:	40020440 	.word	0x40020440
 80041bc:	40020458 	.word	0x40020458
 80041c0:	40020470 	.word	0x40020470
 80041c4:	40020488 	.word	0x40020488
 80041c8:	400204a0 	.word	0x400204a0
 80041cc:	400204b8 	.word	0x400204b8
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 020a 	bic.w	r2, r2, #10
 80041de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 8097 	beq.w	8004328 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004202:	e091      	b.n	8004328 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004208:	f003 031f 	and.w	r3, r3, #31
 800420c:	2208      	movs	r2, #8
 800420e:	409a      	lsls	r2, r3
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	4013      	ands	r3, r2
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 8088 	beq.w	800432a <HAL_DMA_IRQHandler+0xe0e>
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f003 0308 	and.w	r3, r3, #8
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8082 	beq.w	800432a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a41      	ldr	r2, [pc, #260]	@ (8004330 <HAL_DMA_IRQHandler+0xe14>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d04a      	beq.n	80042c6 <HAL_DMA_IRQHandler+0xdaa>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a3f      	ldr	r2, [pc, #252]	@ (8004334 <HAL_DMA_IRQHandler+0xe18>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d045      	beq.n	80042c6 <HAL_DMA_IRQHandler+0xdaa>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a3e      	ldr	r2, [pc, #248]	@ (8004338 <HAL_DMA_IRQHandler+0xe1c>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d040      	beq.n	80042c6 <HAL_DMA_IRQHandler+0xdaa>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a3c      	ldr	r2, [pc, #240]	@ (800433c <HAL_DMA_IRQHandler+0xe20>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d03b      	beq.n	80042c6 <HAL_DMA_IRQHandler+0xdaa>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a3b      	ldr	r2, [pc, #236]	@ (8004340 <HAL_DMA_IRQHandler+0xe24>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d036      	beq.n	80042c6 <HAL_DMA_IRQHandler+0xdaa>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a39      	ldr	r2, [pc, #228]	@ (8004344 <HAL_DMA_IRQHandler+0xe28>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d031      	beq.n	80042c6 <HAL_DMA_IRQHandler+0xdaa>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a38      	ldr	r2, [pc, #224]	@ (8004348 <HAL_DMA_IRQHandler+0xe2c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d02c      	beq.n	80042c6 <HAL_DMA_IRQHandler+0xdaa>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a36      	ldr	r2, [pc, #216]	@ (800434c <HAL_DMA_IRQHandler+0xe30>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d027      	beq.n	80042c6 <HAL_DMA_IRQHandler+0xdaa>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a35      	ldr	r2, [pc, #212]	@ (8004350 <HAL_DMA_IRQHandler+0xe34>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d022      	beq.n	80042c6 <HAL_DMA_IRQHandler+0xdaa>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a33      	ldr	r2, [pc, #204]	@ (8004354 <HAL_DMA_IRQHandler+0xe38>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d01d      	beq.n	80042c6 <HAL_DMA_IRQHandler+0xdaa>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a32      	ldr	r2, [pc, #200]	@ (8004358 <HAL_DMA_IRQHandler+0xe3c>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d018      	beq.n	80042c6 <HAL_DMA_IRQHandler+0xdaa>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a30      	ldr	r2, [pc, #192]	@ (800435c <HAL_DMA_IRQHandler+0xe40>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d013      	beq.n	80042c6 <HAL_DMA_IRQHandler+0xdaa>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a2f      	ldr	r2, [pc, #188]	@ (8004360 <HAL_DMA_IRQHandler+0xe44>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d00e      	beq.n	80042c6 <HAL_DMA_IRQHandler+0xdaa>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a2d      	ldr	r2, [pc, #180]	@ (8004364 <HAL_DMA_IRQHandler+0xe48>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d009      	beq.n	80042c6 <HAL_DMA_IRQHandler+0xdaa>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a2c      	ldr	r2, [pc, #176]	@ (8004368 <HAL_DMA_IRQHandler+0xe4c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d004      	beq.n	80042c6 <HAL_DMA_IRQHandler+0xdaa>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a2a      	ldr	r2, [pc, #168]	@ (800436c <HAL_DMA_IRQHandler+0xe50>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d108      	bne.n	80042d8 <HAL_DMA_IRQHandler+0xdbc>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 021c 	bic.w	r2, r2, #28
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	e007      	b.n	80042e8 <HAL_DMA_IRQHandler+0xdcc>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 020e 	bic.w	r2, r2, #14
 80042e6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ec:	f003 031f 	and.w	r3, r3, #31
 80042f0:	2201      	movs	r2, #1
 80042f2:	409a      	lsls	r2, r3
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004312:	2b00      	cmp	r3, #0
 8004314:	d009      	beq.n	800432a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	4798      	blx	r3
 800431e:	e004      	b.n	800432a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004320:	bf00      	nop
 8004322:	e002      	b.n	800432a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004324:	bf00      	nop
 8004326:	e000      	b.n	800432a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004328:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800432a:	3728      	adds	r7, #40	@ 0x28
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40020010 	.word	0x40020010
 8004334:	40020028 	.word	0x40020028
 8004338:	40020040 	.word	0x40020040
 800433c:	40020058 	.word	0x40020058
 8004340:	40020070 	.word	0x40020070
 8004344:	40020088 	.word	0x40020088
 8004348:	400200a0 	.word	0x400200a0
 800434c:	400200b8 	.word	0x400200b8
 8004350:	40020410 	.word	0x40020410
 8004354:	40020428 	.word	0x40020428
 8004358:	40020440 	.word	0x40020440
 800435c:	40020458 	.word	0x40020458
 8004360:	40020470 	.word	0x40020470
 8004364:	40020488 	.word	0x40020488
 8004368:	400204a0 	.word	0x400204a0
 800436c:	400204b8 	.word	0x400204b8

08004370 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a42      	ldr	r2, [pc, #264]	@ (8004488 <DMA_CalcBaseAndBitshift+0x118>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d04a      	beq.n	8004418 <DMA_CalcBaseAndBitshift+0xa8>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a41      	ldr	r2, [pc, #260]	@ (800448c <DMA_CalcBaseAndBitshift+0x11c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d045      	beq.n	8004418 <DMA_CalcBaseAndBitshift+0xa8>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a3f      	ldr	r2, [pc, #252]	@ (8004490 <DMA_CalcBaseAndBitshift+0x120>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d040      	beq.n	8004418 <DMA_CalcBaseAndBitshift+0xa8>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a3e      	ldr	r2, [pc, #248]	@ (8004494 <DMA_CalcBaseAndBitshift+0x124>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d03b      	beq.n	8004418 <DMA_CalcBaseAndBitshift+0xa8>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a3c      	ldr	r2, [pc, #240]	@ (8004498 <DMA_CalcBaseAndBitshift+0x128>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d036      	beq.n	8004418 <DMA_CalcBaseAndBitshift+0xa8>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a3b      	ldr	r2, [pc, #236]	@ (800449c <DMA_CalcBaseAndBitshift+0x12c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d031      	beq.n	8004418 <DMA_CalcBaseAndBitshift+0xa8>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a39      	ldr	r2, [pc, #228]	@ (80044a0 <DMA_CalcBaseAndBitshift+0x130>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d02c      	beq.n	8004418 <DMA_CalcBaseAndBitshift+0xa8>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a38      	ldr	r2, [pc, #224]	@ (80044a4 <DMA_CalcBaseAndBitshift+0x134>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d027      	beq.n	8004418 <DMA_CalcBaseAndBitshift+0xa8>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a36      	ldr	r2, [pc, #216]	@ (80044a8 <DMA_CalcBaseAndBitshift+0x138>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d022      	beq.n	8004418 <DMA_CalcBaseAndBitshift+0xa8>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a35      	ldr	r2, [pc, #212]	@ (80044ac <DMA_CalcBaseAndBitshift+0x13c>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d01d      	beq.n	8004418 <DMA_CalcBaseAndBitshift+0xa8>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a33      	ldr	r2, [pc, #204]	@ (80044b0 <DMA_CalcBaseAndBitshift+0x140>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d018      	beq.n	8004418 <DMA_CalcBaseAndBitshift+0xa8>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a32      	ldr	r2, [pc, #200]	@ (80044b4 <DMA_CalcBaseAndBitshift+0x144>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d013      	beq.n	8004418 <DMA_CalcBaseAndBitshift+0xa8>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a30      	ldr	r2, [pc, #192]	@ (80044b8 <DMA_CalcBaseAndBitshift+0x148>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d00e      	beq.n	8004418 <DMA_CalcBaseAndBitshift+0xa8>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a2f      	ldr	r2, [pc, #188]	@ (80044bc <DMA_CalcBaseAndBitshift+0x14c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d009      	beq.n	8004418 <DMA_CalcBaseAndBitshift+0xa8>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a2d      	ldr	r2, [pc, #180]	@ (80044c0 <DMA_CalcBaseAndBitshift+0x150>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d004      	beq.n	8004418 <DMA_CalcBaseAndBitshift+0xa8>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a2c      	ldr	r2, [pc, #176]	@ (80044c4 <DMA_CalcBaseAndBitshift+0x154>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d101      	bne.n	800441c <DMA_CalcBaseAndBitshift+0xac>
 8004418:	2301      	movs	r3, #1
 800441a:	e000      	b.n	800441e <DMA_CalcBaseAndBitshift+0xae>
 800441c:	2300      	movs	r3, #0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d024      	beq.n	800446c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	b2db      	uxtb	r3, r3
 8004428:	3b10      	subs	r3, #16
 800442a:	4a27      	ldr	r2, [pc, #156]	@ (80044c8 <DMA_CalcBaseAndBitshift+0x158>)
 800442c:	fba2 2303 	umull	r2, r3, r2, r3
 8004430:	091b      	lsrs	r3, r3, #4
 8004432:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	4a24      	ldr	r2, [pc, #144]	@ (80044cc <DMA_CalcBaseAndBitshift+0x15c>)
 800443c:	5cd3      	ldrb	r3, [r2, r3]
 800443e:	461a      	mov	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2b03      	cmp	r3, #3
 8004448:	d908      	bls.n	800445c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	461a      	mov	r2, r3
 8004450:	4b1f      	ldr	r3, [pc, #124]	@ (80044d0 <DMA_CalcBaseAndBitshift+0x160>)
 8004452:	4013      	ands	r3, r2
 8004454:	1d1a      	adds	r2, r3, #4
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	659a      	str	r2, [r3, #88]	@ 0x58
 800445a:	e00d      	b.n	8004478 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	461a      	mov	r2, r3
 8004462:	4b1b      	ldr	r3, [pc, #108]	@ (80044d0 <DMA_CalcBaseAndBitshift+0x160>)
 8004464:	4013      	ands	r3, r2
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	6593      	str	r3, [r2, #88]	@ 0x58
 800446a:	e005      	b.n	8004478 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800447c:	4618      	mov	r0, r3
 800447e:	3714      	adds	r7, #20
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	40020010 	.word	0x40020010
 800448c:	40020028 	.word	0x40020028
 8004490:	40020040 	.word	0x40020040
 8004494:	40020058 	.word	0x40020058
 8004498:	40020070 	.word	0x40020070
 800449c:	40020088 	.word	0x40020088
 80044a0:	400200a0 	.word	0x400200a0
 80044a4:	400200b8 	.word	0x400200b8
 80044a8:	40020410 	.word	0x40020410
 80044ac:	40020428 	.word	0x40020428
 80044b0:	40020440 	.word	0x40020440
 80044b4:	40020458 	.word	0x40020458
 80044b8:	40020470 	.word	0x40020470
 80044bc:	40020488 	.word	0x40020488
 80044c0:	400204a0 	.word	0x400204a0
 80044c4:	400204b8 	.word	0x400204b8
 80044c8:	aaaaaaab 	.word	0xaaaaaaab
 80044cc:	0800e5f4 	.word	0x0800e5f4
 80044d0:	fffffc00 	.word	0xfffffc00

080044d4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044dc:	2300      	movs	r3, #0
 80044de:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d120      	bne.n	800452a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ec:	2b03      	cmp	r3, #3
 80044ee:	d858      	bhi.n	80045a2 <DMA_CheckFifoParam+0xce>
 80044f0:	a201      	add	r2, pc, #4	@ (adr r2, 80044f8 <DMA_CheckFifoParam+0x24>)
 80044f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f6:	bf00      	nop
 80044f8:	08004509 	.word	0x08004509
 80044fc:	0800451b 	.word	0x0800451b
 8004500:	08004509 	.word	0x08004509
 8004504:	080045a3 	.word	0x080045a3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d048      	beq.n	80045a6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004518:	e045      	b.n	80045a6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004522:	d142      	bne.n	80045aa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004528:	e03f      	b.n	80045aa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004532:	d123      	bne.n	800457c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004538:	2b03      	cmp	r3, #3
 800453a:	d838      	bhi.n	80045ae <DMA_CheckFifoParam+0xda>
 800453c:	a201      	add	r2, pc, #4	@ (adr r2, 8004544 <DMA_CheckFifoParam+0x70>)
 800453e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004542:	bf00      	nop
 8004544:	08004555 	.word	0x08004555
 8004548:	0800455b 	.word	0x0800455b
 800454c:	08004555 	.word	0x08004555
 8004550:	0800456d 	.word	0x0800456d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	73fb      	strb	r3, [r7, #15]
        break;
 8004558:	e030      	b.n	80045bc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d025      	beq.n	80045b2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800456a:	e022      	b.n	80045b2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004570:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004574:	d11f      	bne.n	80045b6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800457a:	e01c      	b.n	80045b6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004580:	2b02      	cmp	r3, #2
 8004582:	d902      	bls.n	800458a <DMA_CheckFifoParam+0xb6>
 8004584:	2b03      	cmp	r3, #3
 8004586:	d003      	beq.n	8004590 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004588:	e018      	b.n	80045bc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	73fb      	strb	r3, [r7, #15]
        break;
 800458e:	e015      	b.n	80045bc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004594:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00e      	beq.n	80045ba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	73fb      	strb	r3, [r7, #15]
    break;
 80045a0:	e00b      	b.n	80045ba <DMA_CheckFifoParam+0xe6>
        break;
 80045a2:	bf00      	nop
 80045a4:	e00a      	b.n	80045bc <DMA_CheckFifoParam+0xe8>
        break;
 80045a6:	bf00      	nop
 80045a8:	e008      	b.n	80045bc <DMA_CheckFifoParam+0xe8>
        break;
 80045aa:	bf00      	nop
 80045ac:	e006      	b.n	80045bc <DMA_CheckFifoParam+0xe8>
        break;
 80045ae:	bf00      	nop
 80045b0:	e004      	b.n	80045bc <DMA_CheckFifoParam+0xe8>
        break;
 80045b2:	bf00      	nop
 80045b4:	e002      	b.n	80045bc <DMA_CheckFifoParam+0xe8>
        break;
 80045b6:	bf00      	nop
 80045b8:	e000      	b.n	80045bc <DMA_CheckFifoParam+0xe8>
    break;
 80045ba:	bf00      	nop
    }
  }

  return status;
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop

080045cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a38      	ldr	r2, [pc, #224]	@ (80046c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d022      	beq.n	800462a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a36      	ldr	r2, [pc, #216]	@ (80046c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d01d      	beq.n	800462a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a35      	ldr	r2, [pc, #212]	@ (80046c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d018      	beq.n	800462a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a33      	ldr	r2, [pc, #204]	@ (80046cc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d013      	beq.n	800462a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a32      	ldr	r2, [pc, #200]	@ (80046d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d00e      	beq.n	800462a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a30      	ldr	r2, [pc, #192]	@ (80046d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d009      	beq.n	800462a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a2f      	ldr	r2, [pc, #188]	@ (80046d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d004      	beq.n	800462a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a2d      	ldr	r2, [pc, #180]	@ (80046dc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d101      	bne.n	800462e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800462a:	2301      	movs	r3, #1
 800462c:	e000      	b.n	8004630 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800462e:	2300      	movs	r3, #0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d01a      	beq.n	800466a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	b2db      	uxtb	r3, r3
 800463a:	3b08      	subs	r3, #8
 800463c:	4a28      	ldr	r2, [pc, #160]	@ (80046e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800463e:	fba2 2303 	umull	r2, r3, r2, r3
 8004642:	091b      	lsrs	r3, r3, #4
 8004644:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	4b26      	ldr	r3, [pc, #152]	@ (80046e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800464a:	4413      	add	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	461a      	mov	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a24      	ldr	r2, [pc, #144]	@ (80046e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004658:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f003 031f 	and.w	r3, r3, #31
 8004660:	2201      	movs	r2, #1
 8004662:	409a      	lsls	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004668:	e024      	b.n	80046b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	b2db      	uxtb	r3, r3
 8004670:	3b10      	subs	r3, #16
 8004672:	4a1e      	ldr	r2, [pc, #120]	@ (80046ec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004674:	fba2 2303 	umull	r2, r3, r2, r3
 8004678:	091b      	lsrs	r3, r3, #4
 800467a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4a1c      	ldr	r2, [pc, #112]	@ (80046f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d806      	bhi.n	8004692 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	4a1b      	ldr	r2, [pc, #108]	@ (80046f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d902      	bls.n	8004692 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	3308      	adds	r3, #8
 8004690:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	4b18      	ldr	r3, [pc, #96]	@ (80046f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004696:	4413      	add	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	461a      	mov	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a16      	ldr	r2, [pc, #88]	@ (80046fc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80046a4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f003 031f 	and.w	r3, r3, #31
 80046ac:	2201      	movs	r2, #1
 80046ae:	409a      	lsls	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80046b4:	bf00      	nop
 80046b6:	3714      	adds	r7, #20
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	58025408 	.word	0x58025408
 80046c4:	5802541c 	.word	0x5802541c
 80046c8:	58025430 	.word	0x58025430
 80046cc:	58025444 	.word	0x58025444
 80046d0:	58025458 	.word	0x58025458
 80046d4:	5802546c 	.word	0x5802546c
 80046d8:	58025480 	.word	0x58025480
 80046dc:	58025494 	.word	0x58025494
 80046e0:	cccccccd 	.word	0xcccccccd
 80046e4:	16009600 	.word	0x16009600
 80046e8:	58025880 	.word	0x58025880
 80046ec:	aaaaaaab 	.word	0xaaaaaaab
 80046f0:	400204b8 	.word	0x400204b8
 80046f4:	4002040f 	.word	0x4002040f
 80046f8:	10008200 	.word	0x10008200
 80046fc:	40020880 	.word	0x40020880

08004700 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	b2db      	uxtb	r3, r3
 800470e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d04a      	beq.n	80047ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2b08      	cmp	r3, #8
 800471a:	d847      	bhi.n	80047ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a25      	ldr	r2, [pc, #148]	@ (80047b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d022      	beq.n	800476c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a24      	ldr	r2, [pc, #144]	@ (80047bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d01d      	beq.n	800476c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a22      	ldr	r2, [pc, #136]	@ (80047c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d018      	beq.n	800476c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a21      	ldr	r2, [pc, #132]	@ (80047c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d013      	beq.n	800476c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a1f      	ldr	r2, [pc, #124]	@ (80047c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d00e      	beq.n	800476c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a1e      	ldr	r2, [pc, #120]	@ (80047cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d009      	beq.n	800476c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a1c      	ldr	r2, [pc, #112]	@ (80047d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d004      	beq.n	800476c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a1b      	ldr	r2, [pc, #108]	@ (80047d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d101      	bne.n	8004770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800476c:	2301      	movs	r3, #1
 800476e:	e000      	b.n	8004772 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004770:	2300      	movs	r3, #0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	4b17      	ldr	r3, [pc, #92]	@ (80047d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800477a:	4413      	add	r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	461a      	mov	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a15      	ldr	r2, [pc, #84]	@ (80047dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004788:	671a      	str	r2, [r3, #112]	@ 0x70
 800478a:	e009      	b.n	80047a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	4b14      	ldr	r3, [pc, #80]	@ (80047e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004790:	4413      	add	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	461a      	mov	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a11      	ldr	r2, [pc, #68]	@ (80047e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800479e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	2201      	movs	r2, #1
 80047a6:	409a      	lsls	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80047ac:	bf00      	nop
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	58025408 	.word	0x58025408
 80047bc:	5802541c 	.word	0x5802541c
 80047c0:	58025430 	.word	0x58025430
 80047c4:	58025444 	.word	0x58025444
 80047c8:	58025458 	.word	0x58025458
 80047cc:	5802546c 	.word	0x5802546c
 80047d0:	58025480 	.word	0x58025480
 80047d4:	58025494 	.word	0x58025494
 80047d8:	1600963f 	.word	0x1600963f
 80047dc:	58025940 	.word	0x58025940
 80047e0:	1000823f 	.word	0x1000823f
 80047e4:	40020940 	.word	0x40020940

080047e8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b098      	sub	sp, #96	@ 0x60
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80047f0:	4a84      	ldr	r2, [pc, #528]	@ (8004a04 <HAL_FDCAN_Init+0x21c>)
 80047f2:	f107 030c 	add.w	r3, r7, #12
 80047f6:	4611      	mov	r1, r2
 80047f8:	224c      	movs	r2, #76	@ 0x4c
 80047fa:	4618      	mov	r0, r3
 80047fc:	f009 fe28 	bl	800e450 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e1c6      	b.n	8004b98 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a7e      	ldr	r2, [pc, #504]	@ (8004a08 <HAL_FDCAN_Init+0x220>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d106      	bne.n	8004822 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800481c:	461a      	mov	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d106      	bne.n	800483c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fc f89c 	bl	8000974 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699a      	ldr	r2, [r3, #24]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0210 	bic.w	r2, r2, #16
 800484a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800484c:	f7fd fbb6 	bl	8001fbc <HAL_GetTick>
 8004850:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004852:	e014      	b.n	800487e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004854:	f7fd fbb2 	bl	8001fbc <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b0a      	cmp	r3, #10
 8004860:	d90d      	bls.n	800487e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004868:	f043 0201 	orr.w	r2, r3, #1
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2203      	movs	r2, #3
 8004876:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e18c      	b.n	8004b98 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	f003 0308 	and.w	r3, r3, #8
 8004888:	2b08      	cmp	r3, #8
 800488a:	d0e3      	beq.n	8004854 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699a      	ldr	r2, [r3, #24]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0201 	orr.w	r2, r2, #1
 800489a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800489c:	f7fd fb8e 	bl	8001fbc <HAL_GetTick>
 80048a0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80048a2:	e014      	b.n	80048ce <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80048a4:	f7fd fb8a 	bl	8001fbc <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b0a      	cmp	r3, #10
 80048b0:	d90d      	bls.n	80048ce <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048b8:	f043 0201 	orr.w	r2, r3, #1
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2203      	movs	r2, #3
 80048c6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e164      	b.n	8004b98 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0e3      	beq.n	80048a4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699a      	ldr	r2, [r3, #24]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0202 	orr.w	r2, r2, #2
 80048ea:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	7c1b      	ldrb	r3, [r3, #16]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d108      	bne.n	8004906 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699a      	ldr	r2, [r3, #24]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004902:	619a      	str	r2, [r3, #24]
 8004904:	e007      	b.n	8004916 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	699a      	ldr	r2, [r3, #24]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004914:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	7c5b      	ldrb	r3, [r3, #17]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d108      	bne.n	8004930 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	699a      	ldr	r2, [r3, #24]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800492c:	619a      	str	r2, [r3, #24]
 800492e:	e007      	b.n	8004940 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	699a      	ldr	r2, [r3, #24]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800493e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	7c9b      	ldrb	r3, [r3, #18]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d108      	bne.n	800495a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	699a      	ldr	r2, [r3, #24]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004956:	619a      	str	r2, [r3, #24]
 8004958:	e007      	b.n	800496a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	699a      	ldr	r2, [r3, #24]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004968:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	430a      	orrs	r2, r1
 800497e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	699a      	ldr	r2, [r3, #24]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800498e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691a      	ldr	r2, [r3, #16]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0210 	bic.w	r2, r2, #16
 800499e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d108      	bne.n	80049ba <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	699a      	ldr	r2, [r3, #24]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0204 	orr.w	r2, r2, #4
 80049b6:	619a      	str	r2, [r3, #24]
 80049b8:	e030      	b.n	8004a1c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d02c      	beq.n	8004a1c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d020      	beq.n	8004a0c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	699a      	ldr	r2, [r3, #24]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80049d8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	691a      	ldr	r2, [r3, #16]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f042 0210 	orr.w	r2, r2, #16
 80049e8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	2b03      	cmp	r3, #3
 80049f0:	d114      	bne.n	8004a1c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	699a      	ldr	r2, [r3, #24]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f042 0220 	orr.w	r2, r2, #32
 8004a00:	619a      	str	r2, [r3, #24]
 8004a02:	e00b      	b.n	8004a1c <HAL_FDCAN_Init+0x234>
 8004a04:	0800e558 	.word	0x0800e558
 8004a08:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699a      	ldr	r2, [r3, #24]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0220 	orr.w	r2, r2, #32
 8004a1a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	3b01      	subs	r3, #1
 8004a22:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004a2c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004a34:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004a44:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004a46:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a50:	d115      	bne.n	8004a7e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a56:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004a60:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a66:	3b01      	subs	r3, #1
 8004a68:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004a6a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a72:	3b01      	subs	r3, #1
 8004a74:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004a7a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004a7c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aa4:	4413      	add	r3, r2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d011      	beq.n	8004ace <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004ab2:	f023 0107 	bic.w	r1, r3, #7
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	3360      	adds	r3, #96	@ 0x60
 8004abe:	443b      	add	r3, r7
 8004ac0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d011      	beq.n	8004afa <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004ade:	f023 0107 	bic.w	r1, r3, #7
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	3360      	adds	r3, #96	@ 0x60
 8004aea:	443b      	add	r3, r7
 8004aec:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d012      	beq.n	8004b28 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004b0a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	3360      	adds	r3, #96	@ 0x60
 8004b16:	443b      	add	r3, r7
 8004b18:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004b1c:	011a      	lsls	r2, r3, #4
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d012      	beq.n	8004b56 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004b38:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	3360      	adds	r3, #96	@ 0x60
 8004b44:	443b      	add	r3, r7
 8004b46:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004b4a:	021a      	lsls	r2, r3, #8
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a11      	ldr	r2, [pc, #68]	@ (8004ba0 <HAL_FDCAN_Init+0x3b8>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d107      	bne.n	8004b70 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	689a      	ldr	r2, [r3, #8]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f022 0203 	bic.w	r2, r2, #3
 8004b6e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 fb1f 	bl	80051cc <FDCAN_CalcultateRamBlockAddresses>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8004b94:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3760      	adds	r7, #96	@ 0x60
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	4000a000 	.word	0x4000a000

08004ba4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b096      	sub	sp, #88	@ 0x58
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8004bac:	4b9a      	ldr	r3, [pc, #616]	@ (8004e18 <HAL_FDCAN_IRQHandler+0x274>)
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	079b      	lsls	r3, r3, #30
 8004bb2:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8004bb4:	4b98      	ldr	r3, [pc, #608]	@ (8004e18 <HAL_FDCAN_IRQHandler+0x274>)
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	079b      	lsls	r3, r3, #30
 8004bba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bc6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004bca:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bde:	f003 030f 	and.w	r3, r3, #15
 8004be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bec:	4013      	ands	r3, r2
 8004bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bf6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c04:	4013      	ands	r3, r2
 8004c06:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c0e:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8004c12:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c26:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8004c2a:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c34:	4013      	ands	r3, r2
 8004c36:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c46:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c4a:	0a1b      	lsrs	r3, r3, #8
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d010      	beq.n	8004c76 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c56:	0a1b      	lsrs	r3, r3, #8
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00a      	beq.n	8004c76 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c68:	651a      	str	r2, [r3, #80]	@ 0x50
 8004c6a:	4b6b      	ldr	r3, [pc, #428]	@ (8004e18 <HAL_FDCAN_IRQHandler+0x274>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 fa5f 	bl	8005134 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c78:	0a9b      	lsrs	r3, r3, #10
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d01d      	beq.n	8004cbe <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c84:	0a9b      	lsrs	r3, r3, #10
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d017      	beq.n	8004cbe <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004c96:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ca0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004cae:	651a      	str	r2, [r3, #80]	@ 0x50
 8004cb0:	4b59      	ldr	r3, [pc, #356]	@ (8004e18 <HAL_FDCAN_IRQHandler+0x274>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004cb6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 fa12 	bl	80050e2 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8004cbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00d      	beq.n	8004ce0 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004cca:	4b54      	ldr	r3, [pc, #336]	@ (8004e1c <HAL_FDCAN_IRQHandler+0x278>)
 8004ccc:	400b      	ands	r3, r1
 8004cce:	6513      	str	r3, [r2, #80]	@ 0x50
 8004cd0:	4a51      	ldr	r2, [pc, #324]	@ (8004e18 <HAL_FDCAN_IRQHandler+0x274>)
 8004cd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cd4:	0f9b      	lsrs	r3, r3, #30
 8004cd6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8004cd8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f9c0 	bl	8005060 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004ce0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00d      	beq.n	8004d02 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004cec:	4b4b      	ldr	r3, [pc, #300]	@ (8004e1c <HAL_FDCAN_IRQHandler+0x278>)
 8004cee:	400b      	ands	r3, r1
 8004cf0:	6513      	str	r3, [r2, #80]	@ 0x50
 8004cf2:	4a49      	ldr	r2, [pc, #292]	@ (8004e18 <HAL_FDCAN_IRQHandler+0x274>)
 8004cf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cf6:	0f9b      	lsrs	r3, r3, #30
 8004cf8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004cfa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f9ba 	bl	8005076 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004d02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00d      	beq.n	8004d24 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004d0e:	4b43      	ldr	r3, [pc, #268]	@ (8004e1c <HAL_FDCAN_IRQHandler+0x278>)
 8004d10:	400b      	ands	r3, r1
 8004d12:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d14:	4a40      	ldr	r2, [pc, #256]	@ (8004e18 <HAL_FDCAN_IRQHandler+0x274>)
 8004d16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d18:	0f9b      	lsrs	r3, r3, #30
 8004d1a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004d1c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f9b4 	bl	800508c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004d24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00d      	beq.n	8004d46 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004d30:	4b3a      	ldr	r3, [pc, #232]	@ (8004e1c <HAL_FDCAN_IRQHandler+0x278>)
 8004d32:	400b      	ands	r3, r1
 8004d34:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d36:	4a38      	ldr	r2, [pc, #224]	@ (8004e18 <HAL_FDCAN_IRQHandler+0x274>)
 8004d38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d3a:	0f9b      	lsrs	r3, r3, #30
 8004d3c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004d3e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 f9ae 	bl	80050a2 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004d46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d48:	0adb      	lsrs	r3, r3, #11
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d010      	beq.n	8004d74 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d54:	0adb      	lsrs	r3, r3, #11
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d66:	651a      	str	r2, [r3, #80]	@ 0x50
 8004d68:	4b2b      	ldr	r3, [pc, #172]	@ (8004e18 <HAL_FDCAN_IRQHandler+0x274>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f9a2 	bl	80050b8 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8004d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d76:	0a5b      	lsrs	r3, r3, #9
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d01d      	beq.n	8004dbc <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d82:	0a5b      	lsrs	r3, r3, #9
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d017      	beq.n	8004dbc <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004d94:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004da0:	4013      	ands	r3, r2
 8004da2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004dac:	651a      	str	r2, [r3, #80]	@ 0x50
 8004dae:	4b1a      	ldr	r3, [pc, #104]	@ (8004e18 <HAL_FDCAN_IRQHandler+0x274>)
 8004db0:	2200      	movs	r2, #0
 8004db2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004db4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f988 	bl	80050cc <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004dbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dbe:	0cdb      	lsrs	r3, r3, #19
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d010      	beq.n	8004dea <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dca:	0cdb      	lsrs	r3, r3, #19
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00a      	beq.n	8004dea <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004ddc:	651a      	str	r2, [r3, #80]	@ 0x50
 8004dde:	4b0e      	ldr	r3, [pc, #56]	@ (8004e18 <HAL_FDCAN_IRQHandler+0x274>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f987 	bl	80050f8 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dec:	0c1b      	lsrs	r3, r3, #16
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d016      	beq.n	8004e24 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df8:	0c1b      	lsrs	r3, r3, #16
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d010      	beq.n	8004e24 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004e0a:	651a      	str	r2, [r3, #80]	@ 0x50
 8004e0c:	4b02      	ldr	r3, [pc, #8]	@ (8004e18 <HAL_FDCAN_IRQHandler+0x274>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	e004      	b.n	8004e20 <HAL_FDCAN_IRQHandler+0x27c>
 8004e16:	bf00      	nop
 8004e18:	4000a800 	.word	0x4000a800
 8004e1c:	3fcfffff 	.word	0x3fcfffff
 8004e20:	f000 f974 	bl	800510c <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004e24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e26:	0c9b      	lsrs	r3, r3, #18
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d010      	beq.n	8004e52 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e32:	0c9b      	lsrs	r3, r3, #18
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00a      	beq.n	8004e52 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004e44:	651a      	str	r2, [r3, #80]	@ 0x50
 8004e46:	4b83      	ldr	r3, [pc, #524]	@ (8005054 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f967 	bl	8005120 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e54:	0c5b      	lsrs	r3, r3, #17
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d015      	beq.n	8004e8a <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e60:	0c5b      	lsrs	r3, r3, #17
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00f      	beq.n	8004e8a <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004e72:	651a      	str	r2, [r3, #80]	@ 0x50
 8004e74:	4b77      	ldr	r3, [pc, #476]	@ (8005054 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e80:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004e8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00d      	beq.n	8004eac <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e96:	4b70      	ldr	r3, [pc, #448]	@ (8005058 <HAL_FDCAN_IRQHandler+0x4b4>)
 8004e98:	400b      	ands	r3, r1
 8004e9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e9c:	4a6d      	ldr	r2, [pc, #436]	@ (8005054 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004e9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ea0:	0f9b      	lsrs	r3, r3, #30
 8004ea2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004ea4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f958 	bl	800515c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004eac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d011      	beq.n	8004ed6 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004eb8:	4b67      	ldr	r3, [pc, #412]	@ (8005058 <HAL_FDCAN_IRQHandler+0x4b4>)
 8004eba:	400b      	ands	r3, r1
 8004ebc:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ebe:	4a65      	ldr	r2, [pc, #404]	@ (8005054 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004ec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ec2:	0f9b      	lsrs	r3, r3, #30
 8004ec4:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004ecc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a60      	ldr	r2, [pc, #384]	@ (800505c <HAL_FDCAN_IRQHandler+0x4b8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	f040 80ac 	bne.w	800503a <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f003 0303 	and.w	r3, r3, #3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 80a4 	beq.w	800503a <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	f003 030f 	and.w	r3, r3, #15
 8004efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f06:	4013      	ands	r3, r2
 8004f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004f14:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f1e:	4013      	ands	r3, r2
 8004f20:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004f2c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f36:	4013      	ands	r3, r2
 8004f38:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8004f44:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4c:	6a3a      	ldr	r2, [r7, #32]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8004f5c:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f64:	69fa      	ldr	r2, [r7, #28]
 8004f66:	4013      	ands	r3, r2
 8004f68:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f70:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8004f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d007      	beq.n	8004f90 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f86:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8004f88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f8f1 	bl	8005172 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8004f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d007      	beq.n	8004fa6 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f9c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8004f9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f8f1 	bl	8005188 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	099b      	lsrs	r3, r3, #6
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d01a      	beq.n	8004fe8 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	099b      	lsrs	r3, r3, #6
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d014      	beq.n	8004fe8 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fc4:	0c1b      	lsrs	r3, r3, #16
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fd4:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2240      	movs	r2, #64	@ 0x40
 8004fdc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	6939      	ldr	r1, [r7, #16]
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f8db 	bl	800519e <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d007      	beq.n	8004ffe <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ff4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8004ff6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f8dc 	bl	80051b6 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8004ffe:	6a3b      	ldr	r3, [r7, #32]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00b      	beq.n	800501c <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	6a3a      	ldr	r2, [r7, #32]
 800500a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	431a      	orrs	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00b      	beq.n	800503a <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	69fa      	ldr	r2, [r7, #28]
 8005028:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f87f 	bl	8005148 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800504a:	bf00      	nop
 800504c:	3758      	adds	r7, #88	@ 0x58
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	4000a800 	.word	0x4000a800
 8005058:	3fcfffff 	.word	0x3fcfffff
 800505c:	4000a000 	.word	0x4000a000

08005060 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
 800507e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8005096:	bf00      	nop
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b083      	sub	sp, #12
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800519e:	b480      	push	{r7}
 80051a0:	b085      	sub	sp, #20
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	60f8      	str	r0, [r7, #12]
 80051a6:	60b9      	str	r1, [r7, #8]
 80051a8:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80051aa:	bf00      	nop
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
 80051be:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051d8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80051e2:	4ba7      	ldr	r3, [pc, #668]	@ (8005480 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80051e4:	4013      	ands	r3, r2
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	0091      	lsls	r1, r2, #2
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6812      	ldr	r2, [r2, #0]
 80051ee:	430b      	orrs	r3, r1
 80051f0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051fc:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005204:	041a      	lsls	r2, r3, #16
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	4413      	add	r3, r2
 8005218:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005222:	4b97      	ldr	r3, [pc, #604]	@ (8005480 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005224:	4013      	ands	r3, r2
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	0091      	lsls	r1, r2, #2
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	6812      	ldr	r2, [r2, #0]
 800522e:	430b      	orrs	r3, r1
 8005230:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800523c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005244:	041a      	lsls	r2, r3, #16
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	4413      	add	r3, r2
 800525a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005264:	4b86      	ldr	r3, [pc, #536]	@ (8005480 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005266:	4013      	ands	r3, r2
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	0091      	lsls	r1, r2, #2
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	6812      	ldr	r2, [r2, #0]
 8005270:	430b      	orrs	r3, r1
 8005272:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800527e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005286:	041a      	lsls	r2, r3, #16
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800529a:	fb02 f303 	mul.w	r3, r2, r3
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	4413      	add	r3, r2
 80052a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80052ac:	4b74      	ldr	r3, [pc, #464]	@ (8005480 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80052ae:	4013      	ands	r3, r2
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	0091      	lsls	r1, r2, #2
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6812      	ldr	r2, [r2, #0]
 80052b8:	430b      	orrs	r3, r1
 80052ba:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80052c6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052ce:	041a      	lsls	r2, r3, #16
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80052e2:	fb02 f303 	mul.w	r3, r2, r3
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	4413      	add	r3, r2
 80052ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80052f4:	4b62      	ldr	r3, [pc, #392]	@ (8005480 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80052f6:	4013      	ands	r3, r2
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	0091      	lsls	r1, r2, #2
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6812      	ldr	r2, [r2, #0]
 8005300:	430b      	orrs	r3, r1
 8005302:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800530e:	fb02 f303 	mul.w	r3, r2, r3
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	4413      	add	r3, r2
 8005316:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005320:	4b57      	ldr	r3, [pc, #348]	@ (8005480 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005322:	4013      	ands	r3, r2
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	0091      	lsls	r1, r2, #2
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6812      	ldr	r2, [r2, #0]
 800532c:	430b      	orrs	r3, r1
 800532e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800533a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005342:	041a      	lsls	r2, r3, #16
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005352:	005b      	lsls	r3, r3, #1
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	4413      	add	r3, r2
 8005358:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005362:	4b47      	ldr	r3, [pc, #284]	@ (8005480 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005364:	4013      	ands	r3, r2
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	0091      	lsls	r1, r2, #2
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6812      	ldr	r2, [r2, #0]
 800536e:	430b      	orrs	r3, r1
 8005370:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800537c:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005384:	041a      	lsls	r2, r3, #16
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005398:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053a0:	061a      	lsls	r2, r3, #24
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053b0:	4b34      	ldr	r3, [pc, #208]	@ (8005484 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80053b2:	4413      	add	r3, r2
 80053b4:	009a      	lsls	r2, r3, #2
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	441a      	add	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	441a      	add	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e2:	6879      	ldr	r1, [r7, #4]
 80053e4:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80053e6:	fb01 f303 	mul.w	r3, r1, r3
 80053ea:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80053ec:	441a      	add	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053fa:	6879      	ldr	r1, [r7, #4]
 80053fc:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80053fe:	fb01 f303 	mul.w	r3, r1, r3
 8005402:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005404:	441a      	add	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005412:	6879      	ldr	r1, [r7, #4]
 8005414:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8005416:	fb01 f303 	mul.w	r3, r1, r3
 800541a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800541c:	441a      	add	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	441a      	add	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005442:	6879      	ldr	r1, [r7, #4]
 8005444:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005446:	fb01 f303 	mul.w	r3, r1, r3
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	441a      	add	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800545e:	6879      	ldr	r1, [r7, #4]
 8005460:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005462:	fb01 f303 	mul.w	r3, r1, r3
 8005466:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005468:	441a      	add	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005476:	4a04      	ldr	r2, [pc, #16]	@ (8005488 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d915      	bls.n	80054a8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800547c:	e006      	b.n	800548c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800547e:	bf00      	nop
 8005480:	ffff0003 	.word	0xffff0003
 8005484:	10002b00 	.word	0x10002b00
 8005488:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005492:	f043 0220 	orr.w	r2, r3, #32
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2203      	movs	r2, #3
 80054a0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e010      	b.n	80054ca <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	e005      	b.n	80054bc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	3304      	adds	r3, #4
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d3f3      	bcc.n	80054b0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop

080054d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80054d8:	b480      	push	{r7}
 80054da:	b089      	sub	sp, #36	@ 0x24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80054e2:	2300      	movs	r3, #0
 80054e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80054e6:	4b86      	ldr	r3, [pc, #536]	@ (8005700 <HAL_GPIO_Init+0x228>)
 80054e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80054ea:	e18c      	b.n	8005806 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	2101      	movs	r1, #1
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	fa01 f303 	lsl.w	r3, r1, r3
 80054f8:	4013      	ands	r3, r2
 80054fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f000 817e 	beq.w	8005800 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f003 0303 	and.w	r3, r3, #3
 800550c:	2b01      	cmp	r3, #1
 800550e:	d005      	beq.n	800551c <HAL_GPIO_Init+0x44>
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f003 0303 	and.w	r3, r3, #3
 8005518:	2b02      	cmp	r3, #2
 800551a:	d130      	bne.n	800557e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	2203      	movs	r2, #3
 8005528:	fa02 f303 	lsl.w	r3, r2, r3
 800552c:	43db      	mvns	r3, r3
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	4013      	ands	r3, r2
 8005532:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	68da      	ldr	r2, [r3, #12]
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	005b      	lsls	r3, r3, #1
 800553c:	fa02 f303 	lsl.w	r3, r2, r3
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	4313      	orrs	r3, r2
 8005544:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005552:	2201      	movs	r2, #1
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	fa02 f303 	lsl.w	r3, r2, r3
 800555a:	43db      	mvns	r3, r3
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	4013      	ands	r3, r2
 8005560:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	091b      	lsrs	r3, r3, #4
 8005568:	f003 0201 	and.w	r2, r3, #1
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	fa02 f303 	lsl.w	r3, r2, r3
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	4313      	orrs	r3, r2
 8005576:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f003 0303 	and.w	r3, r3, #3
 8005586:	2b03      	cmp	r3, #3
 8005588:	d017      	beq.n	80055ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	2203      	movs	r2, #3
 8005596:	fa02 f303 	lsl.w	r3, r2, r3
 800559a:	43db      	mvns	r3, r3
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	4013      	ands	r3, r2
 80055a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	689a      	ldr	r2, [r3, #8]
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	fa02 f303 	lsl.w	r3, r2, r3
 80055ae:	69ba      	ldr	r2, [r7, #24]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f003 0303 	and.w	r3, r3, #3
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d123      	bne.n	800560e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	08da      	lsrs	r2, r3, #3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	3208      	adds	r2, #8
 80055ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	f003 0307 	and.w	r3, r3, #7
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	220f      	movs	r2, #15
 80055de:	fa02 f303 	lsl.w	r3, r2, r3
 80055e2:	43db      	mvns	r3, r3
 80055e4:	69ba      	ldr	r2, [r7, #24]
 80055e6:	4013      	ands	r3, r2
 80055e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	691a      	ldr	r2, [r3, #16]
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	f003 0307 	and.w	r3, r3, #7
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	fa02 f303 	lsl.w	r3, r2, r3
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	08da      	lsrs	r2, r3, #3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	3208      	adds	r2, #8
 8005608:	69b9      	ldr	r1, [r7, #24]
 800560a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	2203      	movs	r2, #3
 800561a:	fa02 f303 	lsl.w	r3, r2, r3
 800561e:	43db      	mvns	r3, r3
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	4013      	ands	r3, r2
 8005624:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f003 0203 	and.w	r2, r3, #3
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	005b      	lsls	r3, r3, #1
 8005632:	fa02 f303 	lsl.w	r3, r2, r3
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	4313      	orrs	r3, r2
 800563a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 80d8 	beq.w	8005800 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005650:	4b2c      	ldr	r3, [pc, #176]	@ (8005704 <HAL_GPIO_Init+0x22c>)
 8005652:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005656:	4a2b      	ldr	r2, [pc, #172]	@ (8005704 <HAL_GPIO_Init+0x22c>)
 8005658:	f043 0302 	orr.w	r3, r3, #2
 800565c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005660:	4b28      	ldr	r3, [pc, #160]	@ (8005704 <HAL_GPIO_Init+0x22c>)
 8005662:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800566e:	4a26      	ldr	r2, [pc, #152]	@ (8005708 <HAL_GPIO_Init+0x230>)
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	089b      	lsrs	r3, r3, #2
 8005674:	3302      	adds	r3, #2
 8005676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800567a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	f003 0303 	and.w	r3, r3, #3
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	220f      	movs	r2, #15
 8005686:	fa02 f303 	lsl.w	r3, r2, r3
 800568a:	43db      	mvns	r3, r3
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	4013      	ands	r3, r2
 8005690:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a1d      	ldr	r2, [pc, #116]	@ (800570c <HAL_GPIO_Init+0x234>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d04a      	beq.n	8005730 <HAL_GPIO_Init+0x258>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a1c      	ldr	r2, [pc, #112]	@ (8005710 <HAL_GPIO_Init+0x238>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d02b      	beq.n	80056fa <HAL_GPIO_Init+0x222>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005714 <HAL_GPIO_Init+0x23c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d025      	beq.n	80056f6 <HAL_GPIO_Init+0x21e>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a1a      	ldr	r2, [pc, #104]	@ (8005718 <HAL_GPIO_Init+0x240>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d01f      	beq.n	80056f2 <HAL_GPIO_Init+0x21a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a19      	ldr	r2, [pc, #100]	@ (800571c <HAL_GPIO_Init+0x244>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d019      	beq.n	80056ee <HAL_GPIO_Init+0x216>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a18      	ldr	r2, [pc, #96]	@ (8005720 <HAL_GPIO_Init+0x248>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d013      	beq.n	80056ea <HAL_GPIO_Init+0x212>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a17      	ldr	r2, [pc, #92]	@ (8005724 <HAL_GPIO_Init+0x24c>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d00d      	beq.n	80056e6 <HAL_GPIO_Init+0x20e>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a16      	ldr	r2, [pc, #88]	@ (8005728 <HAL_GPIO_Init+0x250>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d007      	beq.n	80056e2 <HAL_GPIO_Init+0x20a>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a15      	ldr	r2, [pc, #84]	@ (800572c <HAL_GPIO_Init+0x254>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d101      	bne.n	80056de <HAL_GPIO_Init+0x206>
 80056da:	2309      	movs	r3, #9
 80056dc:	e029      	b.n	8005732 <HAL_GPIO_Init+0x25a>
 80056de:	230a      	movs	r3, #10
 80056e0:	e027      	b.n	8005732 <HAL_GPIO_Init+0x25a>
 80056e2:	2307      	movs	r3, #7
 80056e4:	e025      	b.n	8005732 <HAL_GPIO_Init+0x25a>
 80056e6:	2306      	movs	r3, #6
 80056e8:	e023      	b.n	8005732 <HAL_GPIO_Init+0x25a>
 80056ea:	2305      	movs	r3, #5
 80056ec:	e021      	b.n	8005732 <HAL_GPIO_Init+0x25a>
 80056ee:	2304      	movs	r3, #4
 80056f0:	e01f      	b.n	8005732 <HAL_GPIO_Init+0x25a>
 80056f2:	2303      	movs	r3, #3
 80056f4:	e01d      	b.n	8005732 <HAL_GPIO_Init+0x25a>
 80056f6:	2302      	movs	r3, #2
 80056f8:	e01b      	b.n	8005732 <HAL_GPIO_Init+0x25a>
 80056fa:	2301      	movs	r3, #1
 80056fc:	e019      	b.n	8005732 <HAL_GPIO_Init+0x25a>
 80056fe:	bf00      	nop
 8005700:	58000080 	.word	0x58000080
 8005704:	58024400 	.word	0x58024400
 8005708:	58000400 	.word	0x58000400
 800570c:	58020000 	.word	0x58020000
 8005710:	58020400 	.word	0x58020400
 8005714:	58020800 	.word	0x58020800
 8005718:	58020c00 	.word	0x58020c00
 800571c:	58021000 	.word	0x58021000
 8005720:	58021400 	.word	0x58021400
 8005724:	58021800 	.word	0x58021800
 8005728:	58021c00 	.word	0x58021c00
 800572c:	58022400 	.word	0x58022400
 8005730:	2300      	movs	r3, #0
 8005732:	69fa      	ldr	r2, [r7, #28]
 8005734:	f002 0203 	and.w	r2, r2, #3
 8005738:	0092      	lsls	r2, r2, #2
 800573a:	4093      	lsls	r3, r2
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	4313      	orrs	r3, r2
 8005740:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005742:	4938      	ldr	r1, [pc, #224]	@ (8005824 <HAL_GPIO_Init+0x34c>)
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	089b      	lsrs	r3, r3, #2
 8005748:	3302      	adds	r3, #2
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005750:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	43db      	mvns	r3, r3
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	4013      	ands	r3, r2
 8005760:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d003      	beq.n	8005776 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	4313      	orrs	r3, r2
 8005774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005776:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800577e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	43db      	mvns	r3, r3
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	4013      	ands	r3, r2
 800578e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d003      	beq.n	80057a4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80057a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	43db      	mvns	r3, r3
 80057b6:	69ba      	ldr	r2, [r7, #24]
 80057b8:	4013      	ands	r3, r2
 80057ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d003      	beq.n	80057d0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	43db      	mvns	r3, r3
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	4013      	ands	r3, r2
 80057e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	3301      	adds	r3, #1
 8005804:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	fa22 f303 	lsr.w	r3, r2, r3
 8005810:	2b00      	cmp	r3, #0
 8005812:	f47f ae6b 	bne.w	80054ec <HAL_GPIO_Init+0x14>
  }
}
 8005816:	bf00      	nop
 8005818:	bf00      	nop
 800581a:	3724      	adds	r7, #36	@ 0x24
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	58000400 	.word	0x58000400

08005828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	460b      	mov	r3, r1
 8005832:	807b      	strh	r3, [r7, #2]
 8005834:	4613      	mov	r3, r2
 8005836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005838:	787b      	ldrb	r3, [r7, #1]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800583e:	887a      	ldrh	r2, [r7, #2]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005844:	e003      	b.n	800584e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005846:	887b      	ldrh	r3, [r7, #2]
 8005848:	041a      	lsls	r2, r3, #16
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	619a      	str	r2, [r3, #24]
}
 800584e:	bf00      	nop
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
	...

0800585c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005864:	4b19      	ldr	r3, [pc, #100]	@ (80058cc <HAL_PWREx_ConfigSupply+0x70>)
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f003 0304 	and.w	r3, r3, #4
 800586c:	2b04      	cmp	r3, #4
 800586e:	d00a      	beq.n	8005886 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005870:	4b16      	ldr	r3, [pc, #88]	@ (80058cc <HAL_PWREx_ConfigSupply+0x70>)
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f003 0307 	and.w	r3, r3, #7
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	429a      	cmp	r2, r3
 800587c:	d001      	beq.n	8005882 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e01f      	b.n	80058c2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	e01d      	b.n	80058c2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005886:	4b11      	ldr	r3, [pc, #68]	@ (80058cc <HAL_PWREx_ConfigSupply+0x70>)
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	f023 0207 	bic.w	r2, r3, #7
 800588e:	490f      	ldr	r1, [pc, #60]	@ (80058cc <HAL_PWREx_ConfigSupply+0x70>)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4313      	orrs	r3, r2
 8005894:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005896:	f7fc fb91 	bl	8001fbc <HAL_GetTick>
 800589a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800589c:	e009      	b.n	80058b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800589e:	f7fc fb8d 	bl	8001fbc <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80058ac:	d901      	bls.n	80058b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e007      	b.n	80058c2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80058b2:	4b06      	ldr	r3, [pc, #24]	@ (80058cc <HAL_PWREx_ConfigSupply+0x70>)
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058be:	d1ee      	bne.n	800589e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	58024800 	.word	0x58024800

080058d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b08c      	sub	sp, #48	@ 0x30
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e3c8      	b.n	8006074 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f000 8087 	beq.w	80059fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058f0:	4b88      	ldr	r3, [pc, #544]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80058fa:	4b86      	ldr	r3, [pc, #536]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 80058fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005902:	2b10      	cmp	r3, #16
 8005904:	d007      	beq.n	8005916 <HAL_RCC_OscConfig+0x46>
 8005906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005908:	2b18      	cmp	r3, #24
 800590a:	d110      	bne.n	800592e <HAL_RCC_OscConfig+0x5e>
 800590c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590e:	f003 0303 	and.w	r3, r3, #3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d10b      	bne.n	800592e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005916:	4b7f      	ldr	r3, [pc, #508]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d06c      	beq.n	80059fc <HAL_RCC_OscConfig+0x12c>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d168      	bne.n	80059fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e3a2      	b.n	8006074 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005936:	d106      	bne.n	8005946 <HAL_RCC_OscConfig+0x76>
 8005938:	4b76      	ldr	r3, [pc, #472]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a75      	ldr	r2, [pc, #468]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 800593e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005942:	6013      	str	r3, [r2, #0]
 8005944:	e02e      	b.n	80059a4 <HAL_RCC_OscConfig+0xd4>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10c      	bne.n	8005968 <HAL_RCC_OscConfig+0x98>
 800594e:	4b71      	ldr	r3, [pc, #452]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a70      	ldr	r2, [pc, #448]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 8005954:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005958:	6013      	str	r3, [r2, #0]
 800595a:	4b6e      	ldr	r3, [pc, #440]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a6d      	ldr	r2, [pc, #436]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 8005960:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005964:	6013      	str	r3, [r2, #0]
 8005966:	e01d      	b.n	80059a4 <HAL_RCC_OscConfig+0xd4>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005970:	d10c      	bne.n	800598c <HAL_RCC_OscConfig+0xbc>
 8005972:	4b68      	ldr	r3, [pc, #416]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a67      	ldr	r2, [pc, #412]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 8005978:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	4b65      	ldr	r3, [pc, #404]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a64      	ldr	r2, [pc, #400]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 8005984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	e00b      	b.n	80059a4 <HAL_RCC_OscConfig+0xd4>
 800598c:	4b61      	ldr	r3, [pc, #388]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a60      	ldr	r2, [pc, #384]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 8005992:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005996:	6013      	str	r3, [r2, #0]
 8005998:	4b5e      	ldr	r3, [pc, #376]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a5d      	ldr	r2, [pc, #372]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 800599e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d013      	beq.n	80059d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ac:	f7fc fb06 	bl	8001fbc <HAL_GetTick>
 80059b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059b4:	f7fc fb02 	bl	8001fbc <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b64      	cmp	r3, #100	@ 0x64
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e356      	b.n	8006074 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059c6:	4b53      	ldr	r3, [pc, #332]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0f0      	beq.n	80059b4 <HAL_RCC_OscConfig+0xe4>
 80059d2:	e014      	b.n	80059fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d4:	f7fc faf2 	bl	8001fbc <HAL_GetTick>
 80059d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059dc:	f7fc faee 	bl	8001fbc <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b64      	cmp	r3, #100	@ 0x64
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e342      	b.n	8006074 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80059ee:	4b49      	ldr	r3, [pc, #292]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1f0      	bne.n	80059dc <HAL_RCC_OscConfig+0x10c>
 80059fa:	e000      	b.n	80059fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f000 808c 	beq.w	8005b24 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a0c:	4b41      	ldr	r3, [pc, #260]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a14:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a16:	4b3f      	ldr	r3, [pc, #252]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 8005a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a1a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d007      	beq.n	8005a32 <HAL_RCC_OscConfig+0x162>
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	2b18      	cmp	r3, #24
 8005a26:	d137      	bne.n	8005a98 <HAL_RCC_OscConfig+0x1c8>
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	f003 0303 	and.w	r3, r3, #3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d132      	bne.n	8005a98 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a32:	4b38      	ldr	r3, [pc, #224]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0304 	and.w	r3, r3, #4
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d005      	beq.n	8005a4a <HAL_RCC_OscConfig+0x17a>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e314      	b.n	8006074 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005a4a:	4b32      	ldr	r3, [pc, #200]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f023 0219 	bic.w	r2, r3, #25
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	492f      	ldr	r1, [pc, #188]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a5c:	f7fc faae 	bl	8001fbc <HAL_GetTick>
 8005a60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a62:	e008      	b.n	8005a76 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a64:	f7fc faaa 	bl	8001fbc <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e2fe      	b.n	8006074 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a76:	4b27      	ldr	r3, [pc, #156]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0304 	and.w	r3, r3, #4
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d0f0      	beq.n	8005a64 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a82:	4b24      	ldr	r3, [pc, #144]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	061b      	lsls	r3, r3, #24
 8005a90:	4920      	ldr	r1, [pc, #128]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a96:	e045      	b.n	8005b24 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d026      	beq.n	8005aee <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f023 0219 	bic.w	r2, r3, #25
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	4919      	ldr	r1, [pc, #100]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab2:	f7fc fa83 	bl	8001fbc <HAL_GetTick>
 8005ab6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ab8:	e008      	b.n	8005acc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aba:	f7fc fa7f 	bl	8001fbc <HAL_GetTick>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d901      	bls.n	8005acc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e2d3      	b.n	8006074 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005acc:	4b11      	ldr	r3, [pc, #68]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0304 	and.w	r3, r3, #4
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d0f0      	beq.n	8005aba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	061b      	lsls	r3, r3, #24
 8005ae6:	490b      	ldr	r1, [pc, #44]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	604b      	str	r3, [r1, #4]
 8005aec:	e01a      	b.n	8005b24 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005aee:	4b09      	ldr	r3, [pc, #36]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a08      	ldr	r2, [pc, #32]	@ (8005b14 <HAL_RCC_OscConfig+0x244>)
 8005af4:	f023 0301 	bic.w	r3, r3, #1
 8005af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005afa:	f7fc fa5f 	bl	8001fbc <HAL_GetTick>
 8005afe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b00:	e00a      	b.n	8005b18 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b02:	f7fc fa5b 	bl	8001fbc <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d903      	bls.n	8005b18 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e2af      	b.n	8006074 <HAL_RCC_OscConfig+0x7a4>
 8005b14:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b18:	4b96      	ldr	r3, [pc, #600]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0304 	and.w	r3, r3, #4
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1ee      	bne.n	8005b02 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0310 	and.w	r3, r3, #16
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d06a      	beq.n	8005c06 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b30:	4b90      	ldr	r3, [pc, #576]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b38:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b3a:	4b8e      	ldr	r3, [pc, #568]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b3e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	2b08      	cmp	r3, #8
 8005b44:	d007      	beq.n	8005b56 <HAL_RCC_OscConfig+0x286>
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	2b18      	cmp	r3, #24
 8005b4a:	d11b      	bne.n	8005b84 <HAL_RCC_OscConfig+0x2b4>
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f003 0303 	and.w	r3, r3, #3
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d116      	bne.n	8005b84 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005b56:	4b87      	ldr	r3, [pc, #540]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d005      	beq.n	8005b6e <HAL_RCC_OscConfig+0x29e>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	2b80      	cmp	r3, #128	@ 0x80
 8005b68:	d001      	beq.n	8005b6e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e282      	b.n	8006074 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b6e:	4b81      	ldr	r3, [pc, #516]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	061b      	lsls	r3, r3, #24
 8005b7c:	497d      	ldr	r1, [pc, #500]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005b82:	e040      	b.n	8005c06 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d023      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005b8c:	4b79      	ldr	r3, [pc, #484]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a78      	ldr	r2, [pc, #480]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b98:	f7fc fa10 	bl	8001fbc <HAL_GetTick>
 8005b9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b9e:	e008      	b.n	8005bb2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005ba0:	f7fc fa0c 	bl	8001fbc <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d901      	bls.n	8005bb2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e260      	b.n	8006074 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005bb2:	4b70      	ldr	r3, [pc, #448]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d0f0      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005bbe:	4b6d      	ldr	r3, [pc, #436]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	061b      	lsls	r3, r3, #24
 8005bcc:	4969      	ldr	r1, [pc, #420]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60cb      	str	r3, [r1, #12]
 8005bd2:	e018      	b.n	8005c06 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005bd4:	4b67      	ldr	r3, [pc, #412]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a66      	ldr	r2, [pc, #408]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005bda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be0:	f7fc f9ec 	bl	8001fbc <HAL_GetTick>
 8005be4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005be6:	e008      	b.n	8005bfa <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005be8:	f7fc f9e8 	bl	8001fbc <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e23c      	b.n	8006074 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005bfa:	4b5e      	ldr	r3, [pc, #376]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1f0      	bne.n	8005be8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0308 	and.w	r3, r3, #8
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d036      	beq.n	8005c80 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d019      	beq.n	8005c4e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c1a:	4b56      	ldr	r3, [pc, #344]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c1e:	4a55      	ldr	r2, [pc, #340]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005c20:	f043 0301 	orr.w	r3, r3, #1
 8005c24:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c26:	f7fc f9c9 	bl	8001fbc <HAL_GetTick>
 8005c2a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005c2c:	e008      	b.n	8005c40 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c2e:	f7fc f9c5 	bl	8001fbc <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d901      	bls.n	8005c40 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e219      	b.n	8006074 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005c40:	4b4c      	ldr	r3, [pc, #304]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005c42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c44:	f003 0302 	and.w	r3, r3, #2
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d0f0      	beq.n	8005c2e <HAL_RCC_OscConfig+0x35e>
 8005c4c:	e018      	b.n	8005c80 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c4e:	4b49      	ldr	r3, [pc, #292]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c52:	4a48      	ldr	r2, [pc, #288]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005c54:	f023 0301 	bic.w	r3, r3, #1
 8005c58:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c5a:	f7fc f9af 	bl	8001fbc <HAL_GetTick>
 8005c5e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c60:	e008      	b.n	8005c74 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c62:	f7fc f9ab 	bl	8001fbc <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d901      	bls.n	8005c74 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e1ff      	b.n	8006074 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c74:	4b3f      	ldr	r3, [pc, #252]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005c76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1f0      	bne.n	8005c62 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0320 	and.w	r3, r3, #32
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d036      	beq.n	8005cfa <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d019      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c94:	4b37      	ldr	r3, [pc, #220]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a36      	ldr	r2, [pc, #216]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005c9a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005c9e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ca0:	f7fc f98c 	bl	8001fbc <HAL_GetTick>
 8005ca4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ca6:	e008      	b.n	8005cba <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ca8:	f7fc f988 	bl	8001fbc <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e1dc      	b.n	8006074 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005cba:	4b2e      	ldr	r3, [pc, #184]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d0f0      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x3d8>
 8005cc6:	e018      	b.n	8005cfa <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005cc8:	4b2a      	ldr	r3, [pc, #168]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a29      	ldr	r2, [pc, #164]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005cce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005cd2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005cd4:	f7fc f972 	bl	8001fbc <HAL_GetTick>
 8005cd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005cda:	e008      	b.n	8005cee <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cdc:	f7fc f96e 	bl	8001fbc <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e1c2      	b.n	8006074 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005cee:	4b21      	ldr	r3, [pc, #132]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1f0      	bne.n	8005cdc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0304 	and.w	r3, r3, #4
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 8086 	beq.w	8005e14 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005d08:	4b1b      	ldr	r3, [pc, #108]	@ (8005d78 <HAL_RCC_OscConfig+0x4a8>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a1a      	ldr	r2, [pc, #104]	@ (8005d78 <HAL_RCC_OscConfig+0x4a8>)
 8005d0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d14:	f7fc f952 	bl	8001fbc <HAL_GetTick>
 8005d18:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d1a:	e008      	b.n	8005d2e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d1c:	f7fc f94e 	bl	8001fbc <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b64      	cmp	r3, #100	@ 0x64
 8005d28:	d901      	bls.n	8005d2e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e1a2      	b.n	8006074 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d2e:	4b12      	ldr	r3, [pc, #72]	@ (8005d78 <HAL_RCC_OscConfig+0x4a8>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d0f0      	beq.n	8005d1c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d106      	bne.n	8005d50 <HAL_RCC_OscConfig+0x480>
 8005d42:	4b0c      	ldr	r3, [pc, #48]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d46:	4a0b      	ldr	r2, [pc, #44]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005d48:	f043 0301 	orr.w	r3, r3, #1
 8005d4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d4e:	e032      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e6>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d111      	bne.n	8005d7c <HAL_RCC_OscConfig+0x4ac>
 8005d58:	4b06      	ldr	r3, [pc, #24]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d5c:	4a05      	ldr	r2, [pc, #20]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005d5e:	f023 0301 	bic.w	r3, r3, #1
 8005d62:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d64:	4b03      	ldr	r3, [pc, #12]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d68:	4a02      	ldr	r2, [pc, #8]	@ (8005d74 <HAL_RCC_OscConfig+0x4a4>)
 8005d6a:	f023 0304 	bic.w	r3, r3, #4
 8005d6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d70:	e021      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e6>
 8005d72:	bf00      	nop
 8005d74:	58024400 	.word	0x58024400
 8005d78:	58024800 	.word	0x58024800
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	2b05      	cmp	r3, #5
 8005d82:	d10c      	bne.n	8005d9e <HAL_RCC_OscConfig+0x4ce>
 8005d84:	4b83      	ldr	r3, [pc, #524]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d88:	4a82      	ldr	r2, [pc, #520]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005d8a:	f043 0304 	orr.w	r3, r3, #4
 8005d8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d90:	4b80      	ldr	r3, [pc, #512]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d94:	4a7f      	ldr	r2, [pc, #508]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005d96:	f043 0301 	orr.w	r3, r3, #1
 8005d9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d9c:	e00b      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e6>
 8005d9e:	4b7d      	ldr	r3, [pc, #500]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005da2:	4a7c      	ldr	r2, [pc, #496]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005da4:	f023 0301 	bic.w	r3, r3, #1
 8005da8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005daa:	4b7a      	ldr	r3, [pc, #488]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dae:	4a79      	ldr	r2, [pc, #484]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005db0:	f023 0304 	bic.w	r3, r3, #4
 8005db4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d015      	beq.n	8005dea <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dbe:	f7fc f8fd 	bl	8001fbc <HAL_GetTick>
 8005dc2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005dc4:	e00a      	b.n	8005ddc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dc6:	f7fc f8f9 	bl	8001fbc <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d901      	bls.n	8005ddc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e14b      	b.n	8006074 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ddc:	4b6d      	ldr	r3, [pc, #436]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005de0:	f003 0302 	and.w	r3, r3, #2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d0ee      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x4f6>
 8005de8:	e014      	b.n	8005e14 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dea:	f7fc f8e7 	bl	8001fbc <HAL_GetTick>
 8005dee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005df0:	e00a      	b.n	8005e08 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005df2:	f7fc f8e3 	bl	8001fbc <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d901      	bls.n	8005e08 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e135      	b.n	8006074 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005e08:	4b62      	ldr	r3, [pc, #392]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1ee      	bne.n	8005df2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 812a 	beq.w	8006072 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005e1e:	4b5d      	ldr	r3, [pc, #372]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e26:	2b18      	cmp	r3, #24
 8005e28:	f000 80ba 	beq.w	8005fa0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	f040 8095 	bne.w	8005f60 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e36:	4b57      	ldr	r3, [pc, #348]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a56      	ldr	r2, [pc, #344]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005e3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e42:	f7fc f8bb 	bl	8001fbc <HAL_GetTick>
 8005e46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e48:	e008      	b.n	8005e5c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e4a:	f7fc f8b7 	bl	8001fbc <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d901      	bls.n	8005e5c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e10b      	b.n	8006074 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e5c:	4b4d      	ldr	r3, [pc, #308]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1f0      	bne.n	8005e4a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e68:	4b4a      	ldr	r3, [pc, #296]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005e6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e6c:	4b4a      	ldr	r3, [pc, #296]	@ (8005f98 <HAL_RCC_OscConfig+0x6c8>)
 8005e6e:	4013      	ands	r3, r2
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005e78:	0112      	lsls	r2, r2, #4
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	4945      	ldr	r1, [pc, #276]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	628b      	str	r3, [r1, #40]	@ 0x28
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e86:	3b01      	subs	r3, #1
 8005e88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e90:	3b01      	subs	r3, #1
 8005e92:	025b      	lsls	r3, r3, #9
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	431a      	orrs	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	041b      	lsls	r3, r3, #16
 8005ea0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	061b      	lsls	r3, r3, #24
 8005eae:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005eb2:	4938      	ldr	r1, [pc, #224]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005eb8:	4b36      	ldr	r3, [pc, #216]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ebc:	4a35      	ldr	r2, [pc, #212]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005ebe:	f023 0301 	bic.w	r3, r3, #1
 8005ec2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005ec4:	4b33      	ldr	r3, [pc, #204]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005ec6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ec8:	4b34      	ldr	r3, [pc, #208]	@ (8005f9c <HAL_RCC_OscConfig+0x6cc>)
 8005eca:	4013      	ands	r3, r2
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005ed0:	00d2      	lsls	r2, r2, #3
 8005ed2:	4930      	ldr	r1, [pc, #192]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005ed8:	4b2e      	ldr	r3, [pc, #184]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005edc:	f023 020c 	bic.w	r2, r3, #12
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee4:	492b      	ldr	r1, [pc, #172]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005eea:	4b2a      	ldr	r3, [pc, #168]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eee:	f023 0202 	bic.w	r2, r3, #2
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ef6:	4927      	ldr	r1, [pc, #156]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005efc:	4b25      	ldr	r3, [pc, #148]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f00:	4a24      	ldr	r2, [pc, #144]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005f02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f08:	4b22      	ldr	r3, [pc, #136]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f0c:	4a21      	ldr	r2, [pc, #132]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005f0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005f14:	4b1f      	ldr	r3, [pc, #124]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f18:	4a1e      	ldr	r2, [pc, #120]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005f1a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005f20:	4b1c      	ldr	r3, [pc, #112]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f24:	4a1b      	ldr	r2, [pc, #108]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005f26:	f043 0301 	orr.w	r3, r3, #1
 8005f2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f2c:	4b19      	ldr	r3, [pc, #100]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a18      	ldr	r2, [pc, #96]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005f32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f38:	f7fc f840 	bl	8001fbc <HAL_GetTick>
 8005f3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f3e:	e008      	b.n	8005f52 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f40:	f7fc f83c 	bl	8001fbc <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d901      	bls.n	8005f52 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e090      	b.n	8006074 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f52:	4b10      	ldr	r3, [pc, #64]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d0f0      	beq.n	8005f40 <HAL_RCC_OscConfig+0x670>
 8005f5e:	e088      	b.n	8006072 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f60:	4b0c      	ldr	r3, [pc, #48]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a0b      	ldr	r2, [pc, #44]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005f66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f6c:	f7fc f826 	bl	8001fbc <HAL_GetTick>
 8005f70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f72:	e008      	b.n	8005f86 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f74:	f7fc f822 	bl	8001fbc <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d901      	bls.n	8005f86 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e076      	b.n	8006074 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f86:	4b03      	ldr	r3, [pc, #12]	@ (8005f94 <HAL_RCC_OscConfig+0x6c4>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1f0      	bne.n	8005f74 <HAL_RCC_OscConfig+0x6a4>
 8005f92:	e06e      	b.n	8006072 <HAL_RCC_OscConfig+0x7a2>
 8005f94:	58024400 	.word	0x58024400
 8005f98:	fffffc0c 	.word	0xfffffc0c
 8005f9c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005fa0:	4b36      	ldr	r3, [pc, #216]	@ (800607c <HAL_RCC_OscConfig+0x7ac>)
 8005fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005fa6:	4b35      	ldr	r3, [pc, #212]	@ (800607c <HAL_RCC_OscConfig+0x7ac>)
 8005fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005faa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d031      	beq.n	8006018 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	f003 0203 	and.w	r2, r3, #3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d12a      	bne.n	8006018 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	091b      	lsrs	r3, r3, #4
 8005fc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d122      	bne.n	8006018 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fdc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d11a      	bne.n	8006018 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	0a5b      	lsrs	r3, r3, #9
 8005fe6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d111      	bne.n	8006018 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	0c1b      	lsrs	r3, r3, #16
 8005ff8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006000:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006002:	429a      	cmp	r2, r3
 8006004:	d108      	bne.n	8006018 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	0e1b      	lsrs	r3, r3, #24
 800600a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006012:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006014:	429a      	cmp	r2, r3
 8006016:	d001      	beq.n	800601c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e02b      	b.n	8006074 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800601c:	4b17      	ldr	r3, [pc, #92]	@ (800607c <HAL_RCC_OscConfig+0x7ac>)
 800601e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006020:	08db      	lsrs	r3, r3, #3
 8006022:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006026:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	429a      	cmp	r2, r3
 8006030:	d01f      	beq.n	8006072 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006032:	4b12      	ldr	r3, [pc, #72]	@ (800607c <HAL_RCC_OscConfig+0x7ac>)
 8006034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006036:	4a11      	ldr	r2, [pc, #68]	@ (800607c <HAL_RCC_OscConfig+0x7ac>)
 8006038:	f023 0301 	bic.w	r3, r3, #1
 800603c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800603e:	f7fb ffbd 	bl	8001fbc <HAL_GetTick>
 8006042:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006044:	bf00      	nop
 8006046:	f7fb ffb9 	bl	8001fbc <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604e:	4293      	cmp	r3, r2
 8006050:	d0f9      	beq.n	8006046 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006052:	4b0a      	ldr	r3, [pc, #40]	@ (800607c <HAL_RCC_OscConfig+0x7ac>)
 8006054:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006056:	4b0a      	ldr	r3, [pc, #40]	@ (8006080 <HAL_RCC_OscConfig+0x7b0>)
 8006058:	4013      	ands	r3, r2
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800605e:	00d2      	lsls	r2, r2, #3
 8006060:	4906      	ldr	r1, [pc, #24]	@ (800607c <HAL_RCC_OscConfig+0x7ac>)
 8006062:	4313      	orrs	r3, r2
 8006064:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006066:	4b05      	ldr	r3, [pc, #20]	@ (800607c <HAL_RCC_OscConfig+0x7ac>)
 8006068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606a:	4a04      	ldr	r2, [pc, #16]	@ (800607c <HAL_RCC_OscConfig+0x7ac>)
 800606c:	f043 0301 	orr.w	r3, r3, #1
 8006070:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3730      	adds	r7, #48	@ 0x30
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	58024400 	.word	0x58024400
 8006080:	ffff0007 	.word	0xffff0007

08006084 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e19c      	b.n	80063d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006098:	4b8a      	ldr	r3, [pc, #552]	@ (80062c4 <HAL_RCC_ClockConfig+0x240>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 030f 	and.w	r3, r3, #15
 80060a0:	683a      	ldr	r2, [r7, #0]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d910      	bls.n	80060c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060a6:	4b87      	ldr	r3, [pc, #540]	@ (80062c4 <HAL_RCC_ClockConfig+0x240>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f023 020f 	bic.w	r2, r3, #15
 80060ae:	4985      	ldr	r1, [pc, #532]	@ (80062c4 <HAL_RCC_ClockConfig+0x240>)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060b6:	4b83      	ldr	r3, [pc, #524]	@ (80062c4 <HAL_RCC_ClockConfig+0x240>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 030f 	and.w	r3, r3, #15
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d001      	beq.n	80060c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e184      	b.n	80063d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0304 	and.w	r3, r3, #4
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d010      	beq.n	80060f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	691a      	ldr	r2, [r3, #16]
 80060d8:	4b7b      	ldr	r3, [pc, #492]	@ (80062c8 <HAL_RCC_ClockConfig+0x244>)
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d908      	bls.n	80060f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80060e4:	4b78      	ldr	r3, [pc, #480]	@ (80062c8 <HAL_RCC_ClockConfig+0x244>)
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	4975      	ldr	r1, [pc, #468]	@ (80062c8 <HAL_RCC_ClockConfig+0x244>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0308 	and.w	r3, r3, #8
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d010      	beq.n	8006124 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	695a      	ldr	r2, [r3, #20]
 8006106:	4b70      	ldr	r3, [pc, #448]	@ (80062c8 <HAL_RCC_ClockConfig+0x244>)
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800610e:	429a      	cmp	r2, r3
 8006110:	d908      	bls.n	8006124 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006112:	4b6d      	ldr	r3, [pc, #436]	@ (80062c8 <HAL_RCC_ClockConfig+0x244>)
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	496a      	ldr	r1, [pc, #424]	@ (80062c8 <HAL_RCC_ClockConfig+0x244>)
 8006120:	4313      	orrs	r3, r2
 8006122:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0310 	and.w	r3, r3, #16
 800612c:	2b00      	cmp	r3, #0
 800612e:	d010      	beq.n	8006152 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	699a      	ldr	r2, [r3, #24]
 8006134:	4b64      	ldr	r3, [pc, #400]	@ (80062c8 <HAL_RCC_ClockConfig+0x244>)
 8006136:	69db      	ldr	r3, [r3, #28]
 8006138:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800613c:	429a      	cmp	r2, r3
 800613e:	d908      	bls.n	8006152 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006140:	4b61      	ldr	r3, [pc, #388]	@ (80062c8 <HAL_RCC_ClockConfig+0x244>)
 8006142:	69db      	ldr	r3, [r3, #28]
 8006144:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	495e      	ldr	r1, [pc, #376]	@ (80062c8 <HAL_RCC_ClockConfig+0x244>)
 800614e:	4313      	orrs	r3, r2
 8006150:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0320 	and.w	r3, r3, #32
 800615a:	2b00      	cmp	r3, #0
 800615c:	d010      	beq.n	8006180 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	69da      	ldr	r2, [r3, #28]
 8006162:	4b59      	ldr	r3, [pc, #356]	@ (80062c8 <HAL_RCC_ClockConfig+0x244>)
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800616a:	429a      	cmp	r2, r3
 800616c:	d908      	bls.n	8006180 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800616e:	4b56      	ldr	r3, [pc, #344]	@ (80062c8 <HAL_RCC_ClockConfig+0x244>)
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	4953      	ldr	r1, [pc, #332]	@ (80062c8 <HAL_RCC_ClockConfig+0x244>)
 800617c:	4313      	orrs	r3, r2
 800617e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d010      	beq.n	80061ae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68da      	ldr	r2, [r3, #12]
 8006190:	4b4d      	ldr	r3, [pc, #308]	@ (80062c8 <HAL_RCC_ClockConfig+0x244>)
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	f003 030f 	and.w	r3, r3, #15
 8006198:	429a      	cmp	r2, r3
 800619a:	d908      	bls.n	80061ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800619c:	4b4a      	ldr	r3, [pc, #296]	@ (80062c8 <HAL_RCC_ClockConfig+0x244>)
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	f023 020f 	bic.w	r2, r3, #15
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	4947      	ldr	r1, [pc, #284]	@ (80062c8 <HAL_RCC_ClockConfig+0x244>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d055      	beq.n	8006266 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80061ba:	4b43      	ldr	r3, [pc, #268]	@ (80062c8 <HAL_RCC_ClockConfig+0x244>)
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	4940      	ldr	r1, [pc, #256]	@ (80062c8 <HAL_RCC_ClockConfig+0x244>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d107      	bne.n	80061e4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80061d4:	4b3c      	ldr	r3, [pc, #240]	@ (80062c8 <HAL_RCC_ClockConfig+0x244>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d121      	bne.n	8006224 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e0f6      	b.n	80063d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	2b03      	cmp	r3, #3
 80061ea:	d107      	bne.n	80061fc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80061ec:	4b36      	ldr	r3, [pc, #216]	@ (80062c8 <HAL_RCC_ClockConfig+0x244>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d115      	bne.n	8006224 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e0ea      	b.n	80063d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d107      	bne.n	8006214 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006204:	4b30      	ldr	r3, [pc, #192]	@ (80062c8 <HAL_RCC_ClockConfig+0x244>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800620c:	2b00      	cmp	r3, #0
 800620e:	d109      	bne.n	8006224 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e0de      	b.n	80063d2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006214:	4b2c      	ldr	r3, [pc, #176]	@ (80062c8 <HAL_RCC_ClockConfig+0x244>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0304 	and.w	r3, r3, #4
 800621c:	2b00      	cmp	r3, #0
 800621e:	d101      	bne.n	8006224 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e0d6      	b.n	80063d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006224:	4b28      	ldr	r3, [pc, #160]	@ (80062c8 <HAL_RCC_ClockConfig+0x244>)
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	f023 0207 	bic.w	r2, r3, #7
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	4925      	ldr	r1, [pc, #148]	@ (80062c8 <HAL_RCC_ClockConfig+0x244>)
 8006232:	4313      	orrs	r3, r2
 8006234:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006236:	f7fb fec1 	bl	8001fbc <HAL_GetTick>
 800623a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800623c:	e00a      	b.n	8006254 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800623e:	f7fb febd 	bl	8001fbc <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	f241 3288 	movw	r2, #5000	@ 0x1388
 800624c:	4293      	cmp	r3, r2
 800624e:	d901      	bls.n	8006254 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e0be      	b.n	80063d2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006254:	4b1c      	ldr	r3, [pc, #112]	@ (80062c8 <HAL_RCC_ClockConfig+0x244>)
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	00db      	lsls	r3, r3, #3
 8006262:	429a      	cmp	r2, r3
 8006264:	d1eb      	bne.n	800623e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b00      	cmp	r3, #0
 8006270:	d010      	beq.n	8006294 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68da      	ldr	r2, [r3, #12]
 8006276:	4b14      	ldr	r3, [pc, #80]	@ (80062c8 <HAL_RCC_ClockConfig+0x244>)
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	f003 030f 	and.w	r3, r3, #15
 800627e:	429a      	cmp	r2, r3
 8006280:	d208      	bcs.n	8006294 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006282:	4b11      	ldr	r3, [pc, #68]	@ (80062c8 <HAL_RCC_ClockConfig+0x244>)
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	f023 020f 	bic.w	r2, r3, #15
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	490e      	ldr	r1, [pc, #56]	@ (80062c8 <HAL_RCC_ClockConfig+0x244>)
 8006290:	4313      	orrs	r3, r2
 8006292:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006294:	4b0b      	ldr	r3, [pc, #44]	@ (80062c4 <HAL_RCC_ClockConfig+0x240>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 030f 	and.w	r3, r3, #15
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d214      	bcs.n	80062cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062a2:	4b08      	ldr	r3, [pc, #32]	@ (80062c4 <HAL_RCC_ClockConfig+0x240>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f023 020f 	bic.w	r2, r3, #15
 80062aa:	4906      	ldr	r1, [pc, #24]	@ (80062c4 <HAL_RCC_ClockConfig+0x240>)
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062b2:	4b04      	ldr	r3, [pc, #16]	@ (80062c4 <HAL_RCC_ClockConfig+0x240>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 030f 	and.w	r3, r3, #15
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d005      	beq.n	80062cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e086      	b.n	80063d2 <HAL_RCC_ClockConfig+0x34e>
 80062c4:	52002000 	.word	0x52002000
 80062c8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d010      	beq.n	80062fa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	691a      	ldr	r2, [r3, #16]
 80062dc:	4b3f      	ldr	r3, [pc, #252]	@ (80063dc <HAL_RCC_ClockConfig+0x358>)
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d208      	bcs.n	80062fa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80062e8:	4b3c      	ldr	r3, [pc, #240]	@ (80063dc <HAL_RCC_ClockConfig+0x358>)
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	4939      	ldr	r1, [pc, #228]	@ (80063dc <HAL_RCC_ClockConfig+0x358>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0308 	and.w	r3, r3, #8
 8006302:	2b00      	cmp	r3, #0
 8006304:	d010      	beq.n	8006328 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	695a      	ldr	r2, [r3, #20]
 800630a:	4b34      	ldr	r3, [pc, #208]	@ (80063dc <HAL_RCC_ClockConfig+0x358>)
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006312:	429a      	cmp	r2, r3
 8006314:	d208      	bcs.n	8006328 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006316:	4b31      	ldr	r3, [pc, #196]	@ (80063dc <HAL_RCC_ClockConfig+0x358>)
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	492e      	ldr	r1, [pc, #184]	@ (80063dc <HAL_RCC_ClockConfig+0x358>)
 8006324:	4313      	orrs	r3, r2
 8006326:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0310 	and.w	r3, r3, #16
 8006330:	2b00      	cmp	r3, #0
 8006332:	d010      	beq.n	8006356 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	699a      	ldr	r2, [r3, #24]
 8006338:	4b28      	ldr	r3, [pc, #160]	@ (80063dc <HAL_RCC_ClockConfig+0x358>)
 800633a:	69db      	ldr	r3, [r3, #28]
 800633c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006340:	429a      	cmp	r2, r3
 8006342:	d208      	bcs.n	8006356 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006344:	4b25      	ldr	r3, [pc, #148]	@ (80063dc <HAL_RCC_ClockConfig+0x358>)
 8006346:	69db      	ldr	r3, [r3, #28]
 8006348:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	4922      	ldr	r1, [pc, #136]	@ (80063dc <HAL_RCC_ClockConfig+0x358>)
 8006352:	4313      	orrs	r3, r2
 8006354:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0320 	and.w	r3, r3, #32
 800635e:	2b00      	cmp	r3, #0
 8006360:	d010      	beq.n	8006384 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	69da      	ldr	r2, [r3, #28]
 8006366:	4b1d      	ldr	r3, [pc, #116]	@ (80063dc <HAL_RCC_ClockConfig+0x358>)
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800636e:	429a      	cmp	r2, r3
 8006370:	d208      	bcs.n	8006384 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006372:	4b1a      	ldr	r3, [pc, #104]	@ (80063dc <HAL_RCC_ClockConfig+0x358>)
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	4917      	ldr	r1, [pc, #92]	@ (80063dc <HAL_RCC_ClockConfig+0x358>)
 8006380:	4313      	orrs	r3, r2
 8006382:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006384:	f000 f834 	bl	80063f0 <HAL_RCC_GetSysClockFreq>
 8006388:	4602      	mov	r2, r0
 800638a:	4b14      	ldr	r3, [pc, #80]	@ (80063dc <HAL_RCC_ClockConfig+0x358>)
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	0a1b      	lsrs	r3, r3, #8
 8006390:	f003 030f 	and.w	r3, r3, #15
 8006394:	4912      	ldr	r1, [pc, #72]	@ (80063e0 <HAL_RCC_ClockConfig+0x35c>)
 8006396:	5ccb      	ldrb	r3, [r1, r3]
 8006398:	f003 031f 	and.w	r3, r3, #31
 800639c:	fa22 f303 	lsr.w	r3, r2, r3
 80063a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80063a2:	4b0e      	ldr	r3, [pc, #56]	@ (80063dc <HAL_RCC_ClockConfig+0x358>)
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	f003 030f 	and.w	r3, r3, #15
 80063aa:	4a0d      	ldr	r2, [pc, #52]	@ (80063e0 <HAL_RCC_ClockConfig+0x35c>)
 80063ac:	5cd3      	ldrb	r3, [r2, r3]
 80063ae:	f003 031f 	and.w	r3, r3, #31
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	fa22 f303 	lsr.w	r3, r2, r3
 80063b8:	4a0a      	ldr	r2, [pc, #40]	@ (80063e4 <HAL_RCC_ClockConfig+0x360>)
 80063ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80063bc:	4a0a      	ldr	r2, [pc, #40]	@ (80063e8 <HAL_RCC_ClockConfig+0x364>)
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80063c2:	4b0a      	ldr	r3, [pc, #40]	@ (80063ec <HAL_RCC_ClockConfig+0x368>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fa ff3e 	bl	8001248 <HAL_InitTick>
 80063cc:	4603      	mov	r3, r0
 80063ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3718      	adds	r7, #24
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	58024400 	.word	0x58024400
 80063e0:	0800e5e4 	.word	0x0800e5e4
 80063e4:	24000004 	.word	0x24000004
 80063e8:	24000000 	.word	0x24000000
 80063ec:	24000008 	.word	0x24000008

080063f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b089      	sub	sp, #36	@ 0x24
 80063f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063f6:	4bb3      	ldr	r3, [pc, #716]	@ (80066c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063fe:	2b18      	cmp	r3, #24
 8006400:	f200 8155 	bhi.w	80066ae <HAL_RCC_GetSysClockFreq+0x2be>
 8006404:	a201      	add	r2, pc, #4	@ (adr r2, 800640c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640a:	bf00      	nop
 800640c:	08006471 	.word	0x08006471
 8006410:	080066af 	.word	0x080066af
 8006414:	080066af 	.word	0x080066af
 8006418:	080066af 	.word	0x080066af
 800641c:	080066af 	.word	0x080066af
 8006420:	080066af 	.word	0x080066af
 8006424:	080066af 	.word	0x080066af
 8006428:	080066af 	.word	0x080066af
 800642c:	08006497 	.word	0x08006497
 8006430:	080066af 	.word	0x080066af
 8006434:	080066af 	.word	0x080066af
 8006438:	080066af 	.word	0x080066af
 800643c:	080066af 	.word	0x080066af
 8006440:	080066af 	.word	0x080066af
 8006444:	080066af 	.word	0x080066af
 8006448:	080066af 	.word	0x080066af
 800644c:	0800649d 	.word	0x0800649d
 8006450:	080066af 	.word	0x080066af
 8006454:	080066af 	.word	0x080066af
 8006458:	080066af 	.word	0x080066af
 800645c:	080066af 	.word	0x080066af
 8006460:	080066af 	.word	0x080066af
 8006464:	080066af 	.word	0x080066af
 8006468:	080066af 	.word	0x080066af
 800646c:	080064a3 	.word	0x080064a3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006470:	4b94      	ldr	r3, [pc, #592]	@ (80066c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0320 	and.w	r3, r3, #32
 8006478:	2b00      	cmp	r3, #0
 800647a:	d009      	beq.n	8006490 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800647c:	4b91      	ldr	r3, [pc, #580]	@ (80066c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	08db      	lsrs	r3, r3, #3
 8006482:	f003 0303 	and.w	r3, r3, #3
 8006486:	4a90      	ldr	r2, [pc, #576]	@ (80066c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006488:	fa22 f303 	lsr.w	r3, r2, r3
 800648c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800648e:	e111      	b.n	80066b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006490:	4b8d      	ldr	r3, [pc, #564]	@ (80066c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006492:	61bb      	str	r3, [r7, #24]
      break;
 8006494:	e10e      	b.n	80066b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006496:	4b8d      	ldr	r3, [pc, #564]	@ (80066cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006498:	61bb      	str	r3, [r7, #24]
      break;
 800649a:	e10b      	b.n	80066b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800649c:	4b8c      	ldr	r3, [pc, #560]	@ (80066d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800649e:	61bb      	str	r3, [r7, #24]
      break;
 80064a0:	e108      	b.n	80066b4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80064a2:	4b88      	ldr	r3, [pc, #544]	@ (80066c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a6:	f003 0303 	and.w	r3, r3, #3
 80064aa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80064ac:	4b85      	ldr	r3, [pc, #532]	@ (80066c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b0:	091b      	lsrs	r3, r3, #4
 80064b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064b6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80064b8:	4b82      	ldr	r3, [pc, #520]	@ (80066c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80064c2:	4b80      	ldr	r3, [pc, #512]	@ (80066c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064c6:	08db      	lsrs	r3, r3, #3
 80064c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	fb02 f303 	mul.w	r3, r2, r3
 80064d2:	ee07 3a90 	vmov	s15, r3
 80064d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064da:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 80e1 	beq.w	80066a8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	f000 8083 	beq.w	80065f4 <HAL_RCC_GetSysClockFreq+0x204>
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	f200 80a1 	bhi.w	8006638 <HAL_RCC_GetSysClockFreq+0x248>
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <HAL_RCC_GetSysClockFreq+0x114>
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d056      	beq.n	80065b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006502:	e099      	b.n	8006638 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006504:	4b6f      	ldr	r3, [pc, #444]	@ (80066c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0320 	and.w	r3, r3, #32
 800650c:	2b00      	cmp	r3, #0
 800650e:	d02d      	beq.n	800656c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006510:	4b6c      	ldr	r3, [pc, #432]	@ (80066c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	08db      	lsrs	r3, r3, #3
 8006516:	f003 0303 	and.w	r3, r3, #3
 800651a:	4a6b      	ldr	r2, [pc, #428]	@ (80066c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800651c:	fa22 f303 	lsr.w	r3, r2, r3
 8006520:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	ee07 3a90 	vmov	s15, r3
 8006528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	ee07 3a90 	vmov	s15, r3
 8006532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800653a:	4b62      	ldr	r3, [pc, #392]	@ (80066c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800653c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800653e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006542:	ee07 3a90 	vmov	s15, r3
 8006546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800654a:	ed97 6a02 	vldr	s12, [r7, #8]
 800654e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80066d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800655a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800655e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006566:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800656a:	e087      	b.n	800667c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	ee07 3a90 	vmov	s15, r3
 8006572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006576:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80066d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800657a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800657e:	4b51      	ldr	r3, [pc, #324]	@ (80066c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006586:	ee07 3a90 	vmov	s15, r3
 800658a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800658e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006592:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80066d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800659a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800659e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80065ae:	e065      	b.n	800667c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	ee07 3a90 	vmov	s15, r3
 80065b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ba:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80066dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80065be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065c2:	4b40      	ldr	r3, [pc, #256]	@ (80066c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ca:	ee07 3a90 	vmov	s15, r3
 80065ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80065d6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80066d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80065f2:	e043      	b.n	800667c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	ee07 3a90 	vmov	s15, r3
 80065fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065fe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80066e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006606:	4b2f      	ldr	r3, [pc, #188]	@ (80066c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800660a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800660e:	ee07 3a90 	vmov	s15, r3
 8006612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006616:	ed97 6a02 	vldr	s12, [r7, #8]
 800661a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80066d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800661e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006626:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800662a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800662e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006632:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006636:	e021      	b.n	800667c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	ee07 3a90 	vmov	s15, r3
 800663e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006642:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80066dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8006646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800664a:	4b1e      	ldr	r3, [pc, #120]	@ (80066c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800664c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800664e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006652:	ee07 3a90 	vmov	s15, r3
 8006656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800665a:	ed97 6a02 	vldr	s12, [r7, #8]
 800665e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80066d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800666a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800666e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006676:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800667a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800667c:	4b11      	ldr	r3, [pc, #68]	@ (80066c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800667e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006680:	0a5b      	lsrs	r3, r3, #9
 8006682:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006686:	3301      	adds	r3, #1
 8006688:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	ee07 3a90 	vmov	s15, r3
 8006690:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006694:	edd7 6a07 	vldr	s13, [r7, #28]
 8006698:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800669c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066a0:	ee17 3a90 	vmov	r3, s15
 80066a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80066a6:	e005      	b.n	80066b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80066a8:	2300      	movs	r3, #0
 80066aa:	61bb      	str	r3, [r7, #24]
      break;
 80066ac:	e002      	b.n	80066b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80066ae:	4b07      	ldr	r3, [pc, #28]	@ (80066cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80066b0:	61bb      	str	r3, [r7, #24]
      break;
 80066b2:	bf00      	nop
  }

  return sysclockfreq;
 80066b4:	69bb      	ldr	r3, [r7, #24]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3724      	adds	r7, #36	@ 0x24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	58024400 	.word	0x58024400
 80066c8:	03d09000 	.word	0x03d09000
 80066cc:	003d0900 	.word	0x003d0900
 80066d0:	016e3600 	.word	0x016e3600
 80066d4:	46000000 	.word	0x46000000
 80066d8:	4c742400 	.word	0x4c742400
 80066dc:	4a742400 	.word	0x4a742400
 80066e0:	4bb71b00 	.word	0x4bb71b00

080066e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80066ea:	f7ff fe81 	bl	80063f0 <HAL_RCC_GetSysClockFreq>
 80066ee:	4602      	mov	r2, r0
 80066f0:	4b10      	ldr	r3, [pc, #64]	@ (8006734 <HAL_RCC_GetHCLKFreq+0x50>)
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	0a1b      	lsrs	r3, r3, #8
 80066f6:	f003 030f 	and.w	r3, r3, #15
 80066fa:	490f      	ldr	r1, [pc, #60]	@ (8006738 <HAL_RCC_GetHCLKFreq+0x54>)
 80066fc:	5ccb      	ldrb	r3, [r1, r3]
 80066fe:	f003 031f 	and.w	r3, r3, #31
 8006702:	fa22 f303 	lsr.w	r3, r2, r3
 8006706:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006708:	4b0a      	ldr	r3, [pc, #40]	@ (8006734 <HAL_RCC_GetHCLKFreq+0x50>)
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	f003 030f 	and.w	r3, r3, #15
 8006710:	4a09      	ldr	r2, [pc, #36]	@ (8006738 <HAL_RCC_GetHCLKFreq+0x54>)
 8006712:	5cd3      	ldrb	r3, [r2, r3]
 8006714:	f003 031f 	and.w	r3, r3, #31
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	fa22 f303 	lsr.w	r3, r2, r3
 800671e:	4a07      	ldr	r2, [pc, #28]	@ (800673c <HAL_RCC_GetHCLKFreq+0x58>)
 8006720:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006722:	4a07      	ldr	r2, [pc, #28]	@ (8006740 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006728:	4b04      	ldr	r3, [pc, #16]	@ (800673c <HAL_RCC_GetHCLKFreq+0x58>)
 800672a:	681b      	ldr	r3, [r3, #0]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	58024400 	.word	0x58024400
 8006738:	0800e5e4 	.word	0x0800e5e4
 800673c:	24000004 	.word	0x24000004
 8006740:	24000000 	.word	0x24000000

08006744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006748:	f7ff ffcc 	bl	80066e4 <HAL_RCC_GetHCLKFreq>
 800674c:	4602      	mov	r2, r0
 800674e:	4b06      	ldr	r3, [pc, #24]	@ (8006768 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	091b      	lsrs	r3, r3, #4
 8006754:	f003 0307 	and.w	r3, r3, #7
 8006758:	4904      	ldr	r1, [pc, #16]	@ (800676c <HAL_RCC_GetPCLK1Freq+0x28>)
 800675a:	5ccb      	ldrb	r3, [r1, r3]
 800675c:	f003 031f 	and.w	r3, r3, #31
 8006760:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006764:	4618      	mov	r0, r3
 8006766:	bd80      	pop	{r7, pc}
 8006768:	58024400 	.word	0x58024400
 800676c:	0800e5e4 	.word	0x0800e5e4

08006770 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006774:	f7ff ffb6 	bl	80066e4 <HAL_RCC_GetHCLKFreq>
 8006778:	4602      	mov	r2, r0
 800677a:	4b06      	ldr	r3, [pc, #24]	@ (8006794 <HAL_RCC_GetPCLK2Freq+0x24>)
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	0a1b      	lsrs	r3, r3, #8
 8006780:	f003 0307 	and.w	r3, r3, #7
 8006784:	4904      	ldr	r1, [pc, #16]	@ (8006798 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006786:	5ccb      	ldrb	r3, [r1, r3]
 8006788:	f003 031f 	and.w	r3, r3, #31
 800678c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006790:	4618      	mov	r0, r3
 8006792:	bd80      	pop	{r7, pc}
 8006794:	58024400 	.word	0x58024400
 8006798:	0800e5e4 	.word	0x0800e5e4

0800679c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	223f      	movs	r2, #63	@ 0x3f
 80067aa:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80067ac:	4b1a      	ldr	r3, [pc, #104]	@ (8006818 <HAL_RCC_GetClockConfig+0x7c>)
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	f003 0207 	and.w	r2, r3, #7
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80067b8:	4b17      	ldr	r3, [pc, #92]	@ (8006818 <HAL_RCC_GetClockConfig+0x7c>)
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80067c4:	4b14      	ldr	r3, [pc, #80]	@ (8006818 <HAL_RCC_GetClockConfig+0x7c>)
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	f003 020f 	and.w	r2, r3, #15
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80067d0:	4b11      	ldr	r3, [pc, #68]	@ (8006818 <HAL_RCC_GetClockConfig+0x7c>)
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80067dc:	4b0e      	ldr	r3, [pc, #56]	@ (8006818 <HAL_RCC_GetClockConfig+0x7c>)
 80067de:	69db      	ldr	r3, [r3, #28]
 80067e0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80067e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006818 <HAL_RCC_GetClockConfig+0x7c>)
 80067ea:	69db      	ldr	r3, [r3, #28]
 80067ec:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80067f4:	4b08      	ldr	r3, [pc, #32]	@ (8006818 <HAL_RCC_GetClockConfig+0x7c>)
 80067f6:	6a1b      	ldr	r3, [r3, #32]
 80067f8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006800:	4b06      	ldr	r3, [pc, #24]	@ (800681c <HAL_RCC_GetClockConfig+0x80>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 020f 	and.w	r2, r3, #15
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	601a      	str	r2, [r3, #0]
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	58024400 	.word	0x58024400
 800681c:	52002000 	.word	0x52002000

08006820 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006824:	b0c6      	sub	sp, #280	@ 0x118
 8006826:	af00      	add	r7, sp, #0
 8006828:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800682c:	2300      	movs	r3, #0
 800682e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006832:	2300      	movs	r3, #0
 8006834:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800683c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006840:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006844:	2500      	movs	r5, #0
 8006846:	ea54 0305 	orrs.w	r3, r4, r5
 800684a:	d049      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800684c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006850:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006852:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006856:	d02f      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006858:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800685c:	d828      	bhi.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800685e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006862:	d01a      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006864:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006868:	d822      	bhi.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800686e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006872:	d007      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006874:	e01c      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006876:	4bab      	ldr	r3, [pc, #684]	@ (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687a:	4aaa      	ldr	r2, [pc, #680]	@ (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800687c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006880:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006882:	e01a      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006888:	3308      	adds	r3, #8
 800688a:	2102      	movs	r1, #2
 800688c:	4618      	mov	r0, r3
 800688e:	f001 fc25 	bl	80080dc <RCCEx_PLL2_Config>
 8006892:	4603      	mov	r3, r0
 8006894:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006898:	e00f      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800689a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800689e:	3328      	adds	r3, #40	@ 0x28
 80068a0:	2102      	movs	r1, #2
 80068a2:	4618      	mov	r0, r3
 80068a4:	f001 fccc 	bl	8008240 <RCCEx_PLL3_Config>
 80068a8:	4603      	mov	r3, r0
 80068aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80068ae:	e004      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80068b6:	e000      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80068b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10a      	bne.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80068c2:	4b98      	ldr	r3, [pc, #608]	@ (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80068c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80068ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068d0:	4a94      	ldr	r2, [pc, #592]	@ (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80068d2:	430b      	orrs	r3, r1
 80068d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80068d6:	e003      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80068e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80068ec:	f04f 0900 	mov.w	r9, #0
 80068f0:	ea58 0309 	orrs.w	r3, r8, r9
 80068f4:	d047      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80068f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068fc:	2b04      	cmp	r3, #4
 80068fe:	d82a      	bhi.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006900:	a201      	add	r2, pc, #4	@ (adr r2, 8006908 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006906:	bf00      	nop
 8006908:	0800691d 	.word	0x0800691d
 800690c:	0800692b 	.word	0x0800692b
 8006910:	08006941 	.word	0x08006941
 8006914:	0800695f 	.word	0x0800695f
 8006918:	0800695f 	.word	0x0800695f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800691c:	4b81      	ldr	r3, [pc, #516]	@ (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800691e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006920:	4a80      	ldr	r2, [pc, #512]	@ (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006926:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006928:	e01a      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800692a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800692e:	3308      	adds	r3, #8
 8006930:	2100      	movs	r1, #0
 8006932:	4618      	mov	r0, r3
 8006934:	f001 fbd2 	bl	80080dc <RCCEx_PLL2_Config>
 8006938:	4603      	mov	r3, r0
 800693a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800693e:	e00f      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006944:	3328      	adds	r3, #40	@ 0x28
 8006946:	2100      	movs	r1, #0
 8006948:	4618      	mov	r0, r3
 800694a:	f001 fc79 	bl	8008240 <RCCEx_PLL3_Config>
 800694e:	4603      	mov	r3, r0
 8006950:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006954:	e004      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800695c:	e000      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800695e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006960:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006964:	2b00      	cmp	r3, #0
 8006966:	d10a      	bne.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006968:	4b6e      	ldr	r3, [pc, #440]	@ (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800696a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800696c:	f023 0107 	bic.w	r1, r3, #7
 8006970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006976:	4a6b      	ldr	r2, [pc, #428]	@ (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006978:	430b      	orrs	r3, r1
 800697a:	6513      	str	r3, [r2, #80]	@ 0x50
 800697c:	e003      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800697e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006982:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800698a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8006992:	f04f 0b00 	mov.w	fp, #0
 8006996:	ea5a 030b 	orrs.w	r3, sl, fp
 800699a:	d05b      	beq.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800699c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80069a4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80069a8:	d03b      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80069aa:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80069ae:	d834      	bhi.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80069b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80069b4:	d037      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80069b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80069ba:	d82e      	bhi.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80069bc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80069c0:	d033      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80069c2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80069c6:	d828      	bhi.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80069c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069cc:	d01a      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80069ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069d2:	d822      	bhi.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d003      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80069d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069dc:	d007      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80069de:	e01c      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069e0:	4b50      	ldr	r3, [pc, #320]	@ (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80069e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e4:	4a4f      	ldr	r2, [pc, #316]	@ (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80069e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069ec:	e01e      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069f2:	3308      	adds	r3, #8
 80069f4:	2100      	movs	r1, #0
 80069f6:	4618      	mov	r0, r3
 80069f8:	f001 fb70 	bl	80080dc <RCCEx_PLL2_Config>
 80069fc:	4603      	mov	r3, r0
 80069fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006a02:	e013      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a08:	3328      	adds	r3, #40	@ 0x28
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f001 fc17 	bl	8008240 <RCCEx_PLL3_Config>
 8006a12:	4603      	mov	r3, r0
 8006a14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a18:	e008      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a20:	e004      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006a22:	bf00      	nop
 8006a24:	e002      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006a26:	bf00      	nop
 8006a28:	e000      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006a2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d10b      	bne.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006a34:	4b3b      	ldr	r3, [pc, #236]	@ (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a38:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006a44:	4a37      	ldr	r2, [pc, #220]	@ (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a46:	430b      	orrs	r3, r1
 8006a48:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a4a:	e003      	b.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006a60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006a64:	2300      	movs	r3, #0
 8006a66:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006a6a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006a6e:	460b      	mov	r3, r1
 8006a70:	4313      	orrs	r3, r2
 8006a72:	d05d      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a78:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006a7c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006a80:	d03b      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006a82:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006a86:	d834      	bhi.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006a88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a8c:	d037      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006a8e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a92:	d82e      	bhi.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006a94:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006a98:	d033      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006a9a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006a9e:	d828      	bhi.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006aa0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006aa4:	d01a      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006aa6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006aaa:	d822      	bhi.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d003      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006ab0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ab4:	d007      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006ab6:	e01c      	b.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006abc:	4a19      	ldr	r2, [pc, #100]	@ (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006abe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ac2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ac4:	e01e      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aca:	3308      	adds	r3, #8
 8006acc:	2100      	movs	r1, #0
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f001 fb04 	bl	80080dc <RCCEx_PLL2_Config>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006ada:	e013      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ae0:	3328      	adds	r3, #40	@ 0x28
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f001 fbab 	bl	8008240 <RCCEx_PLL3_Config>
 8006aea:	4603      	mov	r3, r0
 8006aec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006af0:	e008      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006af8:	e004      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006afa:	bf00      	nop
 8006afc:	e002      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006afe:	bf00      	nop
 8006b00:	e000      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006b02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10d      	bne.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006b0c:	4b05      	ldr	r3, [pc, #20]	@ (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b10:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b18:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006b1c:	4a01      	ldr	r2, [pc, #4]	@ (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b1e:	430b      	orrs	r3, r1
 8006b20:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b22:	e005      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006b24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b38:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006b3c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006b40:	2300      	movs	r3, #0
 8006b42:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b46:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	d03a      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b56:	2b30      	cmp	r3, #48	@ 0x30
 8006b58:	d01f      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006b5a:	2b30      	cmp	r3, #48	@ 0x30
 8006b5c:	d819      	bhi.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006b5e:	2b20      	cmp	r3, #32
 8006b60:	d00c      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006b62:	2b20      	cmp	r3, #32
 8006b64:	d815      	bhi.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d019      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006b6a:	2b10      	cmp	r3, #16
 8006b6c:	d111      	bne.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b6e:	4baa      	ldr	r3, [pc, #680]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b72:	4aa9      	ldr	r2, [pc, #676]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006b7a:	e011      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b80:	3308      	adds	r3, #8
 8006b82:	2102      	movs	r1, #2
 8006b84:	4618      	mov	r0, r3
 8006b86:	f001 faa9 	bl	80080dc <RCCEx_PLL2_Config>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006b90:	e006      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b98:	e002      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006b9a:	bf00      	nop
 8006b9c:	e000      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006b9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ba0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10a      	bne.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006ba8:	4b9b      	ldr	r3, [pc, #620]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006baa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bac:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bb6:	4a98      	ldr	r2, [pc, #608]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006bb8:	430b      	orrs	r3, r1
 8006bba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006bbc:	e003      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bbe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bc2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bce:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006bd2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006bdc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006be0:	460b      	mov	r3, r1
 8006be2:	4313      	orrs	r3, r2
 8006be4:	d051      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bf0:	d035      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006bf2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bf6:	d82e      	bhi.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006bf8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006bfc:	d031      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006bfe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c02:	d828      	bhi.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006c04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c08:	d01a      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006c0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c0e:	d822      	bhi.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d003      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006c14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c18:	d007      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006c1a:	e01c      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c1c:	4b7e      	ldr	r3, [pc, #504]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c20:	4a7d      	ldr	r2, [pc, #500]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c28:	e01c      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2e:	3308      	adds	r3, #8
 8006c30:	2100      	movs	r1, #0
 8006c32:	4618      	mov	r0, r3
 8006c34:	f001 fa52 	bl	80080dc <RCCEx_PLL2_Config>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c3e:	e011      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c44:	3328      	adds	r3, #40	@ 0x28
 8006c46:	2100      	movs	r1, #0
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f001 faf9 	bl	8008240 <RCCEx_PLL3_Config>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c54:	e006      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c5c:	e002      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006c5e:	bf00      	nop
 8006c60:	e000      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d10a      	bne.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006c6c:	4b6a      	ldr	r3, [pc, #424]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c70:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c7a:	4a67      	ldr	r2, [pc, #412]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c7c:	430b      	orrs	r3, r1
 8006c7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c80:	e003      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c86:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c92:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006c96:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ca0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	d053      	beq.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006cb4:	d033      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006cb6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006cba:	d82c      	bhi.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006cbc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006cc0:	d02f      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006cc2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006cc6:	d826      	bhi.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006cc8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ccc:	d02b      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006cce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006cd2:	d820      	bhi.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006cd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cd8:	d012      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006cda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cde:	d81a      	bhi.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d022      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ce8:	d115      	bne.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cee:	3308      	adds	r3, #8
 8006cf0:	2101      	movs	r1, #1
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f001 f9f2 	bl	80080dc <RCCEx_PLL2_Config>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006cfe:	e015      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d04:	3328      	adds	r3, #40	@ 0x28
 8006d06:	2101      	movs	r1, #1
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f001 fa99 	bl	8008240 <RCCEx_PLL3_Config>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006d14:	e00a      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d1c:	e006      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006d1e:	bf00      	nop
 8006d20:	e004      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006d22:	bf00      	nop
 8006d24:	e002      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006d26:	bf00      	nop
 8006d28:	e000      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006d2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10a      	bne.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006d34:	4b38      	ldr	r3, [pc, #224]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d38:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d42:	4a35      	ldr	r2, [pc, #212]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d44:	430b      	orrs	r3, r1
 8006d46:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d48:	e003      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d4e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006d5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d62:	2300      	movs	r3, #0
 8006d64:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006d68:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	d058      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006d7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d7e:	d033      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006d80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d84:	d82c      	bhi.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d8a:	d02f      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d90:	d826      	bhi.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006d92:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d96:	d02b      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006d98:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d9c:	d820      	bhi.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006d9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006da2:	d012      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006da4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006da8:	d81a      	bhi.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d022      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006dae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006db2:	d115      	bne.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db8:	3308      	adds	r3, #8
 8006dba:	2101      	movs	r1, #1
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f001 f98d 	bl	80080dc <RCCEx_PLL2_Config>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006dc8:	e015      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dce:	3328      	adds	r3, #40	@ 0x28
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f001 fa34 	bl	8008240 <RCCEx_PLL3_Config>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006dde:	e00a      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006de6:	e006      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006de8:	bf00      	nop
 8006dea:	e004      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006dec:	bf00      	nop
 8006dee:	e002      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006df0:	bf00      	nop
 8006df2:	e000      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006df6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10e      	bne.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006dfe:	4b06      	ldr	r3, [pc, #24]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e02:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006e0e:	4a02      	ldr	r2, [pc, #8]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e10:	430b      	orrs	r3, r1
 8006e12:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e14:	e006      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006e16:	bf00      	nop
 8006e18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006e30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e34:	2300      	movs	r3, #0
 8006e36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006e3a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006e3e:	460b      	mov	r3, r1
 8006e40:	4313      	orrs	r3, r2
 8006e42:	d037      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e4e:	d00e      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006e50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e54:	d816      	bhi.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d018      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006e5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e5e:	d111      	bne.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e60:	4bc4      	ldr	r3, [pc, #784]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e64:	4ac3      	ldr	r2, [pc, #780]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006e6c:	e00f      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e72:	3308      	adds	r3, #8
 8006e74:	2101      	movs	r1, #1
 8006e76:	4618      	mov	r0, r3
 8006e78:	f001 f930 	bl	80080dc <RCCEx_PLL2_Config>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006e82:	e004      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e8a:	e000      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006e8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d10a      	bne.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e96:	4bb7      	ldr	r3, [pc, #732]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e9a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ea2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ea4:	4ab3      	ldr	r2, [pc, #716]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ea6:	430b      	orrs	r3, r1
 8006ea8:	6513      	str	r3, [r2, #80]	@ 0x50
 8006eaa:	e003      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006eb0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006ec0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006eca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	d039      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ed8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	d81c      	bhi.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006ede:	a201      	add	r2, pc, #4	@ (adr r2, 8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee4:	08006f21 	.word	0x08006f21
 8006ee8:	08006ef5 	.word	0x08006ef5
 8006eec:	08006f03 	.word	0x08006f03
 8006ef0:	08006f21 	.word	0x08006f21
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ef4:	4b9f      	ldr	r3, [pc, #636]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef8:	4a9e      	ldr	r2, [pc, #632]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006efa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006efe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006f00:	e00f      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f06:	3308      	adds	r3, #8
 8006f08:	2102      	movs	r1, #2
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f001 f8e6 	bl	80080dc <RCCEx_PLL2_Config>
 8006f10:	4603      	mov	r3, r0
 8006f12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006f16:	e004      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f1e:	e000      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006f20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10a      	bne.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006f2a:	4b92      	ldr	r3, [pc, #584]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f2e:	f023 0103 	bic.w	r1, r3, #3
 8006f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f38:	4a8e      	ldr	r2, [pc, #568]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f3a:	430b      	orrs	r3, r1
 8006f3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006f3e:	e003      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f50:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006f54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f58:	2300      	movs	r3, #0
 8006f5a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006f5e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006f62:	460b      	mov	r3, r1
 8006f64:	4313      	orrs	r3, r2
 8006f66:	f000 8099 	beq.w	800709c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f6a:	4b83      	ldr	r3, [pc, #524]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a82      	ldr	r2, [pc, #520]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006f70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f76:	f7fb f821 	bl	8001fbc <HAL_GetTick>
 8006f7a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f7e:	e00b      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f80:	f7fb f81c 	bl	8001fbc <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	2b64      	cmp	r3, #100	@ 0x64
 8006f8e:	d903      	bls.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f96:	e005      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f98:	4b77      	ldr	r3, [pc, #476]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d0ed      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006fa4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d173      	bne.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006fac:	4b71      	ldr	r3, [pc, #452]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006fb8:	4053      	eors	r3, r2
 8006fba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d015      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006fc2:	4b6c      	ldr	r3, [pc, #432]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fca:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fce:	4b69      	ldr	r3, [pc, #420]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fd2:	4a68      	ldr	r2, [pc, #416]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fd8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006fda:	4b66      	ldr	r3, [pc, #408]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fde:	4a65      	ldr	r2, [pc, #404]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fe0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fe4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006fe6:	4a63      	ldr	r2, [pc, #396]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fec:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ff2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006ff6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ffa:	d118      	bne.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ffc:	f7fa ffde 	bl	8001fbc <HAL_GetTick>
 8007000:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007004:	e00d      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007006:	f7fa ffd9 	bl	8001fbc <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007010:	1ad2      	subs	r2, r2, r3
 8007012:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007016:	429a      	cmp	r2, r3
 8007018:	d903      	bls.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007020:	e005      	b.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007022:	4b54      	ldr	r3, [pc, #336]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007026:	f003 0302 	and.w	r3, r3, #2
 800702a:	2b00      	cmp	r3, #0
 800702c:	d0eb      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800702e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007032:	2b00      	cmp	r3, #0
 8007034:	d129      	bne.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007036:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800703a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800703e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007042:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007046:	d10e      	bne.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007048:	4b4a      	ldr	r3, [pc, #296]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007054:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007058:	091a      	lsrs	r2, r3, #4
 800705a:	4b48      	ldr	r3, [pc, #288]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800705c:	4013      	ands	r3, r2
 800705e:	4a45      	ldr	r2, [pc, #276]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007060:	430b      	orrs	r3, r1
 8007062:	6113      	str	r3, [r2, #16]
 8007064:	e005      	b.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007066:	4b43      	ldr	r3, [pc, #268]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	4a42      	ldr	r2, [pc, #264]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800706c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007070:	6113      	str	r3, [r2, #16]
 8007072:	4b40      	ldr	r3, [pc, #256]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007074:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007076:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800707a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800707e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007082:	4a3c      	ldr	r2, [pc, #240]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007084:	430b      	orrs	r3, r1
 8007086:	6713      	str	r3, [r2, #112]	@ 0x70
 8007088:	e008      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800708a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800708e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8007092:	e003      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007094:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007098:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800709c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a4:	f002 0301 	and.w	r3, r2, #1
 80070a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070ac:	2300      	movs	r3, #0
 80070ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80070b2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80070b6:	460b      	mov	r3, r1
 80070b8:	4313      	orrs	r3, r2
 80070ba:	f000 808f 	beq.w	80071dc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80070be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070c4:	2b28      	cmp	r3, #40	@ 0x28
 80070c6:	d871      	bhi.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80070c8:	a201      	add	r2, pc, #4	@ (adr r2, 80070d0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80070ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ce:	bf00      	nop
 80070d0:	080071b5 	.word	0x080071b5
 80070d4:	080071ad 	.word	0x080071ad
 80070d8:	080071ad 	.word	0x080071ad
 80070dc:	080071ad 	.word	0x080071ad
 80070e0:	080071ad 	.word	0x080071ad
 80070e4:	080071ad 	.word	0x080071ad
 80070e8:	080071ad 	.word	0x080071ad
 80070ec:	080071ad 	.word	0x080071ad
 80070f0:	08007181 	.word	0x08007181
 80070f4:	080071ad 	.word	0x080071ad
 80070f8:	080071ad 	.word	0x080071ad
 80070fc:	080071ad 	.word	0x080071ad
 8007100:	080071ad 	.word	0x080071ad
 8007104:	080071ad 	.word	0x080071ad
 8007108:	080071ad 	.word	0x080071ad
 800710c:	080071ad 	.word	0x080071ad
 8007110:	08007197 	.word	0x08007197
 8007114:	080071ad 	.word	0x080071ad
 8007118:	080071ad 	.word	0x080071ad
 800711c:	080071ad 	.word	0x080071ad
 8007120:	080071ad 	.word	0x080071ad
 8007124:	080071ad 	.word	0x080071ad
 8007128:	080071ad 	.word	0x080071ad
 800712c:	080071ad 	.word	0x080071ad
 8007130:	080071b5 	.word	0x080071b5
 8007134:	080071ad 	.word	0x080071ad
 8007138:	080071ad 	.word	0x080071ad
 800713c:	080071ad 	.word	0x080071ad
 8007140:	080071ad 	.word	0x080071ad
 8007144:	080071ad 	.word	0x080071ad
 8007148:	080071ad 	.word	0x080071ad
 800714c:	080071ad 	.word	0x080071ad
 8007150:	080071b5 	.word	0x080071b5
 8007154:	080071ad 	.word	0x080071ad
 8007158:	080071ad 	.word	0x080071ad
 800715c:	080071ad 	.word	0x080071ad
 8007160:	080071ad 	.word	0x080071ad
 8007164:	080071ad 	.word	0x080071ad
 8007168:	080071ad 	.word	0x080071ad
 800716c:	080071ad 	.word	0x080071ad
 8007170:	080071b5 	.word	0x080071b5
 8007174:	58024400 	.word	0x58024400
 8007178:	58024800 	.word	0x58024800
 800717c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007184:	3308      	adds	r3, #8
 8007186:	2101      	movs	r1, #1
 8007188:	4618      	mov	r0, r3
 800718a:	f000 ffa7 	bl	80080dc <RCCEx_PLL2_Config>
 800718e:	4603      	mov	r3, r0
 8007190:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007194:	e00f      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800719a:	3328      	adds	r3, #40	@ 0x28
 800719c:	2101      	movs	r1, #1
 800719e:	4618      	mov	r0, r3
 80071a0:	f001 f84e 	bl	8008240 <RCCEx_PLL3_Config>
 80071a4:	4603      	mov	r3, r0
 80071a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80071aa:	e004      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80071b2:	e000      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80071b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10a      	bne.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80071be:	4bbf      	ldr	r3, [pc, #764]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80071c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071c2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80071c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071cc:	4abb      	ldr	r2, [pc, #748]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80071ce:	430b      	orrs	r3, r1
 80071d0:	6553      	str	r3, [r2, #84]	@ 0x54
 80071d2:	e003      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80071dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e4:	f002 0302 	and.w	r3, r2, #2
 80071e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80071ec:	2300      	movs	r3, #0
 80071ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80071f2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80071f6:	460b      	mov	r3, r1
 80071f8:	4313      	orrs	r3, r2
 80071fa:	d041      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80071fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007202:	2b05      	cmp	r3, #5
 8007204:	d824      	bhi.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007206:	a201      	add	r2, pc, #4	@ (adr r2, 800720c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720c:	08007259 	.word	0x08007259
 8007210:	08007225 	.word	0x08007225
 8007214:	0800723b 	.word	0x0800723b
 8007218:	08007259 	.word	0x08007259
 800721c:	08007259 	.word	0x08007259
 8007220:	08007259 	.word	0x08007259
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007228:	3308      	adds	r3, #8
 800722a:	2101      	movs	r1, #1
 800722c:	4618      	mov	r0, r3
 800722e:	f000 ff55 	bl	80080dc <RCCEx_PLL2_Config>
 8007232:	4603      	mov	r3, r0
 8007234:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007238:	e00f      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800723a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800723e:	3328      	adds	r3, #40	@ 0x28
 8007240:	2101      	movs	r1, #1
 8007242:	4618      	mov	r0, r3
 8007244:	f000 fffc 	bl	8008240 <RCCEx_PLL3_Config>
 8007248:	4603      	mov	r3, r0
 800724a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800724e:	e004      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007256:	e000      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800725a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10a      	bne.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007262:	4b96      	ldr	r3, [pc, #600]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007266:	f023 0107 	bic.w	r1, r3, #7
 800726a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800726e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007270:	4a92      	ldr	r2, [pc, #584]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007272:	430b      	orrs	r3, r1
 8007274:	6553      	str	r3, [r2, #84]	@ 0x54
 8007276:	e003      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007278:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800727c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007288:	f002 0304 	and.w	r3, r2, #4
 800728c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007290:	2300      	movs	r3, #0
 8007292:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007296:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800729a:	460b      	mov	r3, r1
 800729c:	4313      	orrs	r3, r2
 800729e:	d044      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80072a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072a8:	2b05      	cmp	r3, #5
 80072aa:	d825      	bhi.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80072ac:	a201      	add	r2, pc, #4	@ (adr r2, 80072b4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80072ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b2:	bf00      	nop
 80072b4:	08007301 	.word	0x08007301
 80072b8:	080072cd 	.word	0x080072cd
 80072bc:	080072e3 	.word	0x080072e3
 80072c0:	08007301 	.word	0x08007301
 80072c4:	08007301 	.word	0x08007301
 80072c8:	08007301 	.word	0x08007301
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072d0:	3308      	adds	r3, #8
 80072d2:	2101      	movs	r1, #1
 80072d4:	4618      	mov	r0, r3
 80072d6:	f000 ff01 	bl	80080dc <RCCEx_PLL2_Config>
 80072da:	4603      	mov	r3, r0
 80072dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80072e0:	e00f      	b.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072e6:	3328      	adds	r3, #40	@ 0x28
 80072e8:	2101      	movs	r1, #1
 80072ea:	4618      	mov	r0, r3
 80072ec:	f000 ffa8 	bl	8008240 <RCCEx_PLL3_Config>
 80072f0:	4603      	mov	r3, r0
 80072f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80072f6:	e004      	b.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80072fe:	e000      	b.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007300:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007302:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10b      	bne.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800730a:	4b6c      	ldr	r3, [pc, #432]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800730c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800730e:	f023 0107 	bic.w	r1, r3, #7
 8007312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800731a:	4a68      	ldr	r2, [pc, #416]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800731c:	430b      	orrs	r3, r1
 800731e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007320:	e003      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007322:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007326:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800732a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800732e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007332:	f002 0320 	and.w	r3, r2, #32
 8007336:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800733a:	2300      	movs	r3, #0
 800733c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007340:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007344:	460b      	mov	r3, r1
 8007346:	4313      	orrs	r3, r2
 8007348:	d055      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800734a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800734e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007352:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007356:	d033      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007358:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800735c:	d82c      	bhi.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800735e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007362:	d02f      	beq.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007368:	d826      	bhi.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800736a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800736e:	d02b      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007370:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007374:	d820      	bhi.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007376:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800737a:	d012      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800737c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007380:	d81a      	bhi.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007382:	2b00      	cmp	r3, #0
 8007384:	d022      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007386:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800738a:	d115      	bne.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800738c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007390:	3308      	adds	r3, #8
 8007392:	2100      	movs	r1, #0
 8007394:	4618      	mov	r0, r3
 8007396:	f000 fea1 	bl	80080dc <RCCEx_PLL2_Config>
 800739a:	4603      	mov	r3, r0
 800739c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80073a0:	e015      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a6:	3328      	adds	r3, #40	@ 0x28
 80073a8:	2102      	movs	r1, #2
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 ff48 	bl	8008240 <RCCEx_PLL3_Config>
 80073b0:	4603      	mov	r3, r0
 80073b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80073b6:	e00a      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80073be:	e006      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80073c0:	bf00      	nop
 80073c2:	e004      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80073c4:	bf00      	nop
 80073c6:	e002      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80073c8:	bf00      	nop
 80073ca:	e000      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80073cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d10b      	bne.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80073d6:	4b39      	ldr	r3, [pc, #228]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80073d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073da:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80073de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073e6:	4a35      	ldr	r2, [pc, #212]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80073e8:	430b      	orrs	r3, r1
 80073ea:	6553      	str	r3, [r2, #84]	@ 0x54
 80073ec:	e003      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80073f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007402:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007406:	2300      	movs	r3, #0
 8007408:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800740c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007410:	460b      	mov	r3, r1
 8007412:	4313      	orrs	r3, r2
 8007414:	d058      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800741a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800741e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007422:	d033      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007424:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007428:	d82c      	bhi.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800742a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800742e:	d02f      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007430:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007434:	d826      	bhi.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007436:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800743a:	d02b      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800743c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007440:	d820      	bhi.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007442:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007446:	d012      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007448:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800744c:	d81a      	bhi.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800744e:	2b00      	cmp	r3, #0
 8007450:	d022      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007452:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007456:	d115      	bne.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800745c:	3308      	adds	r3, #8
 800745e:	2100      	movs	r1, #0
 8007460:	4618      	mov	r0, r3
 8007462:	f000 fe3b 	bl	80080dc <RCCEx_PLL2_Config>
 8007466:	4603      	mov	r3, r0
 8007468:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800746c:	e015      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800746e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007472:	3328      	adds	r3, #40	@ 0x28
 8007474:	2102      	movs	r1, #2
 8007476:	4618      	mov	r0, r3
 8007478:	f000 fee2 	bl	8008240 <RCCEx_PLL3_Config>
 800747c:	4603      	mov	r3, r0
 800747e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007482:	e00a      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800748a:	e006      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800748c:	bf00      	nop
 800748e:	e004      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007490:	bf00      	nop
 8007492:	e002      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007494:	bf00      	nop
 8007496:	e000      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007498:	bf00      	nop
    }

    if (ret == HAL_OK)
 800749a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10e      	bne.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80074a2:	4b06      	ldr	r3, [pc, #24]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80074a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074a6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80074aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80074b2:	4a02      	ldr	r2, [pc, #8]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80074b4:	430b      	orrs	r3, r1
 80074b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80074b8:	e006      	b.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80074ba:	bf00      	nop
 80074bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80074c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80074d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80074d8:	2300      	movs	r3, #0
 80074da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80074de:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80074e2:	460b      	mov	r3, r1
 80074e4:	4313      	orrs	r3, r2
 80074e6:	d055      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80074e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80074f0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80074f4:	d033      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80074f6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80074fa:	d82c      	bhi.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80074fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007500:	d02f      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007502:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007506:	d826      	bhi.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007508:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800750c:	d02b      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800750e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007512:	d820      	bhi.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007514:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007518:	d012      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800751a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800751e:	d81a      	bhi.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007520:	2b00      	cmp	r3, #0
 8007522:	d022      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007524:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007528:	d115      	bne.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800752a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800752e:	3308      	adds	r3, #8
 8007530:	2100      	movs	r1, #0
 8007532:	4618      	mov	r0, r3
 8007534:	f000 fdd2 	bl	80080dc <RCCEx_PLL2_Config>
 8007538:	4603      	mov	r3, r0
 800753a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800753e:	e015      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007544:	3328      	adds	r3, #40	@ 0x28
 8007546:	2102      	movs	r1, #2
 8007548:	4618      	mov	r0, r3
 800754a:	f000 fe79 	bl	8008240 <RCCEx_PLL3_Config>
 800754e:	4603      	mov	r3, r0
 8007550:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007554:	e00a      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800755c:	e006      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800755e:	bf00      	nop
 8007560:	e004      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007562:	bf00      	nop
 8007564:	e002      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007566:	bf00      	nop
 8007568:	e000      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800756a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800756c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007570:	2b00      	cmp	r3, #0
 8007572:	d10b      	bne.n	800758c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007574:	4ba0      	ldr	r3, [pc, #640]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007578:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800757c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007580:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007584:	4a9c      	ldr	r2, [pc, #624]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007586:	430b      	orrs	r3, r1
 8007588:	6593      	str	r3, [r2, #88]	@ 0x58
 800758a:	e003      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800758c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007590:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759c:	f002 0308 	and.w	r3, r2, #8
 80075a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80075a4:	2300      	movs	r3, #0
 80075a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80075aa:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80075ae:	460b      	mov	r3, r1
 80075b0:	4313      	orrs	r3, r2
 80075b2:	d01e      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80075b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075c0:	d10c      	bne.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80075c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c6:	3328      	adds	r3, #40	@ 0x28
 80075c8:	2102      	movs	r1, #2
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 fe38 	bl	8008240 <RCCEx_PLL3_Config>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d002      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80075dc:	4b86      	ldr	r3, [pc, #536]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80075de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075e0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80075e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075ec:	4a82      	ldr	r2, [pc, #520]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80075ee:	430b      	orrs	r3, r1
 80075f0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80075f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fa:	f002 0310 	and.w	r3, r2, #16
 80075fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007602:	2300      	movs	r3, #0
 8007604:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007608:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800760c:	460b      	mov	r3, r1
 800760e:	4313      	orrs	r3, r2
 8007610:	d01e      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007612:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007616:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800761a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800761e:	d10c      	bne.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007624:	3328      	adds	r3, #40	@ 0x28
 8007626:	2102      	movs	r1, #2
 8007628:	4618      	mov	r0, r3
 800762a:	f000 fe09 	bl	8008240 <RCCEx_PLL3_Config>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d002      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800763a:	4b6f      	ldr	r3, [pc, #444]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800763c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800763e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007646:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800764a:	4a6b      	ldr	r2, [pc, #428]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800764c:	430b      	orrs	r3, r1
 800764e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007658:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800765c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800765e:	2300      	movs	r3, #0
 8007660:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007662:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007666:	460b      	mov	r3, r1
 8007668:	4313      	orrs	r3, r2
 800766a:	d03e      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800766c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007670:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007674:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007678:	d022      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800767a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800767e:	d81b      	bhi.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007680:	2b00      	cmp	r3, #0
 8007682:	d003      	beq.n	800768c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007688:	d00b      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800768a:	e015      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800768c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007690:	3308      	adds	r3, #8
 8007692:	2100      	movs	r1, #0
 8007694:	4618      	mov	r0, r3
 8007696:	f000 fd21 	bl	80080dc <RCCEx_PLL2_Config>
 800769a:	4603      	mov	r3, r0
 800769c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80076a0:	e00f      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80076a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076a6:	3328      	adds	r3, #40	@ 0x28
 80076a8:	2102      	movs	r1, #2
 80076aa:	4618      	mov	r0, r3
 80076ac:	f000 fdc8 	bl	8008240 <RCCEx_PLL3_Config>
 80076b0:	4603      	mov	r3, r0
 80076b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80076b6:	e004      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80076be:	e000      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80076c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10b      	bne.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80076ca:	4b4b      	ldr	r3, [pc, #300]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80076cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076ce:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80076d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80076da:	4a47      	ldr	r2, [pc, #284]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80076dc:	430b      	orrs	r3, r1
 80076de:	6593      	str	r3, [r2, #88]	@ 0x58
 80076e0:	e003      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80076ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80076f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80076f8:	2300      	movs	r3, #0
 80076fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80076fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007700:	460b      	mov	r3, r1
 8007702:	4313      	orrs	r3, r2
 8007704:	d03b      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800770a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800770e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007712:	d01f      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007714:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007718:	d818      	bhi.n	800774c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800771a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800771e:	d003      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007720:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007724:	d007      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8007726:	e011      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007728:	4b33      	ldr	r3, [pc, #204]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800772a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800772c:	4a32      	ldr	r2, [pc, #200]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800772e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007732:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007734:	e00f      	b.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800773a:	3328      	adds	r3, #40	@ 0x28
 800773c:	2101      	movs	r1, #1
 800773e:	4618      	mov	r0, r3
 8007740:	f000 fd7e 	bl	8008240 <RCCEx_PLL3_Config>
 8007744:	4603      	mov	r3, r0
 8007746:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800774a:	e004      	b.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007752:	e000      	b.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007754:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007756:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10b      	bne.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800775e:	4b26      	ldr	r3, [pc, #152]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007762:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800776a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800776e:	4a22      	ldr	r2, [pc, #136]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007770:	430b      	orrs	r3, r1
 8007772:	6553      	str	r3, [r2, #84]	@ 0x54
 8007774:	e003      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007776:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800777a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800777e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007786:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800778a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800778c:	2300      	movs	r3, #0
 800778e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007790:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007794:	460b      	mov	r3, r1
 8007796:	4313      	orrs	r3, r2
 8007798:	d034      	beq.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800779a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800779e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d003      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80077a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077a8:	d007      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80077aa:	e011      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077ac:	4b12      	ldr	r3, [pc, #72]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b0:	4a11      	ldr	r2, [pc, #68]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80077b8:	e00e      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80077ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077be:	3308      	adds	r3, #8
 80077c0:	2102      	movs	r1, #2
 80077c2:	4618      	mov	r0, r3
 80077c4:	f000 fc8a 	bl	80080dc <RCCEx_PLL2_Config>
 80077c8:	4603      	mov	r3, r0
 80077ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80077ce:	e003      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80077d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10d      	bne.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80077e0:	4b05      	ldr	r3, [pc, #20]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077e4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80077e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077ee:	4a02      	ldr	r2, [pc, #8]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077f0:	430b      	orrs	r3, r1
 80077f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80077f4:	e006      	b.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80077f6:	bf00      	nop
 80077f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007800:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007810:	663b      	str	r3, [r7, #96]	@ 0x60
 8007812:	2300      	movs	r3, #0
 8007814:	667b      	str	r3, [r7, #100]	@ 0x64
 8007816:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800781a:	460b      	mov	r3, r1
 800781c:	4313      	orrs	r3, r2
 800781e:	d00c      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007824:	3328      	adds	r3, #40	@ 0x28
 8007826:	2102      	movs	r1, #2
 8007828:	4618      	mov	r0, r3
 800782a:	f000 fd09 	bl	8008240 <RCCEx_PLL3_Config>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d002      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800783a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800783e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007842:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007846:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007848:	2300      	movs	r3, #0
 800784a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800784c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007850:	460b      	mov	r3, r1
 8007852:	4313      	orrs	r3, r2
 8007854:	d036      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800785a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800785c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007860:	d018      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007862:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007866:	d811      	bhi.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007868:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800786c:	d014      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800786e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007872:	d80b      	bhi.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007874:	2b00      	cmp	r3, #0
 8007876:	d011      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007878:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800787c:	d106      	bne.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800787e:	4bb7      	ldr	r3, [pc, #732]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007882:	4ab6      	ldr	r2, [pc, #728]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007884:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007888:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800788a:	e008      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007892:	e004      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007894:	bf00      	nop
 8007896:	e002      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007898:	bf00      	nop
 800789a:	e000      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800789c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800789e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10a      	bne.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80078a6:	4bad      	ldr	r3, [pc, #692]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80078a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80078ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80078b4:	4aa9      	ldr	r2, [pc, #676]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80078b6:	430b      	orrs	r3, r1
 80078b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80078ba:	e003      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80078c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078cc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80078d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80078d2:	2300      	movs	r3, #0
 80078d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80078d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80078da:	460b      	mov	r3, r1
 80078dc:	4313      	orrs	r3, r2
 80078de:	d009      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80078e0:	4b9e      	ldr	r3, [pc, #632]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80078e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078e4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80078e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078ee:	4a9b      	ldr	r2, [pc, #620]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80078f0:	430b      	orrs	r3, r1
 80078f2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80078f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007900:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007902:	2300      	movs	r3, #0
 8007904:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007906:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800790a:	460b      	mov	r3, r1
 800790c:	4313      	orrs	r3, r2
 800790e:	d009      	beq.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007910:	4b92      	ldr	r3, [pc, #584]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007914:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800791c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800791e:	4a8f      	ldr	r2, [pc, #572]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007920:	430b      	orrs	r3, r1
 8007922:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007930:	643b      	str	r3, [r7, #64]	@ 0x40
 8007932:	2300      	movs	r3, #0
 8007934:	647b      	str	r3, [r7, #68]	@ 0x44
 8007936:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800793a:	460b      	mov	r3, r1
 800793c:	4313      	orrs	r3, r2
 800793e:	d00e      	beq.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007940:	4b86      	ldr	r3, [pc, #536]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	4a85      	ldr	r2, [pc, #532]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007946:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800794a:	6113      	str	r3, [r2, #16]
 800794c:	4b83      	ldr	r3, [pc, #524]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800794e:	6919      	ldr	r1, [r3, #16]
 8007950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007954:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007958:	4a80      	ldr	r2, [pc, #512]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800795a:	430b      	orrs	r3, r1
 800795c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800795e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007966:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800796a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800796c:	2300      	movs	r3, #0
 800796e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007970:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007974:	460b      	mov	r3, r1
 8007976:	4313      	orrs	r3, r2
 8007978:	d009      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800797a:	4b78      	ldr	r3, [pc, #480]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800797c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800797e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007982:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007988:	4a74      	ldr	r2, [pc, #464]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800798a:	430b      	orrs	r3, r1
 800798c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800798e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007996:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800799a:	633b      	str	r3, [r7, #48]	@ 0x30
 800799c:	2300      	movs	r3, #0
 800799e:	637b      	str	r3, [r7, #52]	@ 0x34
 80079a0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80079a4:	460b      	mov	r3, r1
 80079a6:	4313      	orrs	r3, r2
 80079a8:	d00a      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80079aa:	4b6c      	ldr	r3, [pc, #432]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ae:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80079b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079ba:	4a68      	ldr	r2, [pc, #416]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079bc:	430b      	orrs	r3, r1
 80079be:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80079c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c8:	2100      	movs	r1, #0
 80079ca:	62b9      	str	r1, [r7, #40]	@ 0x28
 80079cc:	f003 0301 	and.w	r3, r3, #1
 80079d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079d2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80079d6:	460b      	mov	r3, r1
 80079d8:	4313      	orrs	r3, r2
 80079da:	d011      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e0:	3308      	adds	r3, #8
 80079e2:	2100      	movs	r1, #0
 80079e4:	4618      	mov	r0, r3
 80079e6:	f000 fb79 	bl	80080dc <RCCEx_PLL2_Config>
 80079ea:	4603      	mov	r3, r0
 80079ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80079f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d003      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a08:	2100      	movs	r1, #0
 8007a0a:	6239      	str	r1, [r7, #32]
 8007a0c:	f003 0302 	and.w	r3, r3, #2
 8007a10:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a12:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007a16:	460b      	mov	r3, r1
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	d011      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a20:	3308      	adds	r3, #8
 8007a22:	2101      	movs	r1, #1
 8007a24:	4618      	mov	r0, r3
 8007a26:	f000 fb59 	bl	80080dc <RCCEx_PLL2_Config>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007a30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d003      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a48:	2100      	movs	r1, #0
 8007a4a:	61b9      	str	r1, [r7, #24]
 8007a4c:	f003 0304 	and.w	r3, r3, #4
 8007a50:	61fb      	str	r3, [r7, #28]
 8007a52:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007a56:	460b      	mov	r3, r1
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	d011      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a60:	3308      	adds	r3, #8
 8007a62:	2102      	movs	r1, #2
 8007a64:	4618      	mov	r0, r3
 8007a66:	f000 fb39 	bl	80080dc <RCCEx_PLL2_Config>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007a70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d003      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a88:	2100      	movs	r1, #0
 8007a8a:	6139      	str	r1, [r7, #16]
 8007a8c:	f003 0308 	and.w	r3, r3, #8
 8007a90:	617b      	str	r3, [r7, #20]
 8007a92:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007a96:	460b      	mov	r3, r1
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	d011      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aa0:	3328      	adds	r3, #40	@ 0x28
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f000 fbcb 	bl	8008240 <RCCEx_PLL3_Config>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007ab0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d003      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007abc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac8:	2100      	movs	r1, #0
 8007aca:	60b9      	str	r1, [r7, #8]
 8007acc:	f003 0310 	and.w	r3, r3, #16
 8007ad0:	60fb      	str	r3, [r7, #12]
 8007ad2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	d011      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ae0:	3328      	adds	r3, #40	@ 0x28
 8007ae2:	2101      	movs	r1, #1
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f000 fbab 	bl	8008240 <RCCEx_PLL3_Config>
 8007aea:	4603      	mov	r3, r0
 8007aec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007af0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d003      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007afc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b08:	2100      	movs	r1, #0
 8007b0a:	6039      	str	r1, [r7, #0]
 8007b0c:	f003 0320 	and.w	r3, r3, #32
 8007b10:	607b      	str	r3, [r7, #4]
 8007b12:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007b16:	460b      	mov	r3, r1
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	d011      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b20:	3328      	adds	r3, #40	@ 0x28
 8007b22:	2102      	movs	r1, #2
 8007b24:	4618      	mov	r0, r3
 8007b26:	f000 fb8b 	bl	8008240 <RCCEx_PLL3_Config>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007b30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d003      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007b40:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d101      	bne.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	e000      	b.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007b54:	46bd      	mov	sp, r7
 8007b56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b5a:	bf00      	nop
 8007b5c:	58024400 	.word	0x58024400

08007b60 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007b64:	f7fe fdbe 	bl	80066e4 <HAL_RCC_GetHCLKFreq>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	4b06      	ldr	r3, [pc, #24]	@ (8007b84 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	091b      	lsrs	r3, r3, #4
 8007b70:	f003 0307 	and.w	r3, r3, #7
 8007b74:	4904      	ldr	r1, [pc, #16]	@ (8007b88 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007b76:	5ccb      	ldrb	r3, [r1, r3]
 8007b78:	f003 031f 	and.w	r3, r3, #31
 8007b7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	58024400 	.word	0x58024400
 8007b88:	0800e5e4 	.word	0x0800e5e4

08007b8c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b089      	sub	sp, #36	@ 0x24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b94:	4ba1      	ldr	r3, [pc, #644]	@ (8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b98:	f003 0303 	and.w	r3, r3, #3
 8007b9c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007b9e:	4b9f      	ldr	r3, [pc, #636]	@ (8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba2:	0b1b      	lsrs	r3, r3, #12
 8007ba4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ba8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007baa:	4b9c      	ldr	r3, [pc, #624]	@ (8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bae:	091b      	lsrs	r3, r3, #4
 8007bb0:	f003 0301 	and.w	r3, r3, #1
 8007bb4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007bb6:	4b99      	ldr	r3, [pc, #612]	@ (8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bba:	08db      	lsrs	r3, r3, #3
 8007bbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	fb02 f303 	mul.w	r3, r2, r3
 8007bc6:	ee07 3a90 	vmov	s15, r3
 8007bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f000 8111 	beq.w	8007dfc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	f000 8083 	beq.w	8007ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	2b02      	cmp	r3, #2
 8007be6:	f200 80a1 	bhi.w	8007d2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d003      	beq.n	8007bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d056      	beq.n	8007ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007bf6:	e099      	b.n	8007d2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bf8:	4b88      	ldr	r3, [pc, #544]	@ (8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 0320 	and.w	r3, r3, #32
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d02d      	beq.n	8007c60 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c04:	4b85      	ldr	r3, [pc, #532]	@ (8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	08db      	lsrs	r3, r3, #3
 8007c0a:	f003 0303 	and.w	r3, r3, #3
 8007c0e:	4a84      	ldr	r2, [pc, #528]	@ (8007e20 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007c10:	fa22 f303 	lsr.w	r3, r2, r3
 8007c14:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	ee07 3a90 	vmov	s15, r3
 8007c1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	ee07 3a90 	vmov	s15, r3
 8007c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c2e:	4b7b      	ldr	r3, [pc, #492]	@ (8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c36:	ee07 3a90 	vmov	s15, r3
 8007c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c42:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007e24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007c5e:	e087      	b.n	8007d70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	ee07 3a90 	vmov	s15, r3
 8007c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c6a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007e28 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c72:	4b6a      	ldr	r3, [pc, #424]	@ (8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c7a:	ee07 3a90 	vmov	s15, r3
 8007c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c82:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c86:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007e24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ca2:	e065      	b.n	8007d70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	ee07 3a90 	vmov	s15, r3
 8007caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007e2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cb6:	4b59      	ldr	r3, [pc, #356]	@ (8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cbe:	ee07 3a90 	vmov	s15, r3
 8007cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007e24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ce2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ce6:	e043      	b.n	8007d70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	ee07 3a90 	vmov	s15, r3
 8007cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cf2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cfa:	4b48      	ldr	r3, [pc, #288]	@ (8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d02:	ee07 3a90 	vmov	s15, r3
 8007d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d0e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007e24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d2a:	e021      	b.n	8007d70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	ee07 3a90 	vmov	s15, r3
 8007d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d36:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007e2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d3e:	4b37      	ldr	r3, [pc, #220]	@ (8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d46:	ee07 3a90 	vmov	s15, r3
 8007d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d52:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007e24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d6e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007d70:	4b2a      	ldr	r3, [pc, #168]	@ (8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d74:	0a5b      	lsrs	r3, r3, #9
 8007d76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d7a:	ee07 3a90 	vmov	s15, r3
 8007d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d96:	ee17 2a90 	vmov	r2, s15
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007d9e:	4b1f      	ldr	r3, [pc, #124]	@ (8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007da2:	0c1b      	lsrs	r3, r3, #16
 8007da4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007da8:	ee07 3a90 	vmov	s15, r3
 8007dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007db0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007db4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007db8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dc4:	ee17 2a90 	vmov	r2, s15
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007dcc:	4b13      	ldr	r3, [pc, #76]	@ (8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd0:	0e1b      	lsrs	r3, r3, #24
 8007dd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dd6:	ee07 3a90 	vmov	s15, r3
 8007dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007de2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007de6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007df2:	ee17 2a90 	vmov	r2, s15
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007dfa:	e008      	b.n	8007e0e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	609a      	str	r2, [r3, #8]
}
 8007e0e:	bf00      	nop
 8007e10:	3724      	adds	r7, #36	@ 0x24
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	58024400 	.word	0x58024400
 8007e20:	03d09000 	.word	0x03d09000
 8007e24:	46000000 	.word	0x46000000
 8007e28:	4c742400 	.word	0x4c742400
 8007e2c:	4a742400 	.word	0x4a742400
 8007e30:	4bb71b00 	.word	0x4bb71b00

08007e34 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b089      	sub	sp, #36	@ 0x24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e3c:	4ba1      	ldr	r3, [pc, #644]	@ (80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e40:	f003 0303 	and.w	r3, r3, #3
 8007e44:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007e46:	4b9f      	ldr	r3, [pc, #636]	@ (80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e4a:	0d1b      	lsrs	r3, r3, #20
 8007e4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e50:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007e52:	4b9c      	ldr	r3, [pc, #624]	@ (80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e56:	0a1b      	lsrs	r3, r3, #8
 8007e58:	f003 0301 	and.w	r3, r3, #1
 8007e5c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007e5e:	4b99      	ldr	r3, [pc, #612]	@ (80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e62:	08db      	lsrs	r3, r3, #3
 8007e64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e68:	693a      	ldr	r2, [r7, #16]
 8007e6a:	fb02 f303 	mul.w	r3, r2, r3
 8007e6e:	ee07 3a90 	vmov	s15, r3
 8007e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f000 8111 	beq.w	80080a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	f000 8083 	beq.w	8007f90 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	f200 80a1 	bhi.w	8007fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d003      	beq.n	8007ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d056      	beq.n	8007f4c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007e9e:	e099      	b.n	8007fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ea0:	4b88      	ldr	r3, [pc, #544]	@ (80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 0320 	and.w	r3, r3, #32
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d02d      	beq.n	8007f08 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007eac:	4b85      	ldr	r3, [pc, #532]	@ (80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	08db      	lsrs	r3, r3, #3
 8007eb2:	f003 0303 	and.w	r3, r3, #3
 8007eb6:	4a84      	ldr	r2, [pc, #528]	@ (80080c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8007ebc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	ee07 3a90 	vmov	s15, r3
 8007ec4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	ee07 3a90 	vmov	s15, r3
 8007ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ed6:	4b7b      	ldr	r3, [pc, #492]	@ (80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ede:	ee07 3a90 	vmov	s15, r3
 8007ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80080cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ef6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007f06:	e087      	b.n	8008018 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	ee07 3a90 	vmov	s15, r3
 8007f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f12:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80080d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f1a:	4b6a      	ldr	r3, [pc, #424]	@ (80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f22:	ee07 3a90 	vmov	s15, r3
 8007f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f2e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80080cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f4a:	e065      	b.n	8008018 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	ee07 3a90 	vmov	s15, r3
 8007f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f56:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80080d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f5e:	4b59      	ldr	r3, [pc, #356]	@ (80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f66:	ee07 3a90 	vmov	s15, r3
 8007f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f72:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80080cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f8e:	e043      	b.n	8008018 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	ee07 3a90 	vmov	s15, r3
 8007f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f9a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80080d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fa2:	4b48      	ldr	r3, [pc, #288]	@ (80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007faa:	ee07 3a90 	vmov	s15, r3
 8007fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fb6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80080cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fd2:	e021      	b.n	8008018 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	ee07 3a90 	vmov	s15, r3
 8007fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fde:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80080d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fe6:	4b37      	ldr	r3, [pc, #220]	@ (80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fee:	ee07 3a90 	vmov	s15, r3
 8007ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ff6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ffa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80080cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800800a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800800e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008016:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008018:	4b2a      	ldr	r3, [pc, #168]	@ (80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800801a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800801c:	0a5b      	lsrs	r3, r3, #9
 800801e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008022:	ee07 3a90 	vmov	s15, r3
 8008026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800802a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800802e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008032:	edd7 6a07 	vldr	s13, [r7, #28]
 8008036:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800803a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800803e:	ee17 2a90 	vmov	r2, s15
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008046:	4b1f      	ldr	r3, [pc, #124]	@ (80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800804a:	0c1b      	lsrs	r3, r3, #16
 800804c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008050:	ee07 3a90 	vmov	s15, r3
 8008054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008058:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800805c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008060:	edd7 6a07 	vldr	s13, [r7, #28]
 8008064:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800806c:	ee17 2a90 	vmov	r2, s15
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008074:	4b13      	ldr	r3, [pc, #76]	@ (80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008078:	0e1b      	lsrs	r3, r3, #24
 800807a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800807e:	ee07 3a90 	vmov	s15, r3
 8008082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008086:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800808a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800808e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008092:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008096:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800809a:	ee17 2a90 	vmov	r2, s15
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80080a2:	e008      	b.n	80080b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	609a      	str	r2, [r3, #8]
}
 80080b6:	bf00      	nop
 80080b8:	3724      	adds	r7, #36	@ 0x24
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	58024400 	.word	0x58024400
 80080c8:	03d09000 	.word	0x03d09000
 80080cc:	46000000 	.word	0x46000000
 80080d0:	4c742400 	.word	0x4c742400
 80080d4:	4a742400 	.word	0x4a742400
 80080d8:	4bb71b00 	.word	0x4bb71b00

080080dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80080e6:	2300      	movs	r3, #0
 80080e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80080ea:	4b53      	ldr	r3, [pc, #332]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80080ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ee:	f003 0303 	and.w	r3, r3, #3
 80080f2:	2b03      	cmp	r3, #3
 80080f4:	d101      	bne.n	80080fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e099      	b.n	800822e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80080fa:	4b4f      	ldr	r3, [pc, #316]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a4e      	ldr	r2, [pc, #312]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 8008100:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008104:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008106:	f7f9 ff59 	bl	8001fbc <HAL_GetTick>
 800810a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800810c:	e008      	b.n	8008120 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800810e:	f7f9 ff55 	bl	8001fbc <HAL_GetTick>
 8008112:	4602      	mov	r2, r0
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	2b02      	cmp	r3, #2
 800811a:	d901      	bls.n	8008120 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	e086      	b.n	800822e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008120:	4b45      	ldr	r3, [pc, #276]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1f0      	bne.n	800810e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800812c:	4b42      	ldr	r3, [pc, #264]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 800812e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008130:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	031b      	lsls	r3, r3, #12
 800813a:	493f      	ldr	r1, [pc, #252]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 800813c:	4313      	orrs	r3, r2
 800813e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	3b01      	subs	r3, #1
 8008146:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	3b01      	subs	r3, #1
 8008150:	025b      	lsls	r3, r3, #9
 8008152:	b29b      	uxth	r3, r3
 8008154:	431a      	orrs	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	3b01      	subs	r3, #1
 800815c:	041b      	lsls	r3, r3, #16
 800815e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008162:	431a      	orrs	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	3b01      	subs	r3, #1
 800816a:	061b      	lsls	r3, r3, #24
 800816c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008170:	4931      	ldr	r1, [pc, #196]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 8008172:	4313      	orrs	r3, r2
 8008174:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008176:	4b30      	ldr	r3, [pc, #192]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 8008178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800817a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	492d      	ldr	r1, [pc, #180]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 8008184:	4313      	orrs	r3, r2
 8008186:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008188:	4b2b      	ldr	r3, [pc, #172]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 800818a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800818c:	f023 0220 	bic.w	r2, r3, #32
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	4928      	ldr	r1, [pc, #160]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 8008196:	4313      	orrs	r3, r2
 8008198:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800819a:	4b27      	ldr	r3, [pc, #156]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 800819c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800819e:	4a26      	ldr	r2, [pc, #152]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081a0:	f023 0310 	bic.w	r3, r3, #16
 80081a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80081a6:	4b24      	ldr	r3, [pc, #144]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081aa:	4b24      	ldr	r3, [pc, #144]	@ (800823c <RCCEx_PLL2_Config+0x160>)
 80081ac:	4013      	ands	r3, r2
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	69d2      	ldr	r2, [r2, #28]
 80081b2:	00d2      	lsls	r2, r2, #3
 80081b4:	4920      	ldr	r1, [pc, #128]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081b6:	4313      	orrs	r3, r2
 80081b8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80081ba:	4b1f      	ldr	r3, [pc, #124]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081be:	4a1e      	ldr	r2, [pc, #120]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081c0:	f043 0310 	orr.w	r3, r3, #16
 80081c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d106      	bne.n	80081da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80081cc:	4b1a      	ldr	r3, [pc, #104]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d0:	4a19      	ldr	r2, [pc, #100]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80081d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80081d8:	e00f      	b.n	80081fa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d106      	bne.n	80081ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80081e0:	4b15      	ldr	r3, [pc, #84]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e4:	4a14      	ldr	r2, [pc, #80]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80081ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80081ec:	e005      	b.n	80081fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80081ee:	4b12      	ldr	r3, [pc, #72]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f2:	4a11      	ldr	r2, [pc, #68]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80081f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80081fa:	4b0f      	ldr	r3, [pc, #60]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a0e      	ldr	r2, [pc, #56]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 8008200:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008204:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008206:	f7f9 fed9 	bl	8001fbc <HAL_GetTick>
 800820a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800820c:	e008      	b.n	8008220 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800820e:	f7f9 fed5 	bl	8001fbc <HAL_GetTick>
 8008212:	4602      	mov	r2, r0
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	2b02      	cmp	r3, #2
 800821a:	d901      	bls.n	8008220 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800821c:	2303      	movs	r3, #3
 800821e:	e006      	b.n	800822e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008220:	4b05      	ldr	r3, [pc, #20]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008228:	2b00      	cmp	r3, #0
 800822a:	d0f0      	beq.n	800820e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800822c:	7bfb      	ldrb	r3, [r7, #15]
}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	58024400 	.word	0x58024400
 800823c:	ffff0007 	.word	0xffff0007

08008240 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800824a:	2300      	movs	r3, #0
 800824c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800824e:	4b53      	ldr	r3, [pc, #332]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008252:	f003 0303 	and.w	r3, r3, #3
 8008256:	2b03      	cmp	r3, #3
 8008258:	d101      	bne.n	800825e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e099      	b.n	8008392 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800825e:	4b4f      	ldr	r3, [pc, #316]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a4e      	ldr	r2, [pc, #312]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008264:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008268:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800826a:	f7f9 fea7 	bl	8001fbc <HAL_GetTick>
 800826e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008270:	e008      	b.n	8008284 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008272:	f7f9 fea3 	bl	8001fbc <HAL_GetTick>
 8008276:	4602      	mov	r2, r0
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	2b02      	cmp	r3, #2
 800827e:	d901      	bls.n	8008284 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	e086      	b.n	8008392 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008284:	4b45      	ldr	r3, [pc, #276]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800828c:	2b00      	cmp	r3, #0
 800828e:	d1f0      	bne.n	8008272 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008290:	4b42      	ldr	r3, [pc, #264]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008294:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	051b      	lsls	r3, r3, #20
 800829e:	493f      	ldr	r1, [pc, #252]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 80082a0:	4313      	orrs	r3, r2
 80082a2:	628b      	str	r3, [r1, #40]	@ 0x28
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	3b01      	subs	r3, #1
 80082aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	3b01      	subs	r3, #1
 80082b4:	025b      	lsls	r3, r3, #9
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	431a      	orrs	r2, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	3b01      	subs	r3, #1
 80082c0:	041b      	lsls	r3, r3, #16
 80082c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80082c6:	431a      	orrs	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	3b01      	subs	r3, #1
 80082ce:	061b      	lsls	r3, r3, #24
 80082d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80082d4:	4931      	ldr	r1, [pc, #196]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 80082d6:	4313      	orrs	r3, r2
 80082d8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80082da:	4b30      	ldr	r3, [pc, #192]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 80082dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	695b      	ldr	r3, [r3, #20]
 80082e6:	492d      	ldr	r1, [pc, #180]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 80082e8:	4313      	orrs	r3, r2
 80082ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80082ec:	4b2b      	ldr	r3, [pc, #172]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 80082ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082f0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	699b      	ldr	r3, [r3, #24]
 80082f8:	4928      	ldr	r1, [pc, #160]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 80082fa:	4313      	orrs	r3, r2
 80082fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80082fe:	4b27      	ldr	r3, [pc, #156]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008302:	4a26      	ldr	r2, [pc, #152]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008304:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008308:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800830a:	4b24      	ldr	r3, [pc, #144]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 800830c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800830e:	4b24      	ldr	r3, [pc, #144]	@ (80083a0 <RCCEx_PLL3_Config+0x160>)
 8008310:	4013      	ands	r3, r2
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	69d2      	ldr	r2, [r2, #28]
 8008316:	00d2      	lsls	r2, r2, #3
 8008318:	4920      	ldr	r1, [pc, #128]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 800831a:	4313      	orrs	r3, r2
 800831c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800831e:	4b1f      	ldr	r3, [pc, #124]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008322:	4a1e      	ldr	r2, [pc, #120]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008328:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d106      	bne.n	800833e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008330:	4b1a      	ldr	r3, [pc, #104]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008334:	4a19      	ldr	r2, [pc, #100]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008336:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800833a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800833c:	e00f      	b.n	800835e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	2b01      	cmp	r3, #1
 8008342:	d106      	bne.n	8008352 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008344:	4b15      	ldr	r3, [pc, #84]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008348:	4a14      	ldr	r2, [pc, #80]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 800834a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800834e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008350:	e005      	b.n	800835e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008352:	4b12      	ldr	r3, [pc, #72]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008356:	4a11      	ldr	r2, [pc, #68]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008358:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800835c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800835e:	4b0f      	ldr	r3, [pc, #60]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a0e      	ldr	r2, [pc, #56]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008364:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800836a:	f7f9 fe27 	bl	8001fbc <HAL_GetTick>
 800836e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008370:	e008      	b.n	8008384 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008372:	f7f9 fe23 	bl	8001fbc <HAL_GetTick>
 8008376:	4602      	mov	r2, r0
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	2b02      	cmp	r3, #2
 800837e:	d901      	bls.n	8008384 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008380:	2303      	movs	r3, #3
 8008382:	e006      	b.n	8008392 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008384:	4b05      	ldr	r3, [pc, #20]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800838c:	2b00      	cmp	r3, #0
 800838e:	d0f0      	beq.n	8008372 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008390:	7bfb      	ldrb	r3, [r7, #15]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	58024400 	.word	0x58024400
 80083a0:	ffff0007 	.word	0xffff0007

080083a4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d101      	bne.n	80083b6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e092      	b.n	80084dc <HAL_RNG_Init+0x138>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	7a5b      	ldrb	r3, [r3, #9]
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d105      	bne.n	80083cc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f7f8 fdf8 	bl	8000fbc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2202      	movs	r2, #2
 80083d0:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f022 0204 	bic.w	r2, r2, #4
 80083e0:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	4b3e      	ldr	r3, [pc, #248]	@ (80084e4 <HAL_RNG_Init+0x140>)
 80083ea:	4013      	ands	r3, r2
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	6852      	ldr	r2, [r2, #4]
 80083f0:	431a      	orrs	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80083fa:	601a      	str	r2, [r3, #0]
#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a39      	ldr	r2, [pc, #228]	@ (80084e8 <HAL_RNG_Init+0x144>)
 8008402:	611a      	str	r2, [r3, #16]
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f247 2274 	movw	r2, #29300	@ 0x7274
 800840c:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800841c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800841e:	f7f9 fdcd 	bl	8001fbc <HAL_GetTick>
 8008422:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8008424:	e016      	b.n	8008454 <HAL_RNG_Init+0xb0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008426:	f7f9 fdc9 	bl	8001fbc <HAL_GetTick>
 800842a:	4602      	mov	r2, r0
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	1ad3      	subs	r3, r2, r3
 8008430:	2b02      	cmp	r3, #2
 8008432:	d90f      	bls.n	8008454 <HAL_RNG_Init+0xb0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800843e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008442:	d107      	bne.n	8008454 <HAL_RNG_Init+0xb0>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2202      	movs	r2, #2
 800844e:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e043      	b.n	80084dc <HAL_RNG_Init+0x138>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800845e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008462:	d0e0      	beq.n	8008426 <HAL_RNG_Init+0x82>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f042 0204 	orr.w	r2, r2, #4
 8008472:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800847e:	2b40      	cmp	r3, #64	@ 0x40
 8008480:	d104      	bne.n	800848c <HAL_RNG_Init+0xe8>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2204      	movs	r2, #4
 8008486:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	e027      	b.n	80084dc <HAL_RNG_Init+0x138>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800848c:	f7f9 fd96 	bl	8001fbc <HAL_GetTick>
 8008490:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8008492:	e015      	b.n	80084c0 <HAL_RNG_Init+0x11c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008494:	f7f9 fd92 	bl	8001fbc <HAL_GetTick>
 8008498:	4602      	mov	r2, r0
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	1ad3      	subs	r3, r2, r3
 800849e:	2b02      	cmp	r3, #2
 80084a0:	d90e      	bls.n	80084c0 <HAL_RNG_Init+0x11c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	f003 0301 	and.w	r3, r3, #1
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d007      	beq.n	80084c0 <HAL_RNG_Init+0x11c>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2204      	movs	r2, #4
 80084b4:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2202      	movs	r2, #2
 80084ba:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	e00d      	b.n	80084dc <HAL_RNG_Init+0x138>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d1e2      	bne.n	8008494 <HAL_RNG_Init+0xf0>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2201      	movs	r2, #1
 80084d2:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	bfffffdf 	.word	0xbfffffdf
 80084e8:	17590abc 	.word	0x17590abc

080084ec <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d101      	bne.n	80084fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	e10f      	b.n	800871e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a87      	ldr	r2, [pc, #540]	@ (8008728 <HAL_SPI_Init+0x23c>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d00f      	beq.n	800852e <HAL_SPI_Init+0x42>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a86      	ldr	r2, [pc, #536]	@ (800872c <HAL_SPI_Init+0x240>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d00a      	beq.n	800852e <HAL_SPI_Init+0x42>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a84      	ldr	r2, [pc, #528]	@ (8008730 <HAL_SPI_Init+0x244>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d005      	beq.n	800852e <HAL_SPI_Init+0x42>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	2b0f      	cmp	r3, #15
 8008528:	d901      	bls.n	800852e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e0f7      	b.n	800871e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fbba 	bl	8008ca8 <SPI_GetPacketSize>
 8008534:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a7b      	ldr	r2, [pc, #492]	@ (8008728 <HAL_SPI_Init+0x23c>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d00c      	beq.n	800855a <HAL_SPI_Init+0x6e>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a79      	ldr	r2, [pc, #484]	@ (800872c <HAL_SPI_Init+0x240>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d007      	beq.n	800855a <HAL_SPI_Init+0x6e>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a78      	ldr	r2, [pc, #480]	@ (8008730 <HAL_SPI_Init+0x244>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d002      	beq.n	800855a <HAL_SPI_Init+0x6e>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2b08      	cmp	r3, #8
 8008558:	d811      	bhi.n	800857e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800855e:	4a72      	ldr	r2, [pc, #456]	@ (8008728 <HAL_SPI_Init+0x23c>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d009      	beq.n	8008578 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a70      	ldr	r2, [pc, #448]	@ (800872c <HAL_SPI_Init+0x240>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d004      	beq.n	8008578 <HAL_SPI_Init+0x8c>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a6f      	ldr	r2, [pc, #444]	@ (8008730 <HAL_SPI_Init+0x244>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d104      	bne.n	8008582 <HAL_SPI_Init+0x96>
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2b10      	cmp	r3, #16
 800857c:	d901      	bls.n	8008582 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e0cd      	b.n	800871e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008588:	b2db      	uxtb	r3, r3
 800858a:	2b00      	cmp	r3, #0
 800858c:	d106      	bne.n	800859c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f7f8 fda2 	bl	80010e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2202      	movs	r2, #2
 80085a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f022 0201 	bic.w	r2, r2, #1
 80085b2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80085be:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	699b      	ldr	r3, [r3, #24]
 80085c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80085c8:	d119      	bne.n	80085fe <HAL_SPI_Init+0x112>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80085d2:	d103      	bne.n	80085dc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d008      	beq.n	80085ee <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d10c      	bne.n	80085fe <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80085e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085ec:	d107      	bne.n	80085fe <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80085fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00f      	beq.n	800862a <HAL_SPI_Init+0x13e>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	2b06      	cmp	r3, #6
 8008610:	d90b      	bls.n	800862a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	430a      	orrs	r2, r1
 8008626:	601a      	str	r2, [r3, #0]
 8008628:	e007      	b.n	800863a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008638:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	69da      	ldr	r2, [r3, #28]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008642:	431a      	orrs	r2, r3
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	431a      	orrs	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800864c:	ea42 0103 	orr.w	r1, r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	68da      	ldr	r2, [r3, #12]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	430a      	orrs	r2, r1
 800865a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008664:	431a      	orrs	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800866a:	431a      	orrs	r2, r3
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	699b      	ldr	r3, [r3, #24]
 8008670:	431a      	orrs	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	431a      	orrs	r2, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	431a      	orrs	r2, r3
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a1b      	ldr	r3, [r3, #32]
 8008682:	431a      	orrs	r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	431a      	orrs	r2, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800868e:	431a      	orrs	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	431a      	orrs	r2, r3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800869a:	ea42 0103 	orr.w	r1, r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	430a      	orrs	r2, r1
 80086a8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d113      	bne.n	80086da <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80086c4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80086d8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f022 0201 	bic.w	r2, r2, #1
 80086e8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00a      	beq.n	800870c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	430a      	orrs	r2, r1
 800870a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	40013000 	.word	0x40013000
 800872c:	40003800 	.word	0x40003800
 8008730:	40003c00 	.word	0x40003c00

08008734 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b08a      	sub	sp, #40	@ 0x28
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	695b      	ldr	r3, [r3, #20]
 800874a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800874c:	6a3a      	ldr	r2, [r7, #32]
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	4013      	ands	r3, r2
 8008752:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800875c:	2300      	movs	r3, #0
 800875e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008766:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	3330      	adds	r3, #48	@ 0x30
 800876e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008776:	2b00      	cmp	r3, #0
 8008778:	d010      	beq.n	800879c <HAL_SPI_IRQHandler+0x68>
 800877a:	6a3b      	ldr	r3, [r7, #32]
 800877c:	f003 0308 	and.w	r3, r3, #8
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00b      	beq.n	800879c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	699a      	ldr	r2, [r3, #24]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008792:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 f9c3 	bl	8008b20 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800879a:	e192      	b.n	8008ac2 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d113      	bne.n	80087ce <HAL_SPI_IRQHandler+0x9a>
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	f003 0320 	and.w	r3, r3, #32
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d10e      	bne.n	80087ce <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d009      	beq.n	80087ce <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	4798      	blx	r3
    hspi->RxISR(hspi);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	4798      	blx	r3
    handled = 1UL;
 80087ca:	2301      	movs	r3, #1
 80087cc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d10f      	bne.n	80087f8 <HAL_SPI_IRQHandler+0xc4>
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00a      	beq.n	80087f8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d105      	bne.n	80087f8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	4798      	blx	r3
    handled = 1UL;
 80087f4:	2301      	movs	r3, #1
 80087f6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	f003 0320 	and.w	r3, r3, #32
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d10f      	bne.n	8008822 <HAL_SPI_IRQHandler+0xee>
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	f003 0302 	and.w	r3, r3, #2
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00a      	beq.n	8008822 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008812:	2b00      	cmp	r3, #0
 8008814:	d105      	bne.n	8008822 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	4798      	blx	r3
    handled = 1UL;
 800881e:	2301      	movs	r3, #1
 8008820:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8008822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008824:	2b00      	cmp	r3, #0
 8008826:	f040 8147 	bne.w	8008ab8 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	f003 0308 	and.w	r3, r3, #8
 8008830:	2b00      	cmp	r3, #0
 8008832:	f000 808b 	beq.w	800894c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	699a      	ldr	r2, [r3, #24]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f042 0208 	orr.w	r2, r2, #8
 8008844:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	699a      	ldr	r2, [r3, #24]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f042 0210 	orr.w	r2, r2, #16
 8008854:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	699a      	ldr	r2, [r3, #24]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008864:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	691a      	ldr	r2, [r3, #16]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f022 0208 	bic.w	r2, r2, #8
 8008874:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008880:	2b00      	cmp	r3, #0
 8008882:	d13d      	bne.n	8008900 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008884:	e036      	b.n	80088f4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	2b0f      	cmp	r3, #15
 800888c:	d90b      	bls.n	80088a6 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008896:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008898:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800889e:	1d1a      	adds	r2, r3, #4
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	665a      	str	r2, [r3, #100]	@ 0x64
 80088a4:	e01d      	b.n	80088e2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	2b07      	cmp	r3, #7
 80088ac:	d90b      	bls.n	80088c6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	8812      	ldrh	r2, [r2, #0]
 80088b6:	b292      	uxth	r2, r2
 80088b8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088be:	1c9a      	adds	r2, r3, #2
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	665a      	str	r2, [r3, #100]	@ 0x64
 80088c4:	e00d      	b.n	80088e2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088d2:	7812      	ldrb	r2, [r2, #0]
 80088d4:	b2d2      	uxtb	r2, r2
 80088d6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088dc:	1c5a      	adds	r2, r3, #1
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	3b01      	subs	r3, #1
 80088ec:	b29a      	uxth	r2, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d1c2      	bne.n	8008886 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 f931 	bl	8008b68 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2201      	movs	r2, #1
 800890a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008914:	2b00      	cmp	r3, #0
 8008916:	d003      	beq.n	8008920 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 f8f7 	bl	8008b0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800891e:	e0d0      	b.n	8008ac2 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008920:	7cfb      	ldrb	r3, [r7, #19]
 8008922:	2b05      	cmp	r3, #5
 8008924:	d103      	bne.n	800892e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f8e6 	bl	8008af8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800892c:	e0c6      	b.n	8008abc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800892e:	7cfb      	ldrb	r3, [r7, #19]
 8008930:	2b04      	cmp	r3, #4
 8008932:	d103      	bne.n	800893c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 f8d5 	bl	8008ae4 <HAL_SPI_RxCpltCallback>
    return;
 800893a:	e0bf      	b.n	8008abc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800893c:	7cfb      	ldrb	r3, [r7, #19]
 800893e:	2b03      	cmp	r3, #3
 8008940:	f040 80bc 	bne.w	8008abc <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 f8c3 	bl	8008ad0 <HAL_SPI_TxCpltCallback>
    return;
 800894a:	e0b7      	b.n	8008abc <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8008952:	2b00      	cmp	r3, #0
 8008954:	f000 80b5 	beq.w	8008ac2 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008958:	69bb      	ldr	r3, [r7, #24]
 800895a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00f      	beq.n	8008982 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008968:	f043 0204 	orr.w	r2, r3, #4
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	699a      	ldr	r2, [r3, #24]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008980:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00f      	beq.n	80089ac <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008992:	f043 0201 	orr.w	r2, r3, #1
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	699a      	ldr	r2, [r3, #24]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80089aa:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00f      	beq.n	80089d6 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089bc:	f043 0208 	orr.w	r2, r3, #8
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	699a      	ldr	r2, [r3, #24]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80089d4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	f003 0320 	and.w	r3, r3, #32
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00f      	beq.n	8008a00 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089e6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	699a      	ldr	r2, [r3, #24]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f042 0220 	orr.w	r2, r2, #32
 80089fe:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d05a      	beq.n	8008ac0 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f022 0201 	bic.w	r2, r2, #1
 8008a18:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	6919      	ldr	r1, [r3, #16]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	4b28      	ldr	r3, [pc, #160]	@ (8008ac8 <HAL_SPI_IRQHandler+0x394>)
 8008a26:	400b      	ands	r3, r1
 8008a28:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008a30:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008a34:	d138      	bne.n	8008aa8 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	689a      	ldr	r2, [r3, #8]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008a44:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d013      	beq.n	8008a76 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a52:	4a1e      	ldr	r2, [pc, #120]	@ (8008acc <HAL_SPI_IRQHandler+0x398>)
 8008a54:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7fa fb18 	bl	8003090 <HAL_DMA_Abort_IT>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d007      	beq.n	8008a76 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a6c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d020      	beq.n	8008ac0 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a82:	4a12      	ldr	r2, [pc, #72]	@ (8008acc <HAL_SPI_IRQHandler+0x398>)
 8008a84:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7fa fb00 	bl	8003090 <HAL_DMA_Abort_IT>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d014      	beq.n	8008ac0 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a9c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008aa6:	e00b      	b.n	8008ac0 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 f82b 	bl	8008b0c <HAL_SPI_ErrorCallback>
    return;
 8008ab6:	e003      	b.n	8008ac0 <HAL_SPI_IRQHandler+0x38c>
    return;
 8008ab8:	bf00      	nop
 8008aba:	e002      	b.n	8008ac2 <HAL_SPI_IRQHandler+0x38e>
    return;
 8008abc:	bf00      	nop
 8008abe:	e000      	b.n	8008ac2 <HAL_SPI_IRQHandler+0x38e>
    return;
 8008ac0:	bf00      	nop
  }
}
 8008ac2:	3728      	adds	r7, #40	@ 0x28
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	fffffc94 	.word	0xfffffc94
 8008acc:	08008b35 	.word	0x08008b35

08008ad0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008ad8:	bf00      	nop
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008aec:	bf00      	nop
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008b00:	bf00      	nop
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008b14:	bf00      	nop
 8008b16:	370c      	adds	r7, #12
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8008b28:	bf00      	nop
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b40:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2201      	movs	r2, #1
 8008b56:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008b5a:	68f8      	ldr	r0, [r7, #12]
 8008b5c:	f7ff ffd6 	bl	8008b0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008b60:	bf00      	nop
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b085      	sub	sp, #20
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	695b      	ldr	r3, [r3, #20]
 8008b76:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	699a      	ldr	r2, [r3, #24]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f042 0208 	orr.w	r2, r2, #8
 8008b86:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	699a      	ldr	r2, [r3, #24]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f042 0210 	orr.w	r2, r2, #16
 8008b96:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f022 0201 	bic.w	r2, r2, #1
 8008ba6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	6919      	ldr	r1, [r3, #16]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	4b3c      	ldr	r3, [pc, #240]	@ (8008ca4 <SPI_CloseTransfer+0x13c>)
 8008bb4:	400b      	ands	r3, r1
 8008bb6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	689a      	ldr	r2, [r3, #8]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008bc6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	2b04      	cmp	r3, #4
 8008bd2:	d014      	beq.n	8008bfe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f003 0320 	and.w	r3, r3, #32
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00f      	beq.n	8008bfe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008be4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	699a      	ldr	r2, [r3, #24]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f042 0220 	orr.w	r2, r2, #32
 8008bfc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	2b03      	cmp	r3, #3
 8008c08:	d014      	beq.n	8008c34 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d00f      	beq.n	8008c34 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c1a:	f043 0204 	orr.w	r2, r3, #4
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	699a      	ldr	r2, [r3, #24]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c32:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00f      	beq.n	8008c5e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c44:	f043 0201 	orr.w	r2, r3, #1
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	699a      	ldr	r2, [r3, #24]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c5c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00f      	beq.n	8008c88 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c6e:	f043 0208 	orr.w	r2, r3, #8
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	699a      	ldr	r2, [r3, #24]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008c86:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8008c98:	bf00      	nop
 8008c9a:	3714      	adds	r7, #20
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr
 8008ca4:	fffffc90 	.word	0xfffffc90

08008ca8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cb4:	095b      	lsrs	r3, r3, #5
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	3307      	adds	r3, #7
 8008cc6:	08db      	lsrs	r3, r3, #3
 8008cc8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	fb02 f303 	mul.w	r3, r2, r3
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3714      	adds	r7, #20
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr

08008cde <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b082      	sub	sp, #8
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d101      	bne.n	8008cf0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	e049      	b.n	8008d84 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d106      	bne.n	8008d0a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 f841 	bl	8008d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2202      	movs	r2, #2
 8008d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	3304      	adds	r3, #4
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	f000 fb5f 	bl	80093e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2201      	movs	r2, #1
 8008d26:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2201      	movs	r2, #1
 8008d36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2201      	movs	r2, #1
 8008d46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2201      	movs	r2, #1
 8008d56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d82:	2300      	movs	r3, #0
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3708      	adds	r7, #8
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d001      	beq.n	8008db8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	e05e      	b.n	8008e76 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2202      	movs	r2, #2
 8008dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68da      	ldr	r2, [r3, #12]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f042 0201 	orr.w	r2, r2, #1
 8008dce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a2b      	ldr	r2, [pc, #172]	@ (8008e84 <HAL_TIM_Base_Start_IT+0xe4>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d02c      	beq.n	8008e34 <HAL_TIM_Base_Start_IT+0x94>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008de2:	d027      	beq.n	8008e34 <HAL_TIM_Base_Start_IT+0x94>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a27      	ldr	r2, [pc, #156]	@ (8008e88 <HAL_TIM_Base_Start_IT+0xe8>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d022      	beq.n	8008e34 <HAL_TIM_Base_Start_IT+0x94>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a26      	ldr	r2, [pc, #152]	@ (8008e8c <HAL_TIM_Base_Start_IT+0xec>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d01d      	beq.n	8008e34 <HAL_TIM_Base_Start_IT+0x94>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a24      	ldr	r2, [pc, #144]	@ (8008e90 <HAL_TIM_Base_Start_IT+0xf0>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d018      	beq.n	8008e34 <HAL_TIM_Base_Start_IT+0x94>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a23      	ldr	r2, [pc, #140]	@ (8008e94 <HAL_TIM_Base_Start_IT+0xf4>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d013      	beq.n	8008e34 <HAL_TIM_Base_Start_IT+0x94>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a21      	ldr	r2, [pc, #132]	@ (8008e98 <HAL_TIM_Base_Start_IT+0xf8>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d00e      	beq.n	8008e34 <HAL_TIM_Base_Start_IT+0x94>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a20      	ldr	r2, [pc, #128]	@ (8008e9c <HAL_TIM_Base_Start_IT+0xfc>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d009      	beq.n	8008e34 <HAL_TIM_Base_Start_IT+0x94>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a1e      	ldr	r2, [pc, #120]	@ (8008ea0 <HAL_TIM_Base_Start_IT+0x100>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d004      	beq.n	8008e34 <HAL_TIM_Base_Start_IT+0x94>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a1d      	ldr	r2, [pc, #116]	@ (8008ea4 <HAL_TIM_Base_Start_IT+0x104>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d115      	bne.n	8008e60 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	689a      	ldr	r2, [r3, #8]
 8008e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8008ea8 <HAL_TIM_Base_Start_IT+0x108>)
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2b06      	cmp	r3, #6
 8008e44:	d015      	beq.n	8008e72 <HAL_TIM_Base_Start_IT+0xd2>
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e4c:	d011      	beq.n	8008e72 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f042 0201 	orr.w	r2, r2, #1
 8008e5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e5e:	e008      	b.n	8008e72 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f042 0201 	orr.w	r2, r2, #1
 8008e6e:	601a      	str	r2, [r3, #0]
 8008e70:	e000      	b.n	8008e74 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3714      	adds	r7, #20
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	40010000 	.word	0x40010000
 8008e88:	40000400 	.word	0x40000400
 8008e8c:	40000800 	.word	0x40000800
 8008e90:	40000c00 	.word	0x40000c00
 8008e94:	40010400 	.word	0x40010400
 8008e98:	40001800 	.word	0x40001800
 8008e9c:	40014000 	.word	0x40014000
 8008ea0:	4000e000 	.word	0x4000e000
 8008ea4:	4000e400 	.word	0x4000e400
 8008ea8:	00010007 	.word	0x00010007

08008eac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d101      	bne.n	8008ebe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e049      	b.n	8008f52 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d106      	bne.n	8008ed8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f7f8 fc0e 	bl	80016f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2202      	movs	r2, #2
 8008edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	3304      	adds	r3, #4
 8008ee8:	4619      	mov	r1, r3
 8008eea:	4610      	mov	r0, r2
 8008eec:	f000 fa78 	bl	80093e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2201      	movs	r2, #1
 8008f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2201      	movs	r2, #1
 8008f34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3708      	adds	r7, #8
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b084      	sub	sp, #16
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	691b      	ldr	r3, [r3, #16]
 8008f70:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	f003 0302 	and.w	r3, r3, #2
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d020      	beq.n	8008fbe <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f003 0302 	and.w	r3, r3, #2
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d01b      	beq.n	8008fbe <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f06f 0202 	mvn.w	r2, #2
 8008f8e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	f003 0303 	and.w	r3, r3, #3
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d003      	beq.n	8008fac <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 f9fd 	bl	80093a4 <HAL_TIM_IC_CaptureCallback>
 8008faa:	e005      	b.n	8008fb8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 f9ef 	bl	8009390 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 fa00 	bl	80093b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	f003 0304 	and.w	r3, r3, #4
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d020      	beq.n	800900a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f003 0304 	and.w	r3, r3, #4
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d01b      	beq.n	800900a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f06f 0204 	mvn.w	r2, #4
 8008fda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2202      	movs	r2, #2
 8008fe0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d003      	beq.n	8008ff8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 f9d7 	bl	80093a4 <HAL_TIM_IC_CaptureCallback>
 8008ff6:	e005      	b.n	8009004 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 f9c9 	bl	8009390 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f9da 	bl	80093b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	f003 0308 	and.w	r3, r3, #8
 8009010:	2b00      	cmp	r3, #0
 8009012:	d020      	beq.n	8009056 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f003 0308 	and.w	r3, r3, #8
 800901a:	2b00      	cmp	r3, #0
 800901c:	d01b      	beq.n	8009056 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f06f 0208 	mvn.w	r2, #8
 8009026:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2204      	movs	r2, #4
 800902c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	69db      	ldr	r3, [r3, #28]
 8009034:	f003 0303 	and.w	r3, r3, #3
 8009038:	2b00      	cmp	r3, #0
 800903a:	d003      	beq.n	8009044 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 f9b1 	bl	80093a4 <HAL_TIM_IC_CaptureCallback>
 8009042:	e005      	b.n	8009050 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 f9a3 	bl	8009390 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f9b4 	bl	80093b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	f003 0310 	and.w	r3, r3, #16
 800905c:	2b00      	cmp	r3, #0
 800905e:	d020      	beq.n	80090a2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f003 0310 	and.w	r3, r3, #16
 8009066:	2b00      	cmp	r3, #0
 8009068:	d01b      	beq.n	80090a2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f06f 0210 	mvn.w	r2, #16
 8009072:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2208      	movs	r2, #8
 8009078:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	69db      	ldr	r3, [r3, #28]
 8009080:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009084:	2b00      	cmp	r3, #0
 8009086:	d003      	beq.n	8009090 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f98b 	bl	80093a4 <HAL_TIM_IC_CaptureCallback>
 800908e:	e005      	b.n	800909c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 f97d 	bl	8009390 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 f98e 	bl	80093b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	f003 0301 	and.w	r3, r3, #1
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00c      	beq.n	80090c6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f003 0301 	and.w	r3, r3, #1
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d007      	beq.n	80090c6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f06f 0201 	mvn.w	r2, #1
 80090be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f7f7 ff4d 	bl	8000f60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d104      	bne.n	80090da <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d00c      	beq.n	80090f4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d007      	beq.n	80090f4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80090ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fd9e 	bl	8009c30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d00c      	beq.n	8009118 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009104:	2b00      	cmp	r3, #0
 8009106:	d007      	beq.n	8009118 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 fd96 	bl	8009c44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800911e:	2b00      	cmp	r3, #0
 8009120:	d00c      	beq.n	800913c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009128:	2b00      	cmp	r3, #0
 800912a:	d007      	beq.n	800913c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 f948 	bl	80093cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	f003 0320 	and.w	r3, r3, #32
 8009142:	2b00      	cmp	r3, #0
 8009144:	d00c      	beq.n	8009160 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f003 0320 	and.w	r3, r3, #32
 800914c:	2b00      	cmp	r3, #0
 800914e:	d007      	beq.n	8009160 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f06f 0220 	mvn.w	r2, #32
 8009158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 fd5e 	bl	8009c1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009160:	bf00      	nop
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b086      	sub	sp, #24
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009174:	2300      	movs	r3, #0
 8009176:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800917e:	2b01      	cmp	r3, #1
 8009180:	d101      	bne.n	8009186 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009182:	2302      	movs	r3, #2
 8009184:	e0ff      	b.n	8009386 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2201      	movs	r2, #1
 800918a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2b14      	cmp	r3, #20
 8009192:	f200 80f0 	bhi.w	8009376 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009196:	a201      	add	r2, pc, #4	@ (adr r2, 800919c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800919c:	080091f1 	.word	0x080091f1
 80091a0:	08009377 	.word	0x08009377
 80091a4:	08009377 	.word	0x08009377
 80091a8:	08009377 	.word	0x08009377
 80091ac:	08009231 	.word	0x08009231
 80091b0:	08009377 	.word	0x08009377
 80091b4:	08009377 	.word	0x08009377
 80091b8:	08009377 	.word	0x08009377
 80091bc:	08009273 	.word	0x08009273
 80091c0:	08009377 	.word	0x08009377
 80091c4:	08009377 	.word	0x08009377
 80091c8:	08009377 	.word	0x08009377
 80091cc:	080092b3 	.word	0x080092b3
 80091d0:	08009377 	.word	0x08009377
 80091d4:	08009377 	.word	0x08009377
 80091d8:	08009377 	.word	0x08009377
 80091dc:	080092f5 	.word	0x080092f5
 80091e0:	08009377 	.word	0x08009377
 80091e4:	08009377 	.word	0x08009377
 80091e8:	08009377 	.word	0x08009377
 80091ec:	08009335 	.word	0x08009335
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	68b9      	ldr	r1, [r7, #8]
 80091f6:	4618      	mov	r0, r3
 80091f8:	f000 f99e 	bl	8009538 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	699a      	ldr	r2, [r3, #24]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f042 0208 	orr.w	r2, r2, #8
 800920a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	699a      	ldr	r2, [r3, #24]
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f022 0204 	bic.w	r2, r2, #4
 800921a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	6999      	ldr	r1, [r3, #24]
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	691a      	ldr	r2, [r3, #16]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	430a      	orrs	r2, r1
 800922c:	619a      	str	r2, [r3, #24]
      break;
 800922e:	e0a5      	b.n	800937c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	68b9      	ldr	r1, [r7, #8]
 8009236:	4618      	mov	r0, r3
 8009238:	f000 fa0e 	bl	8009658 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	699a      	ldr	r2, [r3, #24]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800924a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	699a      	ldr	r2, [r3, #24]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800925a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6999      	ldr	r1, [r3, #24]
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	021a      	lsls	r2, r3, #8
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	430a      	orrs	r2, r1
 800926e:	619a      	str	r2, [r3, #24]
      break;
 8009270:	e084      	b.n	800937c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	68b9      	ldr	r1, [r7, #8]
 8009278:	4618      	mov	r0, r3
 800927a:	f000 fa77 	bl	800976c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	69da      	ldr	r2, [r3, #28]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f042 0208 	orr.w	r2, r2, #8
 800928c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	69da      	ldr	r2, [r3, #28]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f022 0204 	bic.w	r2, r2, #4
 800929c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	69d9      	ldr	r1, [r3, #28]
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	691a      	ldr	r2, [r3, #16]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	430a      	orrs	r2, r1
 80092ae:	61da      	str	r2, [r3, #28]
      break;
 80092b0:	e064      	b.n	800937c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	68b9      	ldr	r1, [r7, #8]
 80092b8:	4618      	mov	r0, r3
 80092ba:	f000 fadf 	bl	800987c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	69da      	ldr	r2, [r3, #28]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80092cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	69da      	ldr	r2, [r3, #28]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80092dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	69d9      	ldr	r1, [r3, #28]
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	691b      	ldr	r3, [r3, #16]
 80092e8:	021a      	lsls	r2, r3, #8
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	430a      	orrs	r2, r1
 80092f0:	61da      	str	r2, [r3, #28]
      break;
 80092f2:	e043      	b.n	800937c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	68b9      	ldr	r1, [r7, #8]
 80092fa:	4618      	mov	r0, r3
 80092fc:	f000 fb28 	bl	8009950 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f042 0208 	orr.w	r2, r2, #8
 800930e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f022 0204 	bic.w	r2, r2, #4
 800931e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	691a      	ldr	r2, [r3, #16]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	430a      	orrs	r2, r1
 8009330:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009332:	e023      	b.n	800937c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	68b9      	ldr	r1, [r7, #8]
 800933a:	4618      	mov	r0, r3
 800933c:	f000 fb6c 	bl	8009a18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800934e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800935e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	021a      	lsls	r2, r3, #8
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	430a      	orrs	r2, r1
 8009372:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009374:	e002      	b.n	800937c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009376:	2301      	movs	r3, #1
 8009378:	75fb      	strb	r3, [r7, #23]
      break;
 800937a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2200      	movs	r2, #0
 8009380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009384:	7dfb      	ldrb	r3, [r7, #23]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3718      	adds	r7, #24
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop

08009390 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009398:	bf00      	nop
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80093ac:	bf00      	nop
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80093c0:	bf00      	nop
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80093d4:	bf00      	nop
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b085      	sub	sp, #20
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	4a47      	ldr	r2, [pc, #284]	@ (8009510 <TIM_Base_SetConfig+0x130>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d013      	beq.n	8009420 <TIM_Base_SetConfig+0x40>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093fe:	d00f      	beq.n	8009420 <TIM_Base_SetConfig+0x40>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4a44      	ldr	r2, [pc, #272]	@ (8009514 <TIM_Base_SetConfig+0x134>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d00b      	beq.n	8009420 <TIM_Base_SetConfig+0x40>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4a43      	ldr	r2, [pc, #268]	@ (8009518 <TIM_Base_SetConfig+0x138>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d007      	beq.n	8009420 <TIM_Base_SetConfig+0x40>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4a42      	ldr	r2, [pc, #264]	@ (800951c <TIM_Base_SetConfig+0x13c>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d003      	beq.n	8009420 <TIM_Base_SetConfig+0x40>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a41      	ldr	r2, [pc, #260]	@ (8009520 <TIM_Base_SetConfig+0x140>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d108      	bne.n	8009432 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	68fa      	ldr	r2, [r7, #12]
 800942e:	4313      	orrs	r3, r2
 8009430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a36      	ldr	r2, [pc, #216]	@ (8009510 <TIM_Base_SetConfig+0x130>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d027      	beq.n	800948a <TIM_Base_SetConfig+0xaa>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009440:	d023      	beq.n	800948a <TIM_Base_SetConfig+0xaa>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a33      	ldr	r2, [pc, #204]	@ (8009514 <TIM_Base_SetConfig+0x134>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d01f      	beq.n	800948a <TIM_Base_SetConfig+0xaa>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4a32      	ldr	r2, [pc, #200]	@ (8009518 <TIM_Base_SetConfig+0x138>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d01b      	beq.n	800948a <TIM_Base_SetConfig+0xaa>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4a31      	ldr	r2, [pc, #196]	@ (800951c <TIM_Base_SetConfig+0x13c>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d017      	beq.n	800948a <TIM_Base_SetConfig+0xaa>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4a30      	ldr	r2, [pc, #192]	@ (8009520 <TIM_Base_SetConfig+0x140>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d013      	beq.n	800948a <TIM_Base_SetConfig+0xaa>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	4a2f      	ldr	r2, [pc, #188]	@ (8009524 <TIM_Base_SetConfig+0x144>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d00f      	beq.n	800948a <TIM_Base_SetConfig+0xaa>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a2e      	ldr	r2, [pc, #184]	@ (8009528 <TIM_Base_SetConfig+0x148>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d00b      	beq.n	800948a <TIM_Base_SetConfig+0xaa>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a2d      	ldr	r2, [pc, #180]	@ (800952c <TIM_Base_SetConfig+0x14c>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d007      	beq.n	800948a <TIM_Base_SetConfig+0xaa>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a2c      	ldr	r2, [pc, #176]	@ (8009530 <TIM_Base_SetConfig+0x150>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d003      	beq.n	800948a <TIM_Base_SetConfig+0xaa>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a2b      	ldr	r2, [pc, #172]	@ (8009534 <TIM_Base_SetConfig+0x154>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d108      	bne.n	800949c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009490:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	4313      	orrs	r3, r2
 800949a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	695b      	ldr	r3, [r3, #20]
 80094a6:	4313      	orrs	r3, r2
 80094a8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	689a      	ldr	r2, [r3, #8]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a14      	ldr	r2, [pc, #80]	@ (8009510 <TIM_Base_SetConfig+0x130>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d00f      	beq.n	80094e2 <TIM_Base_SetConfig+0x102>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a16      	ldr	r2, [pc, #88]	@ (8009520 <TIM_Base_SetConfig+0x140>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d00b      	beq.n	80094e2 <TIM_Base_SetConfig+0x102>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a15      	ldr	r2, [pc, #84]	@ (8009524 <TIM_Base_SetConfig+0x144>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d007      	beq.n	80094e2 <TIM_Base_SetConfig+0x102>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a14      	ldr	r2, [pc, #80]	@ (8009528 <TIM_Base_SetConfig+0x148>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d003      	beq.n	80094e2 <TIM_Base_SetConfig+0x102>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a13      	ldr	r2, [pc, #76]	@ (800952c <TIM_Base_SetConfig+0x14c>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d103      	bne.n	80094ea <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	691a      	ldr	r2, [r3, #16]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f043 0204 	orr.w	r2, r3, #4
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2201      	movs	r2, #1
 80094fa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	601a      	str	r2, [r3, #0]
}
 8009502:	bf00      	nop
 8009504:	3714      	adds	r7, #20
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	40010000 	.word	0x40010000
 8009514:	40000400 	.word	0x40000400
 8009518:	40000800 	.word	0x40000800
 800951c:	40000c00 	.word	0x40000c00
 8009520:	40010400 	.word	0x40010400
 8009524:	40014000 	.word	0x40014000
 8009528:	40014400 	.word	0x40014400
 800952c:	40014800 	.word	0x40014800
 8009530:	4000e000 	.word	0x4000e000
 8009534:	4000e400 	.word	0x4000e400

08009538 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009538:	b480      	push	{r7}
 800953a:	b087      	sub	sp, #28
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a1b      	ldr	r3, [r3, #32]
 8009546:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6a1b      	ldr	r3, [r3, #32]
 800954c:	f023 0201 	bic.w	r2, r3, #1
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	699b      	ldr	r3, [r3, #24]
 800955e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	4b37      	ldr	r3, [pc, #220]	@ (8009640 <TIM_OC1_SetConfig+0x108>)
 8009564:	4013      	ands	r3, r2
 8009566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f023 0303 	bic.w	r3, r3, #3
 800956e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	4313      	orrs	r3, r2
 8009578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	f023 0302 	bic.w	r3, r3, #2
 8009580:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	697a      	ldr	r2, [r7, #20]
 8009588:	4313      	orrs	r3, r2
 800958a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	4a2d      	ldr	r2, [pc, #180]	@ (8009644 <TIM_OC1_SetConfig+0x10c>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d00f      	beq.n	80095b4 <TIM_OC1_SetConfig+0x7c>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	4a2c      	ldr	r2, [pc, #176]	@ (8009648 <TIM_OC1_SetConfig+0x110>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d00b      	beq.n	80095b4 <TIM_OC1_SetConfig+0x7c>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a2b      	ldr	r2, [pc, #172]	@ (800964c <TIM_OC1_SetConfig+0x114>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d007      	beq.n	80095b4 <TIM_OC1_SetConfig+0x7c>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a2a      	ldr	r2, [pc, #168]	@ (8009650 <TIM_OC1_SetConfig+0x118>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d003      	beq.n	80095b4 <TIM_OC1_SetConfig+0x7c>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4a29      	ldr	r2, [pc, #164]	@ (8009654 <TIM_OC1_SetConfig+0x11c>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d10c      	bne.n	80095ce <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	f023 0308 	bic.w	r3, r3, #8
 80095ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	f023 0304 	bic.w	r3, r3, #4
 80095cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4a1c      	ldr	r2, [pc, #112]	@ (8009644 <TIM_OC1_SetConfig+0x10c>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d00f      	beq.n	80095f6 <TIM_OC1_SetConfig+0xbe>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4a1b      	ldr	r2, [pc, #108]	@ (8009648 <TIM_OC1_SetConfig+0x110>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d00b      	beq.n	80095f6 <TIM_OC1_SetConfig+0xbe>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4a1a      	ldr	r2, [pc, #104]	@ (800964c <TIM_OC1_SetConfig+0x114>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d007      	beq.n	80095f6 <TIM_OC1_SetConfig+0xbe>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	4a19      	ldr	r2, [pc, #100]	@ (8009650 <TIM_OC1_SetConfig+0x118>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d003      	beq.n	80095f6 <TIM_OC1_SetConfig+0xbe>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4a18      	ldr	r2, [pc, #96]	@ (8009654 <TIM_OC1_SetConfig+0x11c>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d111      	bne.n	800961a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009604:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	695b      	ldr	r3, [r3, #20]
 800960a:	693a      	ldr	r2, [r7, #16]
 800960c:	4313      	orrs	r3, r2
 800960e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	699b      	ldr	r3, [r3, #24]
 8009614:	693a      	ldr	r2, [r7, #16]
 8009616:	4313      	orrs	r3, r2
 8009618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	693a      	ldr	r2, [r7, #16]
 800961e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	68fa      	ldr	r2, [r7, #12]
 8009624:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	685a      	ldr	r2, [r3, #4]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	697a      	ldr	r2, [r7, #20]
 8009632:	621a      	str	r2, [r3, #32]
}
 8009634:	bf00      	nop
 8009636:	371c      	adds	r7, #28
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr
 8009640:	fffeff8f 	.word	0xfffeff8f
 8009644:	40010000 	.word	0x40010000
 8009648:	40010400 	.word	0x40010400
 800964c:	40014000 	.word	0x40014000
 8009650:	40014400 	.word	0x40014400
 8009654:	40014800 	.word	0x40014800

08009658 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009658:	b480      	push	{r7}
 800965a:	b087      	sub	sp, #28
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a1b      	ldr	r3, [r3, #32]
 8009666:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6a1b      	ldr	r3, [r3, #32]
 800966c:	f023 0210 	bic.w	r2, r3, #16
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	699b      	ldr	r3, [r3, #24]
 800967e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	4b34      	ldr	r3, [pc, #208]	@ (8009754 <TIM_OC2_SetConfig+0xfc>)
 8009684:	4013      	ands	r3, r2
 8009686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800968e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	021b      	lsls	r3, r3, #8
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	4313      	orrs	r3, r2
 800969a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	f023 0320 	bic.w	r3, r3, #32
 80096a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	011b      	lsls	r3, r3, #4
 80096aa:	697a      	ldr	r2, [r7, #20]
 80096ac:	4313      	orrs	r3, r2
 80096ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	4a29      	ldr	r2, [pc, #164]	@ (8009758 <TIM_OC2_SetConfig+0x100>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d003      	beq.n	80096c0 <TIM_OC2_SetConfig+0x68>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4a28      	ldr	r2, [pc, #160]	@ (800975c <TIM_OC2_SetConfig+0x104>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d10d      	bne.n	80096dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80096c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	011b      	lsls	r3, r3, #4
 80096ce:	697a      	ldr	r2, [r7, #20]
 80096d0:	4313      	orrs	r3, r2
 80096d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	4a1e      	ldr	r2, [pc, #120]	@ (8009758 <TIM_OC2_SetConfig+0x100>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d00f      	beq.n	8009704 <TIM_OC2_SetConfig+0xac>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	4a1d      	ldr	r2, [pc, #116]	@ (800975c <TIM_OC2_SetConfig+0x104>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d00b      	beq.n	8009704 <TIM_OC2_SetConfig+0xac>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	4a1c      	ldr	r2, [pc, #112]	@ (8009760 <TIM_OC2_SetConfig+0x108>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d007      	beq.n	8009704 <TIM_OC2_SetConfig+0xac>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	4a1b      	ldr	r2, [pc, #108]	@ (8009764 <TIM_OC2_SetConfig+0x10c>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d003      	beq.n	8009704 <TIM_OC2_SetConfig+0xac>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	4a1a      	ldr	r2, [pc, #104]	@ (8009768 <TIM_OC2_SetConfig+0x110>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d113      	bne.n	800972c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800970a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009712:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	695b      	ldr	r3, [r3, #20]
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	693a      	ldr	r2, [r7, #16]
 800971c:	4313      	orrs	r3, r2
 800971e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	699b      	ldr	r3, [r3, #24]
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	693a      	ldr	r2, [r7, #16]
 8009728:	4313      	orrs	r3, r2
 800972a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	693a      	ldr	r2, [r7, #16]
 8009730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	685a      	ldr	r2, [r3, #4]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	697a      	ldr	r2, [r7, #20]
 8009744:	621a      	str	r2, [r3, #32]
}
 8009746:	bf00      	nop
 8009748:	371c      	adds	r7, #28
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	feff8fff 	.word	0xfeff8fff
 8009758:	40010000 	.word	0x40010000
 800975c:	40010400 	.word	0x40010400
 8009760:	40014000 	.word	0x40014000
 8009764:	40014400 	.word	0x40014400
 8009768:	40014800 	.word	0x40014800

0800976c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800976c:	b480      	push	{r7}
 800976e:	b087      	sub	sp, #28
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6a1b      	ldr	r3, [r3, #32]
 800977a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6a1b      	ldr	r3, [r3, #32]
 8009780:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	69db      	ldr	r3, [r3, #28]
 8009792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009794:	68fa      	ldr	r2, [r7, #12]
 8009796:	4b33      	ldr	r3, [pc, #204]	@ (8009864 <TIM_OC3_SetConfig+0xf8>)
 8009798:	4013      	ands	r3, r2
 800979a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f023 0303 	bic.w	r3, r3, #3
 80097a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	4313      	orrs	r3, r2
 80097ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80097b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	021b      	lsls	r3, r3, #8
 80097bc:	697a      	ldr	r2, [r7, #20]
 80097be:	4313      	orrs	r3, r2
 80097c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4a28      	ldr	r2, [pc, #160]	@ (8009868 <TIM_OC3_SetConfig+0xfc>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d003      	beq.n	80097d2 <TIM_OC3_SetConfig+0x66>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4a27      	ldr	r2, [pc, #156]	@ (800986c <TIM_OC3_SetConfig+0x100>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d10d      	bne.n	80097ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80097d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	021b      	lsls	r3, r3, #8
 80097e0:	697a      	ldr	r2, [r7, #20]
 80097e2:	4313      	orrs	r3, r2
 80097e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80097ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	4a1d      	ldr	r2, [pc, #116]	@ (8009868 <TIM_OC3_SetConfig+0xfc>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d00f      	beq.n	8009816 <TIM_OC3_SetConfig+0xaa>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	4a1c      	ldr	r2, [pc, #112]	@ (800986c <TIM_OC3_SetConfig+0x100>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d00b      	beq.n	8009816 <TIM_OC3_SetConfig+0xaa>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	4a1b      	ldr	r2, [pc, #108]	@ (8009870 <TIM_OC3_SetConfig+0x104>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d007      	beq.n	8009816 <TIM_OC3_SetConfig+0xaa>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	4a1a      	ldr	r2, [pc, #104]	@ (8009874 <TIM_OC3_SetConfig+0x108>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d003      	beq.n	8009816 <TIM_OC3_SetConfig+0xaa>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	4a19      	ldr	r2, [pc, #100]	@ (8009878 <TIM_OC3_SetConfig+0x10c>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d113      	bne.n	800983e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800981c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009824:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	695b      	ldr	r3, [r3, #20]
 800982a:	011b      	lsls	r3, r3, #4
 800982c:	693a      	ldr	r2, [r7, #16]
 800982e:	4313      	orrs	r3, r2
 8009830:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	699b      	ldr	r3, [r3, #24]
 8009836:	011b      	lsls	r3, r3, #4
 8009838:	693a      	ldr	r2, [r7, #16]
 800983a:	4313      	orrs	r3, r2
 800983c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	693a      	ldr	r2, [r7, #16]
 8009842:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	68fa      	ldr	r2, [r7, #12]
 8009848:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	685a      	ldr	r2, [r3, #4]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	697a      	ldr	r2, [r7, #20]
 8009856:	621a      	str	r2, [r3, #32]
}
 8009858:	bf00      	nop
 800985a:	371c      	adds	r7, #28
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr
 8009864:	fffeff8f 	.word	0xfffeff8f
 8009868:	40010000 	.word	0x40010000
 800986c:	40010400 	.word	0x40010400
 8009870:	40014000 	.word	0x40014000
 8009874:	40014400 	.word	0x40014400
 8009878:	40014800 	.word	0x40014800

0800987c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800987c:	b480      	push	{r7}
 800987e:	b087      	sub	sp, #28
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6a1b      	ldr	r3, [r3, #32]
 800988a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6a1b      	ldr	r3, [r3, #32]
 8009890:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	69db      	ldr	r3, [r3, #28]
 80098a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80098a4:	68fa      	ldr	r2, [r7, #12]
 80098a6:	4b24      	ldr	r3, [pc, #144]	@ (8009938 <TIM_OC4_SetConfig+0xbc>)
 80098a8:	4013      	ands	r3, r2
 80098aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	021b      	lsls	r3, r3, #8
 80098ba:	68fa      	ldr	r2, [r7, #12]
 80098bc:	4313      	orrs	r3, r2
 80098be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80098c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	689b      	ldr	r3, [r3, #8]
 80098cc:	031b      	lsls	r3, r3, #12
 80098ce:	693a      	ldr	r2, [r7, #16]
 80098d0:	4313      	orrs	r3, r2
 80098d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	4a19      	ldr	r2, [pc, #100]	@ (800993c <TIM_OC4_SetConfig+0xc0>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d00f      	beq.n	80098fc <TIM_OC4_SetConfig+0x80>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	4a18      	ldr	r2, [pc, #96]	@ (8009940 <TIM_OC4_SetConfig+0xc4>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d00b      	beq.n	80098fc <TIM_OC4_SetConfig+0x80>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	4a17      	ldr	r2, [pc, #92]	@ (8009944 <TIM_OC4_SetConfig+0xc8>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d007      	beq.n	80098fc <TIM_OC4_SetConfig+0x80>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	4a16      	ldr	r2, [pc, #88]	@ (8009948 <TIM_OC4_SetConfig+0xcc>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d003      	beq.n	80098fc <TIM_OC4_SetConfig+0x80>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	4a15      	ldr	r2, [pc, #84]	@ (800994c <TIM_OC4_SetConfig+0xd0>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d109      	bne.n	8009910 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009902:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	695b      	ldr	r3, [r3, #20]
 8009908:	019b      	lsls	r3, r3, #6
 800990a:	697a      	ldr	r2, [r7, #20]
 800990c:	4313      	orrs	r3, r2
 800990e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	697a      	ldr	r2, [r7, #20]
 8009914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	685a      	ldr	r2, [r3, #4]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	693a      	ldr	r2, [r7, #16]
 8009928:	621a      	str	r2, [r3, #32]
}
 800992a:	bf00      	nop
 800992c:	371c      	adds	r7, #28
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr
 8009936:	bf00      	nop
 8009938:	feff8fff 	.word	0xfeff8fff
 800993c:	40010000 	.word	0x40010000
 8009940:	40010400 	.word	0x40010400
 8009944:	40014000 	.word	0x40014000
 8009948:	40014400 	.word	0x40014400
 800994c:	40014800 	.word	0x40014800

08009950 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009950:	b480      	push	{r7}
 8009952:	b087      	sub	sp, #28
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a1b      	ldr	r3, [r3, #32]
 800995e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6a1b      	ldr	r3, [r3, #32]
 8009964:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	4b21      	ldr	r3, [pc, #132]	@ (8009a00 <TIM_OC5_SetConfig+0xb0>)
 800997c:	4013      	ands	r3, r2
 800997e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	68fa      	ldr	r2, [r7, #12]
 8009986:	4313      	orrs	r3, r2
 8009988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009990:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	041b      	lsls	r3, r3, #16
 8009998:	693a      	ldr	r2, [r7, #16]
 800999a:	4313      	orrs	r3, r2
 800999c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	4a18      	ldr	r2, [pc, #96]	@ (8009a04 <TIM_OC5_SetConfig+0xb4>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d00f      	beq.n	80099c6 <TIM_OC5_SetConfig+0x76>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	4a17      	ldr	r2, [pc, #92]	@ (8009a08 <TIM_OC5_SetConfig+0xb8>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d00b      	beq.n	80099c6 <TIM_OC5_SetConfig+0x76>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4a16      	ldr	r2, [pc, #88]	@ (8009a0c <TIM_OC5_SetConfig+0xbc>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d007      	beq.n	80099c6 <TIM_OC5_SetConfig+0x76>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	4a15      	ldr	r2, [pc, #84]	@ (8009a10 <TIM_OC5_SetConfig+0xc0>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d003      	beq.n	80099c6 <TIM_OC5_SetConfig+0x76>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	4a14      	ldr	r2, [pc, #80]	@ (8009a14 <TIM_OC5_SetConfig+0xc4>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d109      	bne.n	80099da <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80099cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	695b      	ldr	r3, [r3, #20]
 80099d2:	021b      	lsls	r3, r3, #8
 80099d4:	697a      	ldr	r2, [r7, #20]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	697a      	ldr	r2, [r7, #20]
 80099de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	68fa      	ldr	r2, [r7, #12]
 80099e4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	685a      	ldr	r2, [r3, #4]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	693a      	ldr	r2, [r7, #16]
 80099f2:	621a      	str	r2, [r3, #32]
}
 80099f4:	bf00      	nop
 80099f6:	371c      	adds	r7, #28
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr
 8009a00:	fffeff8f 	.word	0xfffeff8f
 8009a04:	40010000 	.word	0x40010000
 8009a08:	40010400 	.word	0x40010400
 8009a0c:	40014000 	.word	0x40014000
 8009a10:	40014400 	.word	0x40014400
 8009a14:	40014800 	.word	0x40014800

08009a18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b087      	sub	sp, #28
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6a1b      	ldr	r3, [r3, #32]
 8009a26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6a1b      	ldr	r3, [r3, #32]
 8009a2c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	4b22      	ldr	r3, [pc, #136]	@ (8009acc <TIM_OC6_SetConfig+0xb4>)
 8009a44:	4013      	ands	r3, r2
 8009a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	021b      	lsls	r3, r3, #8
 8009a4e:	68fa      	ldr	r2, [r7, #12]
 8009a50:	4313      	orrs	r3, r2
 8009a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009a5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	051b      	lsls	r3, r3, #20
 8009a62:	693a      	ldr	r2, [r7, #16]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	4a19      	ldr	r2, [pc, #100]	@ (8009ad0 <TIM_OC6_SetConfig+0xb8>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d00f      	beq.n	8009a90 <TIM_OC6_SetConfig+0x78>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	4a18      	ldr	r2, [pc, #96]	@ (8009ad4 <TIM_OC6_SetConfig+0xbc>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d00b      	beq.n	8009a90 <TIM_OC6_SetConfig+0x78>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	4a17      	ldr	r2, [pc, #92]	@ (8009ad8 <TIM_OC6_SetConfig+0xc0>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d007      	beq.n	8009a90 <TIM_OC6_SetConfig+0x78>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4a16      	ldr	r2, [pc, #88]	@ (8009adc <TIM_OC6_SetConfig+0xc4>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d003      	beq.n	8009a90 <TIM_OC6_SetConfig+0x78>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	4a15      	ldr	r2, [pc, #84]	@ (8009ae0 <TIM_OC6_SetConfig+0xc8>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d109      	bne.n	8009aa4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009a96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	695b      	ldr	r3, [r3, #20]
 8009a9c:	029b      	lsls	r3, r3, #10
 8009a9e:	697a      	ldr	r2, [r7, #20]
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	697a      	ldr	r2, [r7, #20]
 8009aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	68fa      	ldr	r2, [r7, #12]
 8009aae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	685a      	ldr	r2, [r3, #4]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	693a      	ldr	r2, [r7, #16]
 8009abc:	621a      	str	r2, [r3, #32]
}
 8009abe:	bf00      	nop
 8009ac0:	371c      	adds	r7, #28
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	feff8fff 	.word	0xfeff8fff
 8009ad0:	40010000 	.word	0x40010000
 8009ad4:	40010400 	.word	0x40010400
 8009ad8:	40014000 	.word	0x40014000
 8009adc:	40014400 	.word	0x40014400
 8009ae0:	40014800 	.word	0x40014800

08009ae4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b085      	sub	sp, #20
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d101      	bne.n	8009afc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009af8:	2302      	movs	r3, #2
 8009afa:	e077      	b.n	8009bec <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2202      	movs	r2, #2
 8009b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	689b      	ldr	r3, [r3, #8]
 8009b1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a35      	ldr	r2, [pc, #212]	@ (8009bf8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d004      	beq.n	8009b30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a34      	ldr	r2, [pc, #208]	@ (8009bfc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d108      	bne.n	8009b42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009b36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	4313      	orrs	r3, r2
 8009b52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a25      	ldr	r2, [pc, #148]	@ (8009bf8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d02c      	beq.n	8009bc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b6e:	d027      	beq.n	8009bc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a22      	ldr	r2, [pc, #136]	@ (8009c00 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d022      	beq.n	8009bc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a21      	ldr	r2, [pc, #132]	@ (8009c04 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d01d      	beq.n	8009bc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a1f      	ldr	r2, [pc, #124]	@ (8009c08 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d018      	beq.n	8009bc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a1a      	ldr	r2, [pc, #104]	@ (8009bfc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d013      	beq.n	8009bc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8009c0c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d00e      	beq.n	8009bc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a1a      	ldr	r2, [pc, #104]	@ (8009c10 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d009      	beq.n	8009bc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a18      	ldr	r2, [pc, #96]	@ (8009c14 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d004      	beq.n	8009bc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a17      	ldr	r2, [pc, #92]	@ (8009c18 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d10c      	bne.n	8009bda <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009bc6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	68ba      	ldr	r2, [r7, #8]
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	68ba      	ldr	r2, [r7, #8]
 8009bd8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009bea:	2300      	movs	r3, #0
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3714      	adds	r7, #20
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr
 8009bf8:	40010000 	.word	0x40010000
 8009bfc:	40010400 	.word	0x40010400
 8009c00:	40000400 	.word	0x40000400
 8009c04:	40000800 	.word	0x40000800
 8009c08:	40000c00 	.word	0x40000c00
 8009c0c:	40001800 	.word	0x40001800
 8009c10:	40014000 	.word	0x40014000
 8009c14:	4000e000 	.word	0x4000e000
 8009c18:	4000e400 	.word	0x4000e400

08009c1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009c24:	bf00      	nop
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c38:	bf00      	nop
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009c4c:	bf00      	nop
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d101      	bne.n	8009c6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	e042      	b.n	8009cf0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d106      	bne.n	8009c82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f7f7 ff07 	bl	8001a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2224      	movs	r2, #36	@ 0x24
 8009c86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f022 0201 	bic.w	r2, r2, #1
 8009c98:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d002      	beq.n	8009ca8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f001 fa8a 	bl	800b1bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 fc1b 	bl	800a4e4 <UART_SetConfig>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d101      	bne.n	8009cb8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	e01b      	b.n	8009cf0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	685a      	ldr	r2, [r3, #4]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009cc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	689a      	ldr	r2, [r3, #8]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009cd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f042 0201 	orr.w	r2, r2, #1
 8009ce6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f001 fb09 	bl	800b300 <UART_CheckIdleState>
 8009cee:	4603      	mov	r3, r0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3708      	adds	r7, #8
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b0ba      	sub	sp, #232	@ 0xe8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	69db      	ldr	r3, [r3, #28]
 8009d06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009d1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009d22:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009d26:	4013      	ands	r3, r2
 8009d28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009d2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d11b      	bne.n	8009d6c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d38:	f003 0320 	and.w	r3, r3, #32
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d015      	beq.n	8009d6c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d44:	f003 0320 	and.w	r3, r3, #32
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d105      	bne.n	8009d58 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009d4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d009      	beq.n	8009d6c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	f000 8393 	beq.w	800a488 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	4798      	blx	r3
      }
      return;
 8009d6a:	e38d      	b.n	800a488 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009d6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	f000 8123 	beq.w	8009fbc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009d76:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009d7a:	4b8d      	ldr	r3, [pc, #564]	@ (8009fb0 <HAL_UART_IRQHandler+0x2b8>)
 8009d7c:	4013      	ands	r3, r2
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d106      	bne.n	8009d90 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009d82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009d86:	4b8b      	ldr	r3, [pc, #556]	@ (8009fb4 <HAL_UART_IRQHandler+0x2bc>)
 8009d88:	4013      	ands	r3, r2
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	f000 8116 	beq.w	8009fbc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d94:	f003 0301 	and.w	r3, r3, #1
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d011      	beq.n	8009dc0 <HAL_UART_IRQHandler+0xc8>
 8009d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00b      	beq.n	8009dc0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2201      	movs	r2, #1
 8009dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009db6:	f043 0201 	orr.w	r2, r3, #1
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dc4:	f003 0302 	and.w	r3, r3, #2
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d011      	beq.n	8009df0 <HAL_UART_IRQHandler+0xf8>
 8009dcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009dd0:	f003 0301 	and.w	r3, r3, #1
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d00b      	beq.n	8009df0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2202      	movs	r2, #2
 8009dde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009de6:	f043 0204 	orr.w	r2, r3, #4
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009df4:	f003 0304 	and.w	r3, r3, #4
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d011      	beq.n	8009e20 <HAL_UART_IRQHandler+0x128>
 8009dfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e00:	f003 0301 	and.w	r3, r3, #1
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d00b      	beq.n	8009e20 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2204      	movs	r2, #4
 8009e0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e16:	f043 0202 	orr.w	r2, r3, #2
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e24:	f003 0308 	and.w	r3, r3, #8
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d017      	beq.n	8009e5c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e30:	f003 0320 	and.w	r3, r3, #32
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d105      	bne.n	8009e44 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009e38:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009e3c:	4b5c      	ldr	r3, [pc, #368]	@ (8009fb0 <HAL_UART_IRQHandler+0x2b8>)
 8009e3e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00b      	beq.n	8009e5c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2208      	movs	r2, #8
 8009e4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e52:	f043 0208 	orr.w	r2, r3, #8
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d012      	beq.n	8009e8e <HAL_UART_IRQHandler+0x196>
 8009e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d00c      	beq.n	8009e8e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009e7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e84:	f043 0220 	orr.w	r2, r3, #32
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	f000 82f9 	beq.w	800a48c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e9e:	f003 0320 	and.w	r3, r3, #32
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d013      	beq.n	8009ece <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009eaa:	f003 0320 	and.w	r3, r3, #32
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d105      	bne.n	8009ebe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d007      	beq.n	8009ece <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d003      	beq.n	8009ece <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ed4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ee2:	2b40      	cmp	r3, #64	@ 0x40
 8009ee4:	d005      	beq.n	8009ef2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009ee6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009eea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d054      	beq.n	8009f9c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f001 fb1c 	bl	800b530 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f02:	2b40      	cmp	r3, #64	@ 0x40
 8009f04:	d146      	bne.n	8009f94 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	3308      	adds	r3, #8
 8009f0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009f14:	e853 3f00 	ldrex	r3, [r3]
 8009f18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009f1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009f20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	3308      	adds	r3, #8
 8009f2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009f32:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009f36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009f3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009f42:	e841 2300 	strex	r3, r2, [r1]
 8009f46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009f4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d1d9      	bne.n	8009f06 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d017      	beq.n	8009f8c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f62:	4a15      	ldr	r2, [pc, #84]	@ (8009fb8 <HAL_UART_IRQHandler+0x2c0>)
 8009f64:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f7f9 f88f 	bl	8003090 <HAL_DMA_Abort_IT>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d019      	beq.n	8009fac <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009f86:	4610      	mov	r0, r2
 8009f88:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f8a:	e00f      	b.n	8009fac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 fa93 	bl	800a4b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f92:	e00b      	b.n	8009fac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 fa8f 	bl	800a4b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f9a:	e007      	b.n	8009fac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 fa8b 	bl	800a4b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009faa:	e26f      	b.n	800a48c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fac:	bf00      	nop
    return;
 8009fae:	e26d      	b.n	800a48c <HAL_UART_IRQHandler+0x794>
 8009fb0:	10000001 	.word	0x10000001
 8009fb4:	04000120 	.word	0x04000120
 8009fb8:	0800b5fd 	.word	0x0800b5fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	f040 8203 	bne.w	800a3cc <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fca:	f003 0310 	and.w	r3, r3, #16
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	f000 81fc 	beq.w	800a3cc <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fd8:	f003 0310 	and.w	r3, r3, #16
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	f000 81f5 	beq.w	800a3cc <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	2210      	movs	r2, #16
 8009fe8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ff4:	2b40      	cmp	r3, #64	@ 0x40
 8009ff6:	f040 816d 	bne.w	800a2d4 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4aa4      	ldr	r2, [pc, #656]	@ (800a294 <HAL_UART_IRQHandler+0x59c>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d068      	beq.n	800a0da <HAL_UART_IRQHandler+0x3e2>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4aa1      	ldr	r2, [pc, #644]	@ (800a298 <HAL_UART_IRQHandler+0x5a0>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d061      	beq.n	800a0da <HAL_UART_IRQHandler+0x3e2>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a9f      	ldr	r2, [pc, #636]	@ (800a29c <HAL_UART_IRQHandler+0x5a4>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d05a      	beq.n	800a0da <HAL_UART_IRQHandler+0x3e2>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a9c      	ldr	r2, [pc, #624]	@ (800a2a0 <HAL_UART_IRQHandler+0x5a8>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d053      	beq.n	800a0da <HAL_UART_IRQHandler+0x3e2>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a9a      	ldr	r2, [pc, #616]	@ (800a2a4 <HAL_UART_IRQHandler+0x5ac>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d04c      	beq.n	800a0da <HAL_UART_IRQHandler+0x3e2>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a97      	ldr	r2, [pc, #604]	@ (800a2a8 <HAL_UART_IRQHandler+0x5b0>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d045      	beq.n	800a0da <HAL_UART_IRQHandler+0x3e2>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4a95      	ldr	r2, [pc, #596]	@ (800a2ac <HAL_UART_IRQHandler+0x5b4>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d03e      	beq.n	800a0da <HAL_UART_IRQHandler+0x3e2>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a92      	ldr	r2, [pc, #584]	@ (800a2b0 <HAL_UART_IRQHandler+0x5b8>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d037      	beq.n	800a0da <HAL_UART_IRQHandler+0x3e2>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4a90      	ldr	r2, [pc, #576]	@ (800a2b4 <HAL_UART_IRQHandler+0x5bc>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d030      	beq.n	800a0da <HAL_UART_IRQHandler+0x3e2>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a8d      	ldr	r2, [pc, #564]	@ (800a2b8 <HAL_UART_IRQHandler+0x5c0>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d029      	beq.n	800a0da <HAL_UART_IRQHandler+0x3e2>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a8b      	ldr	r2, [pc, #556]	@ (800a2bc <HAL_UART_IRQHandler+0x5c4>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d022      	beq.n	800a0da <HAL_UART_IRQHandler+0x3e2>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a88      	ldr	r2, [pc, #544]	@ (800a2c0 <HAL_UART_IRQHandler+0x5c8>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d01b      	beq.n	800a0da <HAL_UART_IRQHandler+0x3e2>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a86      	ldr	r2, [pc, #536]	@ (800a2c4 <HAL_UART_IRQHandler+0x5cc>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d014      	beq.n	800a0da <HAL_UART_IRQHandler+0x3e2>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a83      	ldr	r2, [pc, #524]	@ (800a2c8 <HAL_UART_IRQHandler+0x5d0>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d00d      	beq.n	800a0da <HAL_UART_IRQHandler+0x3e2>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a81      	ldr	r2, [pc, #516]	@ (800a2cc <HAL_UART_IRQHandler+0x5d4>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d006      	beq.n	800a0da <HAL_UART_IRQHandler+0x3e2>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a7e      	ldr	r2, [pc, #504]	@ (800a2d0 <HAL_UART_IRQHandler+0x5d8>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d106      	bne.n	800a0e8 <HAL_UART_IRQHandler+0x3f0>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	e005      	b.n	800a0f4 <HAL_UART_IRQHandler+0x3fc>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a0f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f000 80ad 	beq.w	800a25c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a108:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a10c:	429a      	cmp	r2, r3
 800a10e:	f080 80a5 	bcs.w	800a25c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a118:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a122:	69db      	ldr	r3, [r3, #28]
 800a124:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a128:	f000 8087 	beq.w	800a23a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a134:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a138:	e853 3f00 	ldrex	r3, [r3]
 800a13c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a140:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a144:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a148:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	461a      	mov	r2, r3
 800a152:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a156:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a15a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a15e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a162:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a166:	e841 2300 	strex	r3, r2, [r1]
 800a16a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a16e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a172:	2b00      	cmp	r3, #0
 800a174:	d1da      	bne.n	800a12c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	3308      	adds	r3, #8
 800a17c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a17e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a180:	e853 3f00 	ldrex	r3, [r3]
 800a184:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a186:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a188:	f023 0301 	bic.w	r3, r3, #1
 800a18c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	3308      	adds	r3, #8
 800a196:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a19a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a19e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a1a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a1a6:	e841 2300 	strex	r3, r2, [r1]
 800a1aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a1ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d1e1      	bne.n	800a176 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	3308      	adds	r3, #8
 800a1b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a1bc:	e853 3f00 	ldrex	r3, [r3]
 800a1c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a1c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a1c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	3308      	adds	r3, #8
 800a1d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a1d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a1d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a1dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a1de:	e841 2300 	strex	r3, r2, [r1]
 800a1e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a1e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d1e3      	bne.n	800a1b2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2220      	movs	r2, #32
 800a1ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a200:	e853 3f00 	ldrex	r3, [r3]
 800a204:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a206:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a208:	f023 0310 	bic.w	r3, r3, #16
 800a20c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	461a      	mov	r2, r3
 800a216:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a21a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a21c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a220:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a222:	e841 2300 	strex	r3, r2, [r1]
 800a226:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a228:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1e4      	bne.n	800a1f8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a234:	4618      	mov	r0, r3
 800a236:	f7f8 fc0d 	bl	8002a54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2202      	movs	r2, #2
 800a23e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	1ad3      	subs	r3, r2, r3
 800a250:	b29b      	uxth	r3, r3
 800a252:	4619      	mov	r1, r3
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 f939 	bl	800a4cc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a25a:	e119      	b.n	800a490 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a262:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a266:	429a      	cmp	r2, r3
 800a268:	f040 8112 	bne.w	800a490 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a272:	69db      	ldr	r3, [r3, #28]
 800a274:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a278:	f040 810a 	bne.w	800a490 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2202      	movs	r2, #2
 800a280:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a288:	4619      	mov	r1, r3
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 f91e 	bl	800a4cc <HAL_UARTEx_RxEventCallback>
      return;
 800a290:	e0fe      	b.n	800a490 <HAL_UART_IRQHandler+0x798>
 800a292:	bf00      	nop
 800a294:	40020010 	.word	0x40020010
 800a298:	40020028 	.word	0x40020028
 800a29c:	40020040 	.word	0x40020040
 800a2a0:	40020058 	.word	0x40020058
 800a2a4:	40020070 	.word	0x40020070
 800a2a8:	40020088 	.word	0x40020088
 800a2ac:	400200a0 	.word	0x400200a0
 800a2b0:	400200b8 	.word	0x400200b8
 800a2b4:	40020410 	.word	0x40020410
 800a2b8:	40020428 	.word	0x40020428
 800a2bc:	40020440 	.word	0x40020440
 800a2c0:	40020458 	.word	0x40020458
 800a2c4:	40020470 	.word	0x40020470
 800a2c8:	40020488 	.word	0x40020488
 800a2cc:	400204a0 	.word	0x400204a0
 800a2d0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	1ad3      	subs	r3, r2, r3
 800a2e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	f000 80cf 	beq.w	800a494 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800a2f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	f000 80ca 	beq.w	800a494 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a308:	e853 3f00 	ldrex	r3, [r3]
 800a30c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a30e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a310:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a314:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	461a      	mov	r2, r3
 800a31e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a322:	647b      	str	r3, [r7, #68]	@ 0x44
 800a324:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a326:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a328:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a32a:	e841 2300 	strex	r3, r2, [r1]
 800a32e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a332:	2b00      	cmp	r3, #0
 800a334:	d1e4      	bne.n	800a300 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	3308      	adds	r3, #8
 800a33c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a340:	e853 3f00 	ldrex	r3, [r3]
 800a344:	623b      	str	r3, [r7, #32]
   return(result);
 800a346:	6a3a      	ldr	r2, [r7, #32]
 800a348:	4b55      	ldr	r3, [pc, #340]	@ (800a4a0 <HAL_UART_IRQHandler+0x7a8>)
 800a34a:	4013      	ands	r3, r2
 800a34c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	3308      	adds	r3, #8
 800a356:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a35a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a35c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a35e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a360:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a362:	e841 2300 	strex	r3, r2, [r1]
 800a366:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1e3      	bne.n	800a336 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2220      	movs	r2, #32
 800a372:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2200      	movs	r2, #0
 800a37a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	e853 3f00 	ldrex	r3, [r3]
 800a38e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f023 0310 	bic.w	r3, r3, #16
 800a396:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	461a      	mov	r2, r3
 800a3a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a3a4:	61fb      	str	r3, [r7, #28]
 800a3a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a8:	69b9      	ldr	r1, [r7, #24]
 800a3aa:	69fa      	ldr	r2, [r7, #28]
 800a3ac:	e841 2300 	strex	r3, r2, [r1]
 800a3b0:	617b      	str	r3, [r7, #20]
   return(result);
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d1e4      	bne.n	800a382 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2202      	movs	r2, #2
 800a3bc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a3be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 f881 	bl	800a4cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a3ca:	e063      	b.n	800a494 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a3cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d00e      	beq.n	800a3f6 <HAL_UART_IRQHandler+0x6fe>
 800a3d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a3dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d008      	beq.n	800a3f6 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a3ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f001 f941 	bl	800b676 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a3f4:	e051      	b.n	800a49a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a3f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d014      	beq.n	800a42c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d105      	bne.n	800a41a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a40e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a412:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a416:	2b00      	cmp	r3, #0
 800a418:	d008      	beq.n	800a42c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d03a      	beq.n	800a498 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	4798      	blx	r3
    }
    return;
 800a42a:	e035      	b.n	800a498 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a42c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a434:	2b00      	cmp	r3, #0
 800a436:	d009      	beq.n	800a44c <HAL_UART_IRQHandler+0x754>
 800a438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a43c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a440:	2b00      	cmp	r3, #0
 800a442:	d003      	beq.n	800a44c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f001 f8eb 	bl	800b620 <UART_EndTransmit_IT>
    return;
 800a44a:	e026      	b.n	800a49a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a44c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a450:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a454:	2b00      	cmp	r3, #0
 800a456:	d009      	beq.n	800a46c <HAL_UART_IRQHandler+0x774>
 800a458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a45c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a460:	2b00      	cmp	r3, #0
 800a462:	d003      	beq.n	800a46c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f001 f91a 	bl	800b69e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a46a:	e016      	b.n	800a49a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a46c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a470:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a474:	2b00      	cmp	r3, #0
 800a476:	d010      	beq.n	800a49a <HAL_UART_IRQHandler+0x7a2>
 800a478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	da0c      	bge.n	800a49a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f001 f902 	bl	800b68a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a486:	e008      	b.n	800a49a <HAL_UART_IRQHandler+0x7a2>
      return;
 800a488:	bf00      	nop
 800a48a:	e006      	b.n	800a49a <HAL_UART_IRQHandler+0x7a2>
    return;
 800a48c:	bf00      	nop
 800a48e:	e004      	b.n	800a49a <HAL_UART_IRQHandler+0x7a2>
      return;
 800a490:	bf00      	nop
 800a492:	e002      	b.n	800a49a <HAL_UART_IRQHandler+0x7a2>
      return;
 800a494:	bf00      	nop
 800a496:	e000      	b.n	800a49a <HAL_UART_IRQHandler+0x7a2>
    return;
 800a498:	bf00      	nop
  }
}
 800a49a:	37e8      	adds	r7, #232	@ 0xe8
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	effffffe 	.word	0xeffffffe

0800a4a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a4ac:	bf00      	nop
 800a4ae:	370c      	adds	r7, #12
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a4c0:	bf00      	nop
 800a4c2:	370c      	adds	r7, #12
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a4d8:	bf00      	nop
 800a4da:	370c      	adds	r7, #12
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr

0800a4e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a4e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4e8:	b092      	sub	sp, #72	@ 0x48
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	689a      	ldr	r2, [r3, #8]
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	691b      	ldr	r3, [r3, #16]
 800a4fc:	431a      	orrs	r2, r3
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	695b      	ldr	r3, [r3, #20]
 800a502:	431a      	orrs	r2, r3
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	69db      	ldr	r3, [r3, #28]
 800a508:	4313      	orrs	r3, r2
 800a50a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	4bbe      	ldr	r3, [pc, #760]	@ (800a80c <UART_SetConfig+0x328>)
 800a514:	4013      	ands	r3, r2
 800a516:	697a      	ldr	r2, [r7, #20]
 800a518:	6812      	ldr	r2, [r2, #0]
 800a51a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a51c:	430b      	orrs	r3, r1
 800a51e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	68da      	ldr	r2, [r3, #12]
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	430a      	orrs	r2, r1
 800a534:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	699b      	ldr	r3, [r3, #24]
 800a53a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4ab3      	ldr	r2, [pc, #716]	@ (800a810 <UART_SetConfig+0x32c>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d004      	beq.n	800a550 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	6a1b      	ldr	r3, [r3, #32]
 800a54a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a54c:	4313      	orrs	r3, r2
 800a54e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	689a      	ldr	r2, [r3, #8]
 800a556:	4baf      	ldr	r3, [pc, #700]	@ (800a814 <UART_SetConfig+0x330>)
 800a558:	4013      	ands	r3, r2
 800a55a:	697a      	ldr	r2, [r7, #20]
 800a55c:	6812      	ldr	r2, [r2, #0]
 800a55e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a560:	430b      	orrs	r3, r1
 800a562:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a56a:	f023 010f 	bic.w	r1, r3, #15
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	430a      	orrs	r2, r1
 800a578:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4aa6      	ldr	r2, [pc, #664]	@ (800a818 <UART_SetConfig+0x334>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d177      	bne.n	800a674 <UART_SetConfig+0x190>
 800a584:	4ba5      	ldr	r3, [pc, #660]	@ (800a81c <UART_SetConfig+0x338>)
 800a586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a588:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a58c:	2b28      	cmp	r3, #40	@ 0x28
 800a58e:	d86d      	bhi.n	800a66c <UART_SetConfig+0x188>
 800a590:	a201      	add	r2, pc, #4	@ (adr r2, 800a598 <UART_SetConfig+0xb4>)
 800a592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a596:	bf00      	nop
 800a598:	0800a63d 	.word	0x0800a63d
 800a59c:	0800a66d 	.word	0x0800a66d
 800a5a0:	0800a66d 	.word	0x0800a66d
 800a5a4:	0800a66d 	.word	0x0800a66d
 800a5a8:	0800a66d 	.word	0x0800a66d
 800a5ac:	0800a66d 	.word	0x0800a66d
 800a5b0:	0800a66d 	.word	0x0800a66d
 800a5b4:	0800a66d 	.word	0x0800a66d
 800a5b8:	0800a645 	.word	0x0800a645
 800a5bc:	0800a66d 	.word	0x0800a66d
 800a5c0:	0800a66d 	.word	0x0800a66d
 800a5c4:	0800a66d 	.word	0x0800a66d
 800a5c8:	0800a66d 	.word	0x0800a66d
 800a5cc:	0800a66d 	.word	0x0800a66d
 800a5d0:	0800a66d 	.word	0x0800a66d
 800a5d4:	0800a66d 	.word	0x0800a66d
 800a5d8:	0800a64d 	.word	0x0800a64d
 800a5dc:	0800a66d 	.word	0x0800a66d
 800a5e0:	0800a66d 	.word	0x0800a66d
 800a5e4:	0800a66d 	.word	0x0800a66d
 800a5e8:	0800a66d 	.word	0x0800a66d
 800a5ec:	0800a66d 	.word	0x0800a66d
 800a5f0:	0800a66d 	.word	0x0800a66d
 800a5f4:	0800a66d 	.word	0x0800a66d
 800a5f8:	0800a655 	.word	0x0800a655
 800a5fc:	0800a66d 	.word	0x0800a66d
 800a600:	0800a66d 	.word	0x0800a66d
 800a604:	0800a66d 	.word	0x0800a66d
 800a608:	0800a66d 	.word	0x0800a66d
 800a60c:	0800a66d 	.word	0x0800a66d
 800a610:	0800a66d 	.word	0x0800a66d
 800a614:	0800a66d 	.word	0x0800a66d
 800a618:	0800a65d 	.word	0x0800a65d
 800a61c:	0800a66d 	.word	0x0800a66d
 800a620:	0800a66d 	.word	0x0800a66d
 800a624:	0800a66d 	.word	0x0800a66d
 800a628:	0800a66d 	.word	0x0800a66d
 800a62c:	0800a66d 	.word	0x0800a66d
 800a630:	0800a66d 	.word	0x0800a66d
 800a634:	0800a66d 	.word	0x0800a66d
 800a638:	0800a665 	.word	0x0800a665
 800a63c:	2301      	movs	r3, #1
 800a63e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a642:	e326      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a644:	2304      	movs	r3, #4
 800a646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a64a:	e322      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a64c:	2308      	movs	r3, #8
 800a64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a652:	e31e      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a654:	2310      	movs	r3, #16
 800a656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a65a:	e31a      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a65c:	2320      	movs	r3, #32
 800a65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a662:	e316      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a664:	2340      	movs	r3, #64	@ 0x40
 800a666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a66a:	e312      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a66c:	2380      	movs	r3, #128	@ 0x80
 800a66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a672:	e30e      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a69      	ldr	r2, [pc, #420]	@ (800a820 <UART_SetConfig+0x33c>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d130      	bne.n	800a6e0 <UART_SetConfig+0x1fc>
 800a67e:	4b67      	ldr	r3, [pc, #412]	@ (800a81c <UART_SetConfig+0x338>)
 800a680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a682:	f003 0307 	and.w	r3, r3, #7
 800a686:	2b05      	cmp	r3, #5
 800a688:	d826      	bhi.n	800a6d8 <UART_SetConfig+0x1f4>
 800a68a:	a201      	add	r2, pc, #4	@ (adr r2, 800a690 <UART_SetConfig+0x1ac>)
 800a68c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a690:	0800a6a9 	.word	0x0800a6a9
 800a694:	0800a6b1 	.word	0x0800a6b1
 800a698:	0800a6b9 	.word	0x0800a6b9
 800a69c:	0800a6c1 	.word	0x0800a6c1
 800a6a0:	0800a6c9 	.word	0x0800a6c9
 800a6a4:	0800a6d1 	.word	0x0800a6d1
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ae:	e2f0      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a6b0:	2304      	movs	r3, #4
 800a6b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6b6:	e2ec      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a6b8:	2308      	movs	r3, #8
 800a6ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6be:	e2e8      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a6c0:	2310      	movs	r3, #16
 800a6c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6c6:	e2e4      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a6c8:	2320      	movs	r3, #32
 800a6ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ce:	e2e0      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a6d0:	2340      	movs	r3, #64	@ 0x40
 800a6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6d6:	e2dc      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a6d8:	2380      	movs	r3, #128	@ 0x80
 800a6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6de:	e2d8      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a4f      	ldr	r2, [pc, #316]	@ (800a824 <UART_SetConfig+0x340>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d130      	bne.n	800a74c <UART_SetConfig+0x268>
 800a6ea:	4b4c      	ldr	r3, [pc, #304]	@ (800a81c <UART_SetConfig+0x338>)
 800a6ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6ee:	f003 0307 	and.w	r3, r3, #7
 800a6f2:	2b05      	cmp	r3, #5
 800a6f4:	d826      	bhi.n	800a744 <UART_SetConfig+0x260>
 800a6f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a6fc <UART_SetConfig+0x218>)
 800a6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6fc:	0800a715 	.word	0x0800a715
 800a700:	0800a71d 	.word	0x0800a71d
 800a704:	0800a725 	.word	0x0800a725
 800a708:	0800a72d 	.word	0x0800a72d
 800a70c:	0800a735 	.word	0x0800a735
 800a710:	0800a73d 	.word	0x0800a73d
 800a714:	2300      	movs	r3, #0
 800a716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a71a:	e2ba      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a71c:	2304      	movs	r3, #4
 800a71e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a722:	e2b6      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a724:	2308      	movs	r3, #8
 800a726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a72a:	e2b2      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a72c:	2310      	movs	r3, #16
 800a72e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a732:	e2ae      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a734:	2320      	movs	r3, #32
 800a736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a73a:	e2aa      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a73c:	2340      	movs	r3, #64	@ 0x40
 800a73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a742:	e2a6      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a744:	2380      	movs	r3, #128	@ 0x80
 800a746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a74a:	e2a2      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a35      	ldr	r2, [pc, #212]	@ (800a828 <UART_SetConfig+0x344>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d130      	bne.n	800a7b8 <UART_SetConfig+0x2d4>
 800a756:	4b31      	ldr	r3, [pc, #196]	@ (800a81c <UART_SetConfig+0x338>)
 800a758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a75a:	f003 0307 	and.w	r3, r3, #7
 800a75e:	2b05      	cmp	r3, #5
 800a760:	d826      	bhi.n	800a7b0 <UART_SetConfig+0x2cc>
 800a762:	a201      	add	r2, pc, #4	@ (adr r2, 800a768 <UART_SetConfig+0x284>)
 800a764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a768:	0800a781 	.word	0x0800a781
 800a76c:	0800a789 	.word	0x0800a789
 800a770:	0800a791 	.word	0x0800a791
 800a774:	0800a799 	.word	0x0800a799
 800a778:	0800a7a1 	.word	0x0800a7a1
 800a77c:	0800a7a9 	.word	0x0800a7a9
 800a780:	2300      	movs	r3, #0
 800a782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a786:	e284      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a788:	2304      	movs	r3, #4
 800a78a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a78e:	e280      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a790:	2308      	movs	r3, #8
 800a792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a796:	e27c      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a798:	2310      	movs	r3, #16
 800a79a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a79e:	e278      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a7a0:	2320      	movs	r3, #32
 800a7a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7a6:	e274      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a7a8:	2340      	movs	r3, #64	@ 0x40
 800a7aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ae:	e270      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a7b0:	2380      	movs	r3, #128	@ 0x80
 800a7b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7b6:	e26c      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a1b      	ldr	r2, [pc, #108]	@ (800a82c <UART_SetConfig+0x348>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d142      	bne.n	800a848 <UART_SetConfig+0x364>
 800a7c2:	4b16      	ldr	r3, [pc, #88]	@ (800a81c <UART_SetConfig+0x338>)
 800a7c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7c6:	f003 0307 	and.w	r3, r3, #7
 800a7ca:	2b05      	cmp	r3, #5
 800a7cc:	d838      	bhi.n	800a840 <UART_SetConfig+0x35c>
 800a7ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a7d4 <UART_SetConfig+0x2f0>)
 800a7d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d4:	0800a7ed 	.word	0x0800a7ed
 800a7d8:	0800a7f5 	.word	0x0800a7f5
 800a7dc:	0800a7fd 	.word	0x0800a7fd
 800a7e0:	0800a805 	.word	0x0800a805
 800a7e4:	0800a831 	.word	0x0800a831
 800a7e8:	0800a839 	.word	0x0800a839
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7f2:	e24e      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a7f4:	2304      	movs	r3, #4
 800a7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7fa:	e24a      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a7fc:	2308      	movs	r3, #8
 800a7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a802:	e246      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a804:	2310      	movs	r3, #16
 800a806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a80a:	e242      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a80c:	cfff69f3 	.word	0xcfff69f3
 800a810:	58000c00 	.word	0x58000c00
 800a814:	11fff4ff 	.word	0x11fff4ff
 800a818:	40011000 	.word	0x40011000
 800a81c:	58024400 	.word	0x58024400
 800a820:	40004400 	.word	0x40004400
 800a824:	40004800 	.word	0x40004800
 800a828:	40004c00 	.word	0x40004c00
 800a82c:	40005000 	.word	0x40005000
 800a830:	2320      	movs	r3, #32
 800a832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a836:	e22c      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a838:	2340      	movs	r3, #64	@ 0x40
 800a83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a83e:	e228      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a840:	2380      	movs	r3, #128	@ 0x80
 800a842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a846:	e224      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4ab1      	ldr	r2, [pc, #708]	@ (800ab14 <UART_SetConfig+0x630>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d176      	bne.n	800a940 <UART_SetConfig+0x45c>
 800a852:	4bb1      	ldr	r3, [pc, #708]	@ (800ab18 <UART_SetConfig+0x634>)
 800a854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a856:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a85a:	2b28      	cmp	r3, #40	@ 0x28
 800a85c:	d86c      	bhi.n	800a938 <UART_SetConfig+0x454>
 800a85e:	a201      	add	r2, pc, #4	@ (adr r2, 800a864 <UART_SetConfig+0x380>)
 800a860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a864:	0800a909 	.word	0x0800a909
 800a868:	0800a939 	.word	0x0800a939
 800a86c:	0800a939 	.word	0x0800a939
 800a870:	0800a939 	.word	0x0800a939
 800a874:	0800a939 	.word	0x0800a939
 800a878:	0800a939 	.word	0x0800a939
 800a87c:	0800a939 	.word	0x0800a939
 800a880:	0800a939 	.word	0x0800a939
 800a884:	0800a911 	.word	0x0800a911
 800a888:	0800a939 	.word	0x0800a939
 800a88c:	0800a939 	.word	0x0800a939
 800a890:	0800a939 	.word	0x0800a939
 800a894:	0800a939 	.word	0x0800a939
 800a898:	0800a939 	.word	0x0800a939
 800a89c:	0800a939 	.word	0x0800a939
 800a8a0:	0800a939 	.word	0x0800a939
 800a8a4:	0800a919 	.word	0x0800a919
 800a8a8:	0800a939 	.word	0x0800a939
 800a8ac:	0800a939 	.word	0x0800a939
 800a8b0:	0800a939 	.word	0x0800a939
 800a8b4:	0800a939 	.word	0x0800a939
 800a8b8:	0800a939 	.word	0x0800a939
 800a8bc:	0800a939 	.word	0x0800a939
 800a8c0:	0800a939 	.word	0x0800a939
 800a8c4:	0800a921 	.word	0x0800a921
 800a8c8:	0800a939 	.word	0x0800a939
 800a8cc:	0800a939 	.word	0x0800a939
 800a8d0:	0800a939 	.word	0x0800a939
 800a8d4:	0800a939 	.word	0x0800a939
 800a8d8:	0800a939 	.word	0x0800a939
 800a8dc:	0800a939 	.word	0x0800a939
 800a8e0:	0800a939 	.word	0x0800a939
 800a8e4:	0800a929 	.word	0x0800a929
 800a8e8:	0800a939 	.word	0x0800a939
 800a8ec:	0800a939 	.word	0x0800a939
 800a8f0:	0800a939 	.word	0x0800a939
 800a8f4:	0800a939 	.word	0x0800a939
 800a8f8:	0800a939 	.word	0x0800a939
 800a8fc:	0800a939 	.word	0x0800a939
 800a900:	0800a939 	.word	0x0800a939
 800a904:	0800a931 	.word	0x0800a931
 800a908:	2301      	movs	r3, #1
 800a90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a90e:	e1c0      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a910:	2304      	movs	r3, #4
 800a912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a916:	e1bc      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a918:	2308      	movs	r3, #8
 800a91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a91e:	e1b8      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a920:	2310      	movs	r3, #16
 800a922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a926:	e1b4      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a928:	2320      	movs	r3, #32
 800a92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a92e:	e1b0      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a930:	2340      	movs	r3, #64	@ 0x40
 800a932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a936:	e1ac      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a938:	2380      	movs	r3, #128	@ 0x80
 800a93a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a93e:	e1a8      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a75      	ldr	r2, [pc, #468]	@ (800ab1c <UART_SetConfig+0x638>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d130      	bne.n	800a9ac <UART_SetConfig+0x4c8>
 800a94a:	4b73      	ldr	r3, [pc, #460]	@ (800ab18 <UART_SetConfig+0x634>)
 800a94c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a94e:	f003 0307 	and.w	r3, r3, #7
 800a952:	2b05      	cmp	r3, #5
 800a954:	d826      	bhi.n	800a9a4 <UART_SetConfig+0x4c0>
 800a956:	a201      	add	r2, pc, #4	@ (adr r2, 800a95c <UART_SetConfig+0x478>)
 800a958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a95c:	0800a975 	.word	0x0800a975
 800a960:	0800a97d 	.word	0x0800a97d
 800a964:	0800a985 	.word	0x0800a985
 800a968:	0800a98d 	.word	0x0800a98d
 800a96c:	0800a995 	.word	0x0800a995
 800a970:	0800a99d 	.word	0x0800a99d
 800a974:	2300      	movs	r3, #0
 800a976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a97a:	e18a      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a97c:	2304      	movs	r3, #4
 800a97e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a982:	e186      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a984:	2308      	movs	r3, #8
 800a986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a98a:	e182      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a98c:	2310      	movs	r3, #16
 800a98e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a992:	e17e      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a994:	2320      	movs	r3, #32
 800a996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a99a:	e17a      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a99c:	2340      	movs	r3, #64	@ 0x40
 800a99e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9a2:	e176      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a9a4:	2380      	movs	r3, #128	@ 0x80
 800a9a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9aa:	e172      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a5b      	ldr	r2, [pc, #364]	@ (800ab20 <UART_SetConfig+0x63c>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d130      	bne.n	800aa18 <UART_SetConfig+0x534>
 800a9b6:	4b58      	ldr	r3, [pc, #352]	@ (800ab18 <UART_SetConfig+0x634>)
 800a9b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9ba:	f003 0307 	and.w	r3, r3, #7
 800a9be:	2b05      	cmp	r3, #5
 800a9c0:	d826      	bhi.n	800aa10 <UART_SetConfig+0x52c>
 800a9c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a9c8 <UART_SetConfig+0x4e4>)
 800a9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9c8:	0800a9e1 	.word	0x0800a9e1
 800a9cc:	0800a9e9 	.word	0x0800a9e9
 800a9d0:	0800a9f1 	.word	0x0800a9f1
 800a9d4:	0800a9f9 	.word	0x0800a9f9
 800a9d8:	0800aa01 	.word	0x0800aa01
 800a9dc:	0800aa09 	.word	0x0800aa09
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9e6:	e154      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a9e8:	2304      	movs	r3, #4
 800a9ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ee:	e150      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a9f0:	2308      	movs	r3, #8
 800a9f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9f6:	e14c      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800a9f8:	2310      	movs	r3, #16
 800a9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9fe:	e148      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800aa00:	2320      	movs	r3, #32
 800aa02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa06:	e144      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800aa08:	2340      	movs	r3, #64	@ 0x40
 800aa0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa0e:	e140      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800aa10:	2380      	movs	r3, #128	@ 0x80
 800aa12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa16:	e13c      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a41      	ldr	r2, [pc, #260]	@ (800ab24 <UART_SetConfig+0x640>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	f040 8082 	bne.w	800ab28 <UART_SetConfig+0x644>
 800aa24:	4b3c      	ldr	r3, [pc, #240]	@ (800ab18 <UART_SetConfig+0x634>)
 800aa26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aa2c:	2b28      	cmp	r3, #40	@ 0x28
 800aa2e:	d86d      	bhi.n	800ab0c <UART_SetConfig+0x628>
 800aa30:	a201      	add	r2, pc, #4	@ (adr r2, 800aa38 <UART_SetConfig+0x554>)
 800aa32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa36:	bf00      	nop
 800aa38:	0800aadd 	.word	0x0800aadd
 800aa3c:	0800ab0d 	.word	0x0800ab0d
 800aa40:	0800ab0d 	.word	0x0800ab0d
 800aa44:	0800ab0d 	.word	0x0800ab0d
 800aa48:	0800ab0d 	.word	0x0800ab0d
 800aa4c:	0800ab0d 	.word	0x0800ab0d
 800aa50:	0800ab0d 	.word	0x0800ab0d
 800aa54:	0800ab0d 	.word	0x0800ab0d
 800aa58:	0800aae5 	.word	0x0800aae5
 800aa5c:	0800ab0d 	.word	0x0800ab0d
 800aa60:	0800ab0d 	.word	0x0800ab0d
 800aa64:	0800ab0d 	.word	0x0800ab0d
 800aa68:	0800ab0d 	.word	0x0800ab0d
 800aa6c:	0800ab0d 	.word	0x0800ab0d
 800aa70:	0800ab0d 	.word	0x0800ab0d
 800aa74:	0800ab0d 	.word	0x0800ab0d
 800aa78:	0800aaed 	.word	0x0800aaed
 800aa7c:	0800ab0d 	.word	0x0800ab0d
 800aa80:	0800ab0d 	.word	0x0800ab0d
 800aa84:	0800ab0d 	.word	0x0800ab0d
 800aa88:	0800ab0d 	.word	0x0800ab0d
 800aa8c:	0800ab0d 	.word	0x0800ab0d
 800aa90:	0800ab0d 	.word	0x0800ab0d
 800aa94:	0800ab0d 	.word	0x0800ab0d
 800aa98:	0800aaf5 	.word	0x0800aaf5
 800aa9c:	0800ab0d 	.word	0x0800ab0d
 800aaa0:	0800ab0d 	.word	0x0800ab0d
 800aaa4:	0800ab0d 	.word	0x0800ab0d
 800aaa8:	0800ab0d 	.word	0x0800ab0d
 800aaac:	0800ab0d 	.word	0x0800ab0d
 800aab0:	0800ab0d 	.word	0x0800ab0d
 800aab4:	0800ab0d 	.word	0x0800ab0d
 800aab8:	0800aafd 	.word	0x0800aafd
 800aabc:	0800ab0d 	.word	0x0800ab0d
 800aac0:	0800ab0d 	.word	0x0800ab0d
 800aac4:	0800ab0d 	.word	0x0800ab0d
 800aac8:	0800ab0d 	.word	0x0800ab0d
 800aacc:	0800ab0d 	.word	0x0800ab0d
 800aad0:	0800ab0d 	.word	0x0800ab0d
 800aad4:	0800ab0d 	.word	0x0800ab0d
 800aad8:	0800ab05 	.word	0x0800ab05
 800aadc:	2301      	movs	r3, #1
 800aade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aae2:	e0d6      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800aae4:	2304      	movs	r3, #4
 800aae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaea:	e0d2      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800aaec:	2308      	movs	r3, #8
 800aaee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaf2:	e0ce      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800aaf4:	2310      	movs	r3, #16
 800aaf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aafa:	e0ca      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800aafc:	2320      	movs	r3, #32
 800aafe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab02:	e0c6      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800ab04:	2340      	movs	r3, #64	@ 0x40
 800ab06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab0a:	e0c2      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800ab0c:	2380      	movs	r3, #128	@ 0x80
 800ab0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab12:	e0be      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800ab14:	40011400 	.word	0x40011400
 800ab18:	58024400 	.word	0x58024400
 800ab1c:	40007800 	.word	0x40007800
 800ab20:	40007c00 	.word	0x40007c00
 800ab24:	40011800 	.word	0x40011800
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4aad      	ldr	r2, [pc, #692]	@ (800ade4 <UART_SetConfig+0x900>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d176      	bne.n	800ac20 <UART_SetConfig+0x73c>
 800ab32:	4bad      	ldr	r3, [pc, #692]	@ (800ade8 <UART_SetConfig+0x904>)
 800ab34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ab3a:	2b28      	cmp	r3, #40	@ 0x28
 800ab3c:	d86c      	bhi.n	800ac18 <UART_SetConfig+0x734>
 800ab3e:	a201      	add	r2, pc, #4	@ (adr r2, 800ab44 <UART_SetConfig+0x660>)
 800ab40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab44:	0800abe9 	.word	0x0800abe9
 800ab48:	0800ac19 	.word	0x0800ac19
 800ab4c:	0800ac19 	.word	0x0800ac19
 800ab50:	0800ac19 	.word	0x0800ac19
 800ab54:	0800ac19 	.word	0x0800ac19
 800ab58:	0800ac19 	.word	0x0800ac19
 800ab5c:	0800ac19 	.word	0x0800ac19
 800ab60:	0800ac19 	.word	0x0800ac19
 800ab64:	0800abf1 	.word	0x0800abf1
 800ab68:	0800ac19 	.word	0x0800ac19
 800ab6c:	0800ac19 	.word	0x0800ac19
 800ab70:	0800ac19 	.word	0x0800ac19
 800ab74:	0800ac19 	.word	0x0800ac19
 800ab78:	0800ac19 	.word	0x0800ac19
 800ab7c:	0800ac19 	.word	0x0800ac19
 800ab80:	0800ac19 	.word	0x0800ac19
 800ab84:	0800abf9 	.word	0x0800abf9
 800ab88:	0800ac19 	.word	0x0800ac19
 800ab8c:	0800ac19 	.word	0x0800ac19
 800ab90:	0800ac19 	.word	0x0800ac19
 800ab94:	0800ac19 	.word	0x0800ac19
 800ab98:	0800ac19 	.word	0x0800ac19
 800ab9c:	0800ac19 	.word	0x0800ac19
 800aba0:	0800ac19 	.word	0x0800ac19
 800aba4:	0800ac01 	.word	0x0800ac01
 800aba8:	0800ac19 	.word	0x0800ac19
 800abac:	0800ac19 	.word	0x0800ac19
 800abb0:	0800ac19 	.word	0x0800ac19
 800abb4:	0800ac19 	.word	0x0800ac19
 800abb8:	0800ac19 	.word	0x0800ac19
 800abbc:	0800ac19 	.word	0x0800ac19
 800abc0:	0800ac19 	.word	0x0800ac19
 800abc4:	0800ac09 	.word	0x0800ac09
 800abc8:	0800ac19 	.word	0x0800ac19
 800abcc:	0800ac19 	.word	0x0800ac19
 800abd0:	0800ac19 	.word	0x0800ac19
 800abd4:	0800ac19 	.word	0x0800ac19
 800abd8:	0800ac19 	.word	0x0800ac19
 800abdc:	0800ac19 	.word	0x0800ac19
 800abe0:	0800ac19 	.word	0x0800ac19
 800abe4:	0800ac11 	.word	0x0800ac11
 800abe8:	2301      	movs	r3, #1
 800abea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abee:	e050      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800abf0:	2304      	movs	r3, #4
 800abf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abf6:	e04c      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800abf8:	2308      	movs	r3, #8
 800abfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abfe:	e048      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800ac00:	2310      	movs	r3, #16
 800ac02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac06:	e044      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800ac08:	2320      	movs	r3, #32
 800ac0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac0e:	e040      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800ac10:	2340      	movs	r3, #64	@ 0x40
 800ac12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac16:	e03c      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800ac18:	2380      	movs	r3, #128	@ 0x80
 800ac1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac1e:	e038      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a71      	ldr	r2, [pc, #452]	@ (800adec <UART_SetConfig+0x908>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d130      	bne.n	800ac8c <UART_SetConfig+0x7a8>
 800ac2a:	4b6f      	ldr	r3, [pc, #444]	@ (800ade8 <UART_SetConfig+0x904>)
 800ac2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac2e:	f003 0307 	and.w	r3, r3, #7
 800ac32:	2b05      	cmp	r3, #5
 800ac34:	d826      	bhi.n	800ac84 <UART_SetConfig+0x7a0>
 800ac36:	a201      	add	r2, pc, #4	@ (adr r2, 800ac3c <UART_SetConfig+0x758>)
 800ac38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac3c:	0800ac55 	.word	0x0800ac55
 800ac40:	0800ac5d 	.word	0x0800ac5d
 800ac44:	0800ac65 	.word	0x0800ac65
 800ac48:	0800ac6d 	.word	0x0800ac6d
 800ac4c:	0800ac75 	.word	0x0800ac75
 800ac50:	0800ac7d 	.word	0x0800ac7d
 800ac54:	2302      	movs	r3, #2
 800ac56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac5a:	e01a      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800ac5c:	2304      	movs	r3, #4
 800ac5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac62:	e016      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800ac64:	2308      	movs	r3, #8
 800ac66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac6a:	e012      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800ac6c:	2310      	movs	r3, #16
 800ac6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac72:	e00e      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800ac74:	2320      	movs	r3, #32
 800ac76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac7a:	e00a      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800ac7c:	2340      	movs	r3, #64	@ 0x40
 800ac7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac82:	e006      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800ac84:	2380      	movs	r3, #128	@ 0x80
 800ac86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac8a:	e002      	b.n	800ac92 <UART_SetConfig+0x7ae>
 800ac8c:	2380      	movs	r3, #128	@ 0x80
 800ac8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4a55      	ldr	r2, [pc, #340]	@ (800adec <UART_SetConfig+0x908>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	f040 80f8 	bne.w	800ae8e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ac9e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800aca2:	2b20      	cmp	r3, #32
 800aca4:	dc46      	bgt.n	800ad34 <UART_SetConfig+0x850>
 800aca6:	2b02      	cmp	r3, #2
 800aca8:	db75      	blt.n	800ad96 <UART_SetConfig+0x8b2>
 800acaa:	3b02      	subs	r3, #2
 800acac:	2b1e      	cmp	r3, #30
 800acae:	d872      	bhi.n	800ad96 <UART_SetConfig+0x8b2>
 800acb0:	a201      	add	r2, pc, #4	@ (adr r2, 800acb8 <UART_SetConfig+0x7d4>)
 800acb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb6:	bf00      	nop
 800acb8:	0800ad3b 	.word	0x0800ad3b
 800acbc:	0800ad97 	.word	0x0800ad97
 800acc0:	0800ad43 	.word	0x0800ad43
 800acc4:	0800ad97 	.word	0x0800ad97
 800acc8:	0800ad97 	.word	0x0800ad97
 800accc:	0800ad97 	.word	0x0800ad97
 800acd0:	0800ad53 	.word	0x0800ad53
 800acd4:	0800ad97 	.word	0x0800ad97
 800acd8:	0800ad97 	.word	0x0800ad97
 800acdc:	0800ad97 	.word	0x0800ad97
 800ace0:	0800ad97 	.word	0x0800ad97
 800ace4:	0800ad97 	.word	0x0800ad97
 800ace8:	0800ad97 	.word	0x0800ad97
 800acec:	0800ad97 	.word	0x0800ad97
 800acf0:	0800ad63 	.word	0x0800ad63
 800acf4:	0800ad97 	.word	0x0800ad97
 800acf8:	0800ad97 	.word	0x0800ad97
 800acfc:	0800ad97 	.word	0x0800ad97
 800ad00:	0800ad97 	.word	0x0800ad97
 800ad04:	0800ad97 	.word	0x0800ad97
 800ad08:	0800ad97 	.word	0x0800ad97
 800ad0c:	0800ad97 	.word	0x0800ad97
 800ad10:	0800ad97 	.word	0x0800ad97
 800ad14:	0800ad97 	.word	0x0800ad97
 800ad18:	0800ad97 	.word	0x0800ad97
 800ad1c:	0800ad97 	.word	0x0800ad97
 800ad20:	0800ad97 	.word	0x0800ad97
 800ad24:	0800ad97 	.word	0x0800ad97
 800ad28:	0800ad97 	.word	0x0800ad97
 800ad2c:	0800ad97 	.word	0x0800ad97
 800ad30:	0800ad89 	.word	0x0800ad89
 800ad34:	2b40      	cmp	r3, #64	@ 0x40
 800ad36:	d02a      	beq.n	800ad8e <UART_SetConfig+0x8aa>
 800ad38:	e02d      	b.n	800ad96 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ad3a:	f7fc ff11 	bl	8007b60 <HAL_RCCEx_GetD3PCLK1Freq>
 800ad3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ad40:	e02f      	b.n	800ada2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7fc ff20 	bl	8007b8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ad4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad50:	e027      	b.n	800ada2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad52:	f107 0318 	add.w	r3, r7, #24
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7fd f86c 	bl	8007e34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ad5c:	69fb      	ldr	r3, [r7, #28]
 800ad5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad60:	e01f      	b.n	800ada2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad62:	4b21      	ldr	r3, [pc, #132]	@ (800ade8 <UART_SetConfig+0x904>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f003 0320 	and.w	r3, r3, #32
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d009      	beq.n	800ad82 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ad6e:	4b1e      	ldr	r3, [pc, #120]	@ (800ade8 <UART_SetConfig+0x904>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	08db      	lsrs	r3, r3, #3
 800ad74:	f003 0303 	and.w	r3, r3, #3
 800ad78:	4a1d      	ldr	r2, [pc, #116]	@ (800adf0 <UART_SetConfig+0x90c>)
 800ad7a:	fa22 f303 	lsr.w	r3, r2, r3
 800ad7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ad80:	e00f      	b.n	800ada2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ad82:	4b1b      	ldr	r3, [pc, #108]	@ (800adf0 <UART_SetConfig+0x90c>)
 800ad84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad86:	e00c      	b.n	800ada2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ad88:	4b1a      	ldr	r3, [pc, #104]	@ (800adf4 <UART_SetConfig+0x910>)
 800ad8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad8c:	e009      	b.n	800ada2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad94:	e005      	b.n	800ada2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ad96:	2300      	movs	r3, #0
 800ad98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ada0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ada2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	f000 81ee 	beq.w	800b186 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adae:	4a12      	ldr	r2, [pc, #72]	@ (800adf8 <UART_SetConfig+0x914>)
 800adb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adb4:	461a      	mov	r2, r3
 800adb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800adbc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	685a      	ldr	r2, [r3, #4]
 800adc2:	4613      	mov	r3, r2
 800adc4:	005b      	lsls	r3, r3, #1
 800adc6:	4413      	add	r3, r2
 800adc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adca:	429a      	cmp	r2, r3
 800adcc:	d305      	bcc.n	800adda <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800add4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800add6:	429a      	cmp	r2, r3
 800add8:	d910      	bls.n	800adfc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800adda:	2301      	movs	r3, #1
 800addc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ade0:	e1d1      	b.n	800b186 <UART_SetConfig+0xca2>
 800ade2:	bf00      	nop
 800ade4:	40011c00 	.word	0x40011c00
 800ade8:	58024400 	.word	0x58024400
 800adec:	58000c00 	.word	0x58000c00
 800adf0:	03d09000 	.word	0x03d09000
 800adf4:	003d0900 	.word	0x003d0900
 800adf8:	0800e5fc 	.word	0x0800e5fc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adfe:	2200      	movs	r2, #0
 800ae00:	60bb      	str	r3, [r7, #8]
 800ae02:	60fa      	str	r2, [r7, #12]
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae08:	4ac0      	ldr	r2, [pc, #768]	@ (800b10c <UART_SetConfig+0xc28>)
 800ae0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae0e:	b29b      	uxth	r3, r3
 800ae10:	2200      	movs	r2, #0
 800ae12:	603b      	str	r3, [r7, #0]
 800ae14:	607a      	str	r2, [r7, #4]
 800ae16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ae1e:	f7f5 fa77 	bl	8000310 <__aeabi_uldivmod>
 800ae22:	4602      	mov	r2, r0
 800ae24:	460b      	mov	r3, r1
 800ae26:	4610      	mov	r0, r2
 800ae28:	4619      	mov	r1, r3
 800ae2a:	f04f 0200 	mov.w	r2, #0
 800ae2e:	f04f 0300 	mov.w	r3, #0
 800ae32:	020b      	lsls	r3, r1, #8
 800ae34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ae38:	0202      	lsls	r2, r0, #8
 800ae3a:	6979      	ldr	r1, [r7, #20]
 800ae3c:	6849      	ldr	r1, [r1, #4]
 800ae3e:	0849      	lsrs	r1, r1, #1
 800ae40:	2000      	movs	r0, #0
 800ae42:	460c      	mov	r4, r1
 800ae44:	4605      	mov	r5, r0
 800ae46:	eb12 0804 	adds.w	r8, r2, r4
 800ae4a:	eb43 0905 	adc.w	r9, r3, r5
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	469a      	mov	sl, r3
 800ae56:	4693      	mov	fp, r2
 800ae58:	4652      	mov	r2, sl
 800ae5a:	465b      	mov	r3, fp
 800ae5c:	4640      	mov	r0, r8
 800ae5e:	4649      	mov	r1, r9
 800ae60:	f7f5 fa56 	bl	8000310 <__aeabi_uldivmod>
 800ae64:	4602      	mov	r2, r0
 800ae66:	460b      	mov	r3, r1
 800ae68:	4613      	mov	r3, r2
 800ae6a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ae6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae72:	d308      	bcc.n	800ae86 <UART_SetConfig+0x9a2>
 800ae74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae7a:	d204      	bcs.n	800ae86 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ae82:	60da      	str	r2, [r3, #12]
 800ae84:	e17f      	b.n	800b186 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ae8c:	e17b      	b.n	800b186 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	69db      	ldr	r3, [r3, #28]
 800ae92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae96:	f040 80bd 	bne.w	800b014 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800ae9a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ae9e:	2b20      	cmp	r3, #32
 800aea0:	dc48      	bgt.n	800af34 <UART_SetConfig+0xa50>
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	db7b      	blt.n	800af9e <UART_SetConfig+0xaba>
 800aea6:	2b20      	cmp	r3, #32
 800aea8:	d879      	bhi.n	800af9e <UART_SetConfig+0xaba>
 800aeaa:	a201      	add	r2, pc, #4	@ (adr r2, 800aeb0 <UART_SetConfig+0x9cc>)
 800aeac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb0:	0800af3b 	.word	0x0800af3b
 800aeb4:	0800af43 	.word	0x0800af43
 800aeb8:	0800af9f 	.word	0x0800af9f
 800aebc:	0800af9f 	.word	0x0800af9f
 800aec0:	0800af4b 	.word	0x0800af4b
 800aec4:	0800af9f 	.word	0x0800af9f
 800aec8:	0800af9f 	.word	0x0800af9f
 800aecc:	0800af9f 	.word	0x0800af9f
 800aed0:	0800af5b 	.word	0x0800af5b
 800aed4:	0800af9f 	.word	0x0800af9f
 800aed8:	0800af9f 	.word	0x0800af9f
 800aedc:	0800af9f 	.word	0x0800af9f
 800aee0:	0800af9f 	.word	0x0800af9f
 800aee4:	0800af9f 	.word	0x0800af9f
 800aee8:	0800af9f 	.word	0x0800af9f
 800aeec:	0800af9f 	.word	0x0800af9f
 800aef0:	0800af6b 	.word	0x0800af6b
 800aef4:	0800af9f 	.word	0x0800af9f
 800aef8:	0800af9f 	.word	0x0800af9f
 800aefc:	0800af9f 	.word	0x0800af9f
 800af00:	0800af9f 	.word	0x0800af9f
 800af04:	0800af9f 	.word	0x0800af9f
 800af08:	0800af9f 	.word	0x0800af9f
 800af0c:	0800af9f 	.word	0x0800af9f
 800af10:	0800af9f 	.word	0x0800af9f
 800af14:	0800af9f 	.word	0x0800af9f
 800af18:	0800af9f 	.word	0x0800af9f
 800af1c:	0800af9f 	.word	0x0800af9f
 800af20:	0800af9f 	.word	0x0800af9f
 800af24:	0800af9f 	.word	0x0800af9f
 800af28:	0800af9f 	.word	0x0800af9f
 800af2c:	0800af9f 	.word	0x0800af9f
 800af30:	0800af91 	.word	0x0800af91
 800af34:	2b40      	cmp	r3, #64	@ 0x40
 800af36:	d02e      	beq.n	800af96 <UART_SetConfig+0xab2>
 800af38:	e031      	b.n	800af9e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af3a:	f7fb fc03 	bl	8006744 <HAL_RCC_GetPCLK1Freq>
 800af3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800af40:	e033      	b.n	800afaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af42:	f7fb fc15 	bl	8006770 <HAL_RCC_GetPCLK2Freq>
 800af46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800af48:	e02f      	b.n	800afaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af4e:	4618      	mov	r0, r3
 800af50:	f7fc fe1c 	bl	8007b8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800af54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af58:	e027      	b.n	800afaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af5a:	f107 0318 	add.w	r3, r7, #24
 800af5e:	4618      	mov	r0, r3
 800af60:	f7fc ff68 	bl	8007e34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800af64:	69fb      	ldr	r3, [r7, #28]
 800af66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af68:	e01f      	b.n	800afaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af6a:	4b69      	ldr	r3, [pc, #420]	@ (800b110 <UART_SetConfig+0xc2c>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f003 0320 	and.w	r3, r3, #32
 800af72:	2b00      	cmp	r3, #0
 800af74:	d009      	beq.n	800af8a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800af76:	4b66      	ldr	r3, [pc, #408]	@ (800b110 <UART_SetConfig+0xc2c>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	08db      	lsrs	r3, r3, #3
 800af7c:	f003 0303 	and.w	r3, r3, #3
 800af80:	4a64      	ldr	r2, [pc, #400]	@ (800b114 <UART_SetConfig+0xc30>)
 800af82:	fa22 f303 	lsr.w	r3, r2, r3
 800af86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800af88:	e00f      	b.n	800afaa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800af8a:	4b62      	ldr	r3, [pc, #392]	@ (800b114 <UART_SetConfig+0xc30>)
 800af8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af8e:	e00c      	b.n	800afaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800af90:	4b61      	ldr	r3, [pc, #388]	@ (800b118 <UART_SetConfig+0xc34>)
 800af92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af94:	e009      	b.n	800afaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af9c:	e005      	b.n	800afaa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800af9e:	2300      	movs	r3, #0
 800afa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800afa2:	2301      	movs	r3, #1
 800afa4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800afa8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800afaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afac:	2b00      	cmp	r3, #0
 800afae:	f000 80ea 	beq.w	800b186 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afb6:	4a55      	ldr	r2, [pc, #340]	@ (800b10c <UART_SetConfig+0xc28>)
 800afb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afbc:	461a      	mov	r2, r3
 800afbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afc0:	fbb3 f3f2 	udiv	r3, r3, r2
 800afc4:	005a      	lsls	r2, r3, #1
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	085b      	lsrs	r3, r3, #1
 800afcc:	441a      	add	r2, r3
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800afd6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afda:	2b0f      	cmp	r3, #15
 800afdc:	d916      	bls.n	800b00c <UART_SetConfig+0xb28>
 800afde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afe4:	d212      	bcs.n	800b00c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800afe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe8:	b29b      	uxth	r3, r3
 800afea:	f023 030f 	bic.w	r3, r3, #15
 800afee:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aff2:	085b      	lsrs	r3, r3, #1
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	f003 0307 	and.w	r3, r3, #7
 800affa:	b29a      	uxth	r2, r3
 800affc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800affe:	4313      	orrs	r3, r2
 800b000:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b008:	60da      	str	r2, [r3, #12]
 800b00a:	e0bc      	b.n	800b186 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b00c:	2301      	movs	r3, #1
 800b00e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b012:	e0b8      	b.n	800b186 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b014:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b018:	2b20      	cmp	r3, #32
 800b01a:	dc4b      	bgt.n	800b0b4 <UART_SetConfig+0xbd0>
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	f2c0 8087 	blt.w	800b130 <UART_SetConfig+0xc4c>
 800b022:	2b20      	cmp	r3, #32
 800b024:	f200 8084 	bhi.w	800b130 <UART_SetConfig+0xc4c>
 800b028:	a201      	add	r2, pc, #4	@ (adr r2, 800b030 <UART_SetConfig+0xb4c>)
 800b02a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b02e:	bf00      	nop
 800b030:	0800b0bb 	.word	0x0800b0bb
 800b034:	0800b0c3 	.word	0x0800b0c3
 800b038:	0800b131 	.word	0x0800b131
 800b03c:	0800b131 	.word	0x0800b131
 800b040:	0800b0cb 	.word	0x0800b0cb
 800b044:	0800b131 	.word	0x0800b131
 800b048:	0800b131 	.word	0x0800b131
 800b04c:	0800b131 	.word	0x0800b131
 800b050:	0800b0db 	.word	0x0800b0db
 800b054:	0800b131 	.word	0x0800b131
 800b058:	0800b131 	.word	0x0800b131
 800b05c:	0800b131 	.word	0x0800b131
 800b060:	0800b131 	.word	0x0800b131
 800b064:	0800b131 	.word	0x0800b131
 800b068:	0800b131 	.word	0x0800b131
 800b06c:	0800b131 	.word	0x0800b131
 800b070:	0800b0eb 	.word	0x0800b0eb
 800b074:	0800b131 	.word	0x0800b131
 800b078:	0800b131 	.word	0x0800b131
 800b07c:	0800b131 	.word	0x0800b131
 800b080:	0800b131 	.word	0x0800b131
 800b084:	0800b131 	.word	0x0800b131
 800b088:	0800b131 	.word	0x0800b131
 800b08c:	0800b131 	.word	0x0800b131
 800b090:	0800b131 	.word	0x0800b131
 800b094:	0800b131 	.word	0x0800b131
 800b098:	0800b131 	.word	0x0800b131
 800b09c:	0800b131 	.word	0x0800b131
 800b0a0:	0800b131 	.word	0x0800b131
 800b0a4:	0800b131 	.word	0x0800b131
 800b0a8:	0800b131 	.word	0x0800b131
 800b0ac:	0800b131 	.word	0x0800b131
 800b0b0:	0800b123 	.word	0x0800b123
 800b0b4:	2b40      	cmp	r3, #64	@ 0x40
 800b0b6:	d037      	beq.n	800b128 <UART_SetConfig+0xc44>
 800b0b8:	e03a      	b.n	800b130 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b0ba:	f7fb fb43 	bl	8006744 <HAL_RCC_GetPCLK1Freq>
 800b0be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b0c0:	e03c      	b.n	800b13c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b0c2:	f7fb fb55 	bl	8006770 <HAL_RCC_GetPCLK2Freq>
 800b0c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b0c8:	e038      	b.n	800b13c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f7fc fd5c 	bl	8007b8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b0d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0d8:	e030      	b.n	800b13c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0da:	f107 0318 	add.w	r3, r7, #24
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7fc fea8 	bl	8007e34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b0e4:	69fb      	ldr	r3, [r7, #28]
 800b0e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0e8:	e028      	b.n	800b13c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0ea:	4b09      	ldr	r3, [pc, #36]	@ (800b110 <UART_SetConfig+0xc2c>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f003 0320 	and.w	r3, r3, #32
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d012      	beq.n	800b11c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b0f6:	4b06      	ldr	r3, [pc, #24]	@ (800b110 <UART_SetConfig+0xc2c>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	08db      	lsrs	r3, r3, #3
 800b0fc:	f003 0303 	and.w	r3, r3, #3
 800b100:	4a04      	ldr	r2, [pc, #16]	@ (800b114 <UART_SetConfig+0xc30>)
 800b102:	fa22 f303 	lsr.w	r3, r2, r3
 800b106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b108:	e018      	b.n	800b13c <UART_SetConfig+0xc58>
 800b10a:	bf00      	nop
 800b10c:	0800e5fc 	.word	0x0800e5fc
 800b110:	58024400 	.word	0x58024400
 800b114:	03d09000 	.word	0x03d09000
 800b118:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b11c:	4b24      	ldr	r3, [pc, #144]	@ (800b1b0 <UART_SetConfig+0xccc>)
 800b11e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b120:	e00c      	b.n	800b13c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b122:	4b24      	ldr	r3, [pc, #144]	@ (800b1b4 <UART_SetConfig+0xcd0>)
 800b124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b126:	e009      	b.n	800b13c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b128:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b12c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b12e:	e005      	b.n	800b13c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b130:	2300      	movs	r3, #0
 800b132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b134:	2301      	movs	r3, #1
 800b136:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b13a:	bf00      	nop
    }

    if (pclk != 0U)
 800b13c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d021      	beq.n	800b186 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b146:	4a1c      	ldr	r2, [pc, #112]	@ (800b1b8 <UART_SetConfig+0xcd4>)
 800b148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b14c:	461a      	mov	r2, r3
 800b14e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b150:	fbb3 f2f2 	udiv	r2, r3, r2
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	085b      	lsrs	r3, r3, #1
 800b15a:	441a      	add	r2, r3
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	fbb2 f3f3 	udiv	r3, r2, r3
 800b164:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b168:	2b0f      	cmp	r3, #15
 800b16a:	d909      	bls.n	800b180 <UART_SetConfig+0xc9c>
 800b16c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b16e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b172:	d205      	bcs.n	800b180 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b176:	b29a      	uxth	r2, r3
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	60da      	str	r2, [r3, #12]
 800b17e:	e002      	b.n	800b186 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b180:	2301      	movs	r3, #1
 800b182:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	2201      	movs	r2, #1
 800b18a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	2201      	movs	r2, #1
 800b192:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	2200      	movs	r2, #0
 800b19a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b1a2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3748      	adds	r7, #72	@ 0x48
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b1b0:	03d09000 	.word	0x03d09000
 800b1b4:	003d0900 	.word	0x003d0900
 800b1b8:	0800e5fc 	.word	0x0800e5fc

0800b1bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1c8:	f003 0308 	and.w	r3, r3, #8
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d00a      	beq.n	800b1e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	430a      	orrs	r2, r1
 800b1e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1ea:	f003 0301 	and.w	r3, r3, #1
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d00a      	beq.n	800b208 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	430a      	orrs	r2, r1
 800b206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b20c:	f003 0302 	and.w	r3, r3, #2
 800b210:	2b00      	cmp	r3, #0
 800b212:	d00a      	beq.n	800b22a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	685b      	ldr	r3, [r3, #4]
 800b21a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	430a      	orrs	r2, r1
 800b228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b22e:	f003 0304 	and.w	r3, r3, #4
 800b232:	2b00      	cmp	r3, #0
 800b234:	d00a      	beq.n	800b24c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	430a      	orrs	r2, r1
 800b24a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b250:	f003 0310 	and.w	r3, r3, #16
 800b254:	2b00      	cmp	r3, #0
 800b256:	d00a      	beq.n	800b26e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	689b      	ldr	r3, [r3, #8]
 800b25e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	430a      	orrs	r2, r1
 800b26c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b272:	f003 0320 	and.w	r3, r3, #32
 800b276:	2b00      	cmp	r3, #0
 800b278:	d00a      	beq.n	800b290 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	689b      	ldr	r3, [r3, #8]
 800b280:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	430a      	orrs	r2, r1
 800b28e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d01a      	beq.n	800b2d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	430a      	orrs	r2, r1
 800b2b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b2ba:	d10a      	bne.n	800b2d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	430a      	orrs	r2, r1
 800b2d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d00a      	beq.n	800b2f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	685b      	ldr	r3, [r3, #4]
 800b2e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	430a      	orrs	r2, r1
 800b2f2:	605a      	str	r2, [r3, #4]
  }
}
 800b2f4:	bf00      	nop
 800b2f6:	370c      	adds	r7, #12
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b098      	sub	sp, #96	@ 0x60
 800b304:	af02      	add	r7, sp, #8
 800b306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2200      	movs	r2, #0
 800b30c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b310:	f7f6 fe54 	bl	8001fbc <HAL_GetTick>
 800b314:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f003 0308 	and.w	r3, r3, #8
 800b320:	2b08      	cmp	r3, #8
 800b322:	d12f      	bne.n	800b384 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b324:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b328:	9300      	str	r3, [sp, #0]
 800b32a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b32c:	2200      	movs	r2, #0
 800b32e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f000 f88e 	bl	800b454 <UART_WaitOnFlagUntilTimeout>
 800b338:	4603      	mov	r3, r0
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d022      	beq.n	800b384 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b346:	e853 3f00 	ldrex	r3, [r3]
 800b34a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b34c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b34e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b352:	653b      	str	r3, [r7, #80]	@ 0x50
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	461a      	mov	r2, r3
 800b35a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b35c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b35e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b360:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b362:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b364:	e841 2300 	strex	r3, r2, [r1]
 800b368:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b36a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d1e6      	bne.n	800b33e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2220      	movs	r2, #32
 800b374:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b380:	2303      	movs	r3, #3
 800b382:	e063      	b.n	800b44c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f003 0304 	and.w	r3, r3, #4
 800b38e:	2b04      	cmp	r3, #4
 800b390:	d149      	bne.n	800b426 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b392:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b396:	9300      	str	r3, [sp, #0]
 800b398:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b39a:	2200      	movs	r2, #0
 800b39c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f000 f857 	bl	800b454 <UART_WaitOnFlagUntilTimeout>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d03c      	beq.n	800b426 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b4:	e853 3f00 	ldrex	r3, [r3]
 800b3b8:	623b      	str	r3, [r7, #32]
   return(result);
 800b3ba:	6a3b      	ldr	r3, [r7, #32]
 800b3bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b3c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3ca:	633b      	str	r3, [r7, #48]	@ 0x30
 800b3cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b3d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3d2:	e841 2300 	strex	r3, r2, [r1]
 800b3d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b3d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d1e6      	bne.n	800b3ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	3308      	adds	r3, #8
 800b3e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	e853 3f00 	ldrex	r3, [r3]
 800b3ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f023 0301 	bic.w	r3, r3, #1
 800b3f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	3308      	adds	r3, #8
 800b3fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3fe:	61fa      	str	r2, [r7, #28]
 800b400:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b402:	69b9      	ldr	r1, [r7, #24]
 800b404:	69fa      	ldr	r2, [r7, #28]
 800b406:	e841 2300 	strex	r3, r2, [r1]
 800b40a:	617b      	str	r3, [r7, #20]
   return(result);
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d1e5      	bne.n	800b3de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2220      	movs	r2, #32
 800b416:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b422:	2303      	movs	r3, #3
 800b424:	e012      	b.n	800b44c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2220      	movs	r2, #32
 800b42a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2220      	movs	r2, #32
 800b432:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2200      	movs	r2, #0
 800b43a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2200      	movs	r2, #0
 800b440:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2200      	movs	r2, #0
 800b446:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b44a:	2300      	movs	r3, #0
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3758      	adds	r7, #88	@ 0x58
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	603b      	str	r3, [r7, #0]
 800b460:	4613      	mov	r3, r2
 800b462:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b464:	e04f      	b.n	800b506 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b466:	69bb      	ldr	r3, [r7, #24]
 800b468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b46c:	d04b      	beq.n	800b506 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b46e:	f7f6 fda5 	bl	8001fbc <HAL_GetTick>
 800b472:	4602      	mov	r2, r0
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	1ad3      	subs	r3, r2, r3
 800b478:	69ba      	ldr	r2, [r7, #24]
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d302      	bcc.n	800b484 <UART_WaitOnFlagUntilTimeout+0x30>
 800b47e:	69bb      	ldr	r3, [r7, #24]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d101      	bne.n	800b488 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b484:	2303      	movs	r3, #3
 800b486:	e04e      	b.n	800b526 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f003 0304 	and.w	r3, r3, #4
 800b492:	2b00      	cmp	r3, #0
 800b494:	d037      	beq.n	800b506 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	2b80      	cmp	r3, #128	@ 0x80
 800b49a:	d034      	beq.n	800b506 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	2b40      	cmp	r3, #64	@ 0x40
 800b4a0:	d031      	beq.n	800b506 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	69db      	ldr	r3, [r3, #28]
 800b4a8:	f003 0308 	and.w	r3, r3, #8
 800b4ac:	2b08      	cmp	r3, #8
 800b4ae:	d110      	bne.n	800b4d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	2208      	movs	r2, #8
 800b4b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b4b8:	68f8      	ldr	r0, [r7, #12]
 800b4ba:	f000 f839 	bl	800b530 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2208      	movs	r2, #8
 800b4c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	e029      	b.n	800b526 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	69db      	ldr	r3, [r3, #28]
 800b4d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b4dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b4e0:	d111      	bne.n	800b506 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b4ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b4ec:	68f8      	ldr	r0, [r7, #12]
 800b4ee:	f000 f81f 	bl	800b530 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2220      	movs	r2, #32
 800b4f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b502:	2303      	movs	r3, #3
 800b504:	e00f      	b.n	800b526 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	69da      	ldr	r2, [r3, #28]
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	4013      	ands	r3, r2
 800b510:	68ba      	ldr	r2, [r7, #8]
 800b512:	429a      	cmp	r2, r3
 800b514:	bf0c      	ite	eq
 800b516:	2301      	moveq	r3, #1
 800b518:	2300      	movne	r3, #0
 800b51a:	b2db      	uxtb	r3, r3
 800b51c:	461a      	mov	r2, r3
 800b51e:	79fb      	ldrb	r3, [r7, #7]
 800b520:	429a      	cmp	r2, r3
 800b522:	d0a0      	beq.n	800b466 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b524:	2300      	movs	r3, #0
}
 800b526:	4618      	mov	r0, r3
 800b528:	3710      	adds	r7, #16
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
	...

0800b530 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b530:	b480      	push	{r7}
 800b532:	b095      	sub	sp, #84	@ 0x54
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b53e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b540:	e853 3f00 	ldrex	r3, [r3]
 800b544:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b548:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b54c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	461a      	mov	r2, r3
 800b554:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b556:	643b      	str	r3, [r7, #64]	@ 0x40
 800b558:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b55a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b55c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b55e:	e841 2300 	strex	r3, r2, [r1]
 800b562:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b566:	2b00      	cmp	r3, #0
 800b568:	d1e6      	bne.n	800b538 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	3308      	adds	r3, #8
 800b570:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b572:	6a3b      	ldr	r3, [r7, #32]
 800b574:	e853 3f00 	ldrex	r3, [r3]
 800b578:	61fb      	str	r3, [r7, #28]
   return(result);
 800b57a:	69fa      	ldr	r2, [r7, #28]
 800b57c:	4b1e      	ldr	r3, [pc, #120]	@ (800b5f8 <UART_EndRxTransfer+0xc8>)
 800b57e:	4013      	ands	r3, r2
 800b580:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	3308      	adds	r3, #8
 800b588:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b58a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b58c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b58e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b590:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b592:	e841 2300 	strex	r3, r2, [r1]
 800b596:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d1e5      	bne.n	800b56a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	d118      	bne.n	800b5d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	e853 3f00 	ldrex	r3, [r3]
 800b5b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	f023 0310 	bic.w	r3, r3, #16
 800b5ba:	647b      	str	r3, [r7, #68]	@ 0x44
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5c4:	61bb      	str	r3, [r7, #24]
 800b5c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c8:	6979      	ldr	r1, [r7, #20]
 800b5ca:	69ba      	ldr	r2, [r7, #24]
 800b5cc:	e841 2300 	strex	r3, r2, [r1]
 800b5d0:	613b      	str	r3, [r7, #16]
   return(result);
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d1e6      	bne.n	800b5a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2220      	movs	r2, #32
 800b5dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b5ec:	bf00      	nop
 800b5ee:	3754      	adds	r7, #84	@ 0x54
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr
 800b5f8:	effffffe 	.word	0xeffffffe

0800b5fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b608:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2200      	movs	r2, #0
 800b60e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b612:	68f8      	ldr	r0, [r7, #12]
 800b614:	f7fe ff50 	bl	800a4b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b618:	bf00      	nop
 800b61a:	3710      	adds	r7, #16
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}

0800b620 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b088      	sub	sp, #32
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	e853 3f00 	ldrex	r3, [r3]
 800b634:	60bb      	str	r3, [r7, #8]
   return(result);
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b63c:	61fb      	str	r3, [r7, #28]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	461a      	mov	r2, r3
 800b644:	69fb      	ldr	r3, [r7, #28]
 800b646:	61bb      	str	r3, [r7, #24]
 800b648:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b64a:	6979      	ldr	r1, [r7, #20]
 800b64c:	69ba      	ldr	r2, [r7, #24]
 800b64e:	e841 2300 	strex	r3, r2, [r1]
 800b652:	613b      	str	r3, [r7, #16]
   return(result);
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d1e6      	bne.n	800b628 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2220      	movs	r2, #32
 800b65e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2200      	movs	r2, #0
 800b666:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f7fe ff1b 	bl	800a4a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b66e:	bf00      	nop
 800b670:	3720      	adds	r7, #32
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}

0800b676 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b676:	b480      	push	{r7}
 800b678:	b083      	sub	sp, #12
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b67e:	bf00      	nop
 800b680:	370c      	adds	r7, #12
 800b682:	46bd      	mov	sp, r7
 800b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b688:	4770      	bx	lr

0800b68a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b68a:	b480      	push	{r7}
 800b68c:	b083      	sub	sp, #12
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b692:	bf00      	nop
 800b694:	370c      	adds	r7, #12
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr

0800b69e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b69e:	b480      	push	{r7}
 800b6a0:	b083      	sub	sp, #12
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b6a6:	bf00      	nop
 800b6a8:	370c      	adds	r7, #12
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b0:	4770      	bx	lr

0800b6b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b6b2:	b480      	push	{r7}
 800b6b4:	b085      	sub	sp, #20
 800b6b6:	af00      	add	r7, sp, #0
 800b6b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d101      	bne.n	800b6c8 <HAL_UARTEx_DisableFifoMode+0x16>
 800b6c4:	2302      	movs	r3, #2
 800b6c6:	e027      	b.n	800b718 <HAL_UARTEx_DisableFifoMode+0x66>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2224      	movs	r2, #36	@ 0x24
 800b6d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f022 0201 	bic.w	r2, r2, #1
 800b6ee:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b6f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	68fa      	ldr	r2, [r7, #12]
 800b704:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2220      	movs	r2, #32
 800b70a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2200      	movs	r2, #0
 800b712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b716:	2300      	movs	r3, #0
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3714      	adds	r7, #20
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr

0800b724 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b734:	2b01      	cmp	r3, #1
 800b736:	d101      	bne.n	800b73c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b738:	2302      	movs	r3, #2
 800b73a:	e02d      	b.n	800b798 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2201      	movs	r2, #1
 800b740:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2224      	movs	r2, #36	@ 0x24
 800b748:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f022 0201 	bic.w	r2, r2, #1
 800b762:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	689b      	ldr	r3, [r3, #8]
 800b76a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	683a      	ldr	r2, [r7, #0]
 800b774:	430a      	orrs	r2, r1
 800b776:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 f84f 	bl	800b81c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	68fa      	ldr	r2, [r7, #12]
 800b784:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2220      	movs	r2, #32
 800b78a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2200      	movs	r2, #0
 800b792:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b796:	2300      	movs	r3, #0
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3710      	adds	r7, #16
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b084      	sub	sp, #16
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b7b0:	2b01      	cmp	r3, #1
 800b7b2:	d101      	bne.n	800b7b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b7b4:	2302      	movs	r3, #2
 800b7b6:	e02d      	b.n	800b814 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2224      	movs	r2, #36	@ 0x24
 800b7c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	681a      	ldr	r2, [r3, #0]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f022 0201 	bic.w	r2, r2, #1
 800b7de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	689b      	ldr	r3, [r3, #8]
 800b7e6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	683a      	ldr	r2, [r7, #0]
 800b7f0:	430a      	orrs	r2, r1
 800b7f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 f811 	bl	800b81c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	68fa      	ldr	r2, [r7, #12]
 800b800:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2220      	movs	r2, #32
 800b806:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2200      	movs	r2, #0
 800b80e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b812:	2300      	movs	r3, #0
}
 800b814:	4618      	mov	r0, r3
 800b816:	3710      	adds	r7, #16
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b085      	sub	sp, #20
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d108      	bne.n	800b83e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2201      	movs	r2, #1
 800b830:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2201      	movs	r2, #1
 800b838:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b83c:	e031      	b.n	800b8a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b83e:	2310      	movs	r3, #16
 800b840:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b842:	2310      	movs	r3, #16
 800b844:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	689b      	ldr	r3, [r3, #8]
 800b84c:	0e5b      	lsrs	r3, r3, #25
 800b84e:	b2db      	uxtb	r3, r3
 800b850:	f003 0307 	and.w	r3, r3, #7
 800b854:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	0f5b      	lsrs	r3, r3, #29
 800b85e:	b2db      	uxtb	r3, r3
 800b860:	f003 0307 	and.w	r3, r3, #7
 800b864:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b866:	7bbb      	ldrb	r3, [r7, #14]
 800b868:	7b3a      	ldrb	r2, [r7, #12]
 800b86a:	4911      	ldr	r1, [pc, #68]	@ (800b8b0 <UARTEx_SetNbDataToProcess+0x94>)
 800b86c:	5c8a      	ldrb	r2, [r1, r2]
 800b86e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b872:	7b3a      	ldrb	r2, [r7, #12]
 800b874:	490f      	ldr	r1, [pc, #60]	@ (800b8b4 <UARTEx_SetNbDataToProcess+0x98>)
 800b876:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b878:	fb93 f3f2 	sdiv	r3, r3, r2
 800b87c:	b29a      	uxth	r2, r3
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b884:	7bfb      	ldrb	r3, [r7, #15]
 800b886:	7b7a      	ldrb	r2, [r7, #13]
 800b888:	4909      	ldr	r1, [pc, #36]	@ (800b8b0 <UARTEx_SetNbDataToProcess+0x94>)
 800b88a:	5c8a      	ldrb	r2, [r1, r2]
 800b88c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b890:	7b7a      	ldrb	r2, [r7, #13]
 800b892:	4908      	ldr	r1, [pc, #32]	@ (800b8b4 <UARTEx_SetNbDataToProcess+0x98>)
 800b894:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b896:	fb93 f3f2 	sdiv	r3, r3, r2
 800b89a:	b29a      	uxth	r2, r3
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b8a2:	bf00      	nop
 800b8a4:	3714      	adds	r7, #20
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ac:	4770      	bx	lr
 800b8ae:	bf00      	nop
 800b8b0:	0800e614 	.word	0x0800e614
 800b8b4:	0800e61c 	.word	0x0800e61c

0800b8b8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b085      	sub	sp, #20
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	4603      	mov	r3, r0
 800b8c0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b8c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b8ca:	2b84      	cmp	r3, #132	@ 0x84
 800b8cc:	d005      	beq.n	800b8da <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b8ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	4413      	add	r3, r2
 800b8d6:	3303      	adds	r3, #3
 800b8d8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b8da:	68fb      	ldr	r3, [r7, #12]
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3714      	adds	r7, #20
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr

0800b8e8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b8ec:	f001 f806 	bl	800c8fc <vTaskStartScheduler>
  
  return osOK;
 800b8f0:	2300      	movs	r3, #0
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b8f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8f8:	b089      	sub	sp, #36	@ 0x24
 800b8fa:	af04      	add	r7, sp, #16
 800b8fc:	6078      	str	r0, [r7, #4]
 800b8fe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	695b      	ldr	r3, [r3, #20]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d020      	beq.n	800b94a <osThreadCreate+0x54>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	699b      	ldr	r3, [r3, #24]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d01c      	beq.n	800b94a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	685c      	ldr	r4, [r3, #4]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	691e      	ldr	r6, [r3, #16]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b922:	4618      	mov	r0, r3
 800b924:	f7ff ffc8 	bl	800b8b8 <makeFreeRtosPriority>
 800b928:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	695b      	ldr	r3, [r3, #20]
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b932:	9202      	str	r2, [sp, #8]
 800b934:	9301      	str	r3, [sp, #4]
 800b936:	9100      	str	r1, [sp, #0]
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	4632      	mov	r2, r6
 800b93c:	4629      	mov	r1, r5
 800b93e:	4620      	mov	r0, r4
 800b940:	f000 fde8 	bl	800c514 <xTaskCreateStatic>
 800b944:	4603      	mov	r3, r0
 800b946:	60fb      	str	r3, [r7, #12]
 800b948:	e01c      	b.n	800b984 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	685c      	ldr	r4, [r3, #4]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b956:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b95e:	4618      	mov	r0, r3
 800b960:	f7ff ffaa 	bl	800b8b8 <makeFreeRtosPriority>
 800b964:	4602      	mov	r2, r0
 800b966:	f107 030c 	add.w	r3, r7, #12
 800b96a:	9301      	str	r3, [sp, #4]
 800b96c:	9200      	str	r2, [sp, #0]
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	4632      	mov	r2, r6
 800b972:	4629      	mov	r1, r5
 800b974:	4620      	mov	r0, r4
 800b976:	f000 fe2d 	bl	800c5d4 <xTaskCreate>
 800b97a:	4603      	mov	r3, r0
 800b97c:	2b01      	cmp	r3, #1
 800b97e:	d001      	beq.n	800b984 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b980:	2300      	movs	r3, #0
 800b982:	e000      	b.n	800b986 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b984:	68fb      	ldr	r3, [r7, #12]
}
 800b986:	4618      	mov	r0, r3
 800b988:	3714      	adds	r7, #20
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b98e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b98e:	b580      	push	{r7, lr}
 800b990:	b084      	sub	sp, #16
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d001      	beq.n	800b9a4 <osDelay+0x16>
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	e000      	b.n	800b9a6 <osDelay+0x18>
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f000 ff72 	bl	800c890 <vTaskDelay>
  
  return osOK;
 800b9ac:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3710      	adds	r7, #16
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b9b6:	b480      	push	{r7}
 800b9b8:	b083      	sub	sp, #12
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f103 0208 	add.w	r2, r3, #8
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b9ce:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f103 0208 	add.w	r2, r3, #8
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f103 0208 	add.w	r2, r3, #8
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b9ea:	bf00      	nop
 800b9ec:	370c      	adds	r7, #12
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f4:	4770      	bx	lr

0800b9f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b9f6:	b480      	push	{r7}
 800b9f8:	b083      	sub	sp, #12
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2200      	movs	r2, #0
 800ba02:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ba04:	bf00      	nop
 800ba06:	370c      	adds	r7, #12
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr

0800ba10 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ba10:	b480      	push	{r7}
 800ba12:	b085      	sub	sp, #20
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	68fa      	ldr	r2, [r7, #12]
 800ba24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	689a      	ldr	r2, [r3, #8]
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	689b      	ldr	r3, [r3, #8]
 800ba32:	683a      	ldr	r2, [r7, #0]
 800ba34:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	683a      	ldr	r2, [r7, #0]
 800ba3a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	687a      	ldr	r2, [r7, #4]
 800ba40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	1c5a      	adds	r2, r3, #1
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	601a      	str	r2, [r3, #0]
}
 800ba4c:	bf00      	nop
 800ba4e:	3714      	adds	r7, #20
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr

0800ba58 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b085      	sub	sp, #20
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba6e:	d103      	bne.n	800ba78 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	691b      	ldr	r3, [r3, #16]
 800ba74:	60fb      	str	r3, [r7, #12]
 800ba76:	e00c      	b.n	800ba92 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	3308      	adds	r3, #8
 800ba7c:	60fb      	str	r3, [r7, #12]
 800ba7e:	e002      	b.n	800ba86 <vListInsert+0x2e>
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	60fb      	str	r3, [r7, #12]
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	685b      	ldr	r3, [r3, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	68ba      	ldr	r2, [r7, #8]
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d2f6      	bcs.n	800ba80 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	685a      	ldr	r2, [r3, #4]
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	683a      	ldr	r2, [r7, #0]
 800baa0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	68fa      	ldr	r2, [r7, #12]
 800baa6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	683a      	ldr	r2, [r7, #0]
 800baac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	687a      	ldr	r2, [r7, #4]
 800bab2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	1c5a      	adds	r2, r3, #1
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	601a      	str	r2, [r3, #0]
}
 800babe:	bf00      	nop
 800bac0:	3714      	adds	r7, #20
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr

0800baca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800baca:	b480      	push	{r7}
 800bacc:	b085      	sub	sp, #20
 800bace:	af00      	add	r7, sp, #0
 800bad0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	691b      	ldr	r3, [r3, #16]
 800bad6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	687a      	ldr	r2, [r7, #4]
 800bade:	6892      	ldr	r2, [r2, #8]
 800bae0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	689b      	ldr	r3, [r3, #8]
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	6852      	ldr	r2, [r2, #4]
 800baea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	687a      	ldr	r2, [r7, #4]
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d103      	bne.n	800bafe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	689a      	ldr	r2, [r3, #8]
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2200      	movs	r2, #0
 800bb02:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	1e5a      	subs	r2, r3, #1
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3714      	adds	r7, #20
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr
	...

0800bb20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b084      	sub	sp, #16
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d10b      	bne.n	800bb4c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bb34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb38:	f383 8811 	msr	BASEPRI, r3
 800bb3c:	f3bf 8f6f 	isb	sy
 800bb40:	f3bf 8f4f 	dsb	sy
 800bb44:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bb46:	bf00      	nop
 800bb48:	bf00      	nop
 800bb4a:	e7fd      	b.n	800bb48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bb4c:	f002 f8e4 	bl	800dd18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb58:	68f9      	ldr	r1, [r7, #12]
 800bb5a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bb5c:	fb01 f303 	mul.w	r3, r1, r3
 800bb60:	441a      	add	r2, r3
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb7c:	3b01      	subs	r3, #1
 800bb7e:	68f9      	ldr	r1, [r7, #12]
 800bb80:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bb82:	fb01 f303 	mul.w	r3, r1, r3
 800bb86:	441a      	add	r2, r3
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	22ff      	movs	r2, #255	@ 0xff
 800bb90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	22ff      	movs	r2, #255	@ 0xff
 800bb98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d114      	bne.n	800bbcc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	691b      	ldr	r3, [r3, #16]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d01a      	beq.n	800bbe0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	3310      	adds	r3, #16
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f001 f96e 	bl	800ce90 <xTaskRemoveFromEventList>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d012      	beq.n	800bbe0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bbba:	4b0d      	ldr	r3, [pc, #52]	@ (800bbf0 <xQueueGenericReset+0xd0>)
 800bbbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbc0:	601a      	str	r2, [r3, #0]
 800bbc2:	f3bf 8f4f 	dsb	sy
 800bbc6:	f3bf 8f6f 	isb	sy
 800bbca:	e009      	b.n	800bbe0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	3310      	adds	r3, #16
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f7ff fef0 	bl	800b9b6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	3324      	adds	r3, #36	@ 0x24
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7ff feeb 	bl	800b9b6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bbe0:	f002 f8cc 	bl	800dd7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bbe4:	2301      	movs	r3, #1
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3710      	adds	r7, #16
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	e000ed04 	.word	0xe000ed04

0800bbf4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b08e      	sub	sp, #56	@ 0x38
 800bbf8:	af02      	add	r7, sp, #8
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	60b9      	str	r1, [r7, #8]
 800bbfe:	607a      	str	r2, [r7, #4]
 800bc00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d10b      	bne.n	800bc20 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800bc08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc0c:	f383 8811 	msr	BASEPRI, r3
 800bc10:	f3bf 8f6f 	isb	sy
 800bc14:	f3bf 8f4f 	dsb	sy
 800bc18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bc1a:	bf00      	nop
 800bc1c:	bf00      	nop
 800bc1e:	e7fd      	b.n	800bc1c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d10b      	bne.n	800bc3e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800bc26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc2a:	f383 8811 	msr	BASEPRI, r3
 800bc2e:	f3bf 8f6f 	isb	sy
 800bc32:	f3bf 8f4f 	dsb	sy
 800bc36:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bc38:	bf00      	nop
 800bc3a:	bf00      	nop
 800bc3c:	e7fd      	b.n	800bc3a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d002      	beq.n	800bc4a <xQueueGenericCreateStatic+0x56>
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d001      	beq.n	800bc4e <xQueueGenericCreateStatic+0x5a>
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	e000      	b.n	800bc50 <xQueueGenericCreateStatic+0x5c>
 800bc4e:	2300      	movs	r3, #0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d10b      	bne.n	800bc6c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800bc54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc58:	f383 8811 	msr	BASEPRI, r3
 800bc5c:	f3bf 8f6f 	isb	sy
 800bc60:	f3bf 8f4f 	dsb	sy
 800bc64:	623b      	str	r3, [r7, #32]
}
 800bc66:	bf00      	nop
 800bc68:	bf00      	nop
 800bc6a:	e7fd      	b.n	800bc68 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d102      	bne.n	800bc78 <xQueueGenericCreateStatic+0x84>
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d101      	bne.n	800bc7c <xQueueGenericCreateStatic+0x88>
 800bc78:	2301      	movs	r3, #1
 800bc7a:	e000      	b.n	800bc7e <xQueueGenericCreateStatic+0x8a>
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d10b      	bne.n	800bc9a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800bc82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc86:	f383 8811 	msr	BASEPRI, r3
 800bc8a:	f3bf 8f6f 	isb	sy
 800bc8e:	f3bf 8f4f 	dsb	sy
 800bc92:	61fb      	str	r3, [r7, #28]
}
 800bc94:	bf00      	nop
 800bc96:	bf00      	nop
 800bc98:	e7fd      	b.n	800bc96 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bc9a:	2350      	movs	r3, #80	@ 0x50
 800bc9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	2b50      	cmp	r3, #80	@ 0x50
 800bca2:	d00b      	beq.n	800bcbc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800bca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bca8:	f383 8811 	msr	BASEPRI, r3
 800bcac:	f3bf 8f6f 	isb	sy
 800bcb0:	f3bf 8f4f 	dsb	sy
 800bcb4:	61bb      	str	r3, [r7, #24]
}
 800bcb6:	bf00      	nop
 800bcb8:	bf00      	nop
 800bcba:	e7fd      	b.n	800bcb8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bcbc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800bcc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d00d      	beq.n	800bce4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bcc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcca:	2201      	movs	r2, #1
 800bccc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bcd0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800bcd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcd6:	9300      	str	r3, [sp, #0]
 800bcd8:	4613      	mov	r3, r2
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	68b9      	ldr	r1, [r7, #8]
 800bcde:	68f8      	ldr	r0, [r7, #12]
 800bce0:	f000 f805 	bl	800bcee <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3730      	adds	r7, #48	@ 0x30
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b084      	sub	sp, #16
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	60f8      	str	r0, [r7, #12]
 800bcf6:	60b9      	str	r1, [r7, #8]
 800bcf8:	607a      	str	r2, [r7, #4]
 800bcfa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d103      	bne.n	800bd0a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bd02:	69bb      	ldr	r3, [r7, #24]
 800bd04:	69ba      	ldr	r2, [r7, #24]
 800bd06:	601a      	str	r2, [r3, #0]
 800bd08:	e002      	b.n	800bd10 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bd0a:	69bb      	ldr	r3, [r7, #24]
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bd10:	69bb      	ldr	r3, [r7, #24]
 800bd12:	68fa      	ldr	r2, [r7, #12]
 800bd14:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bd16:	69bb      	ldr	r3, [r7, #24]
 800bd18:	68ba      	ldr	r2, [r7, #8]
 800bd1a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bd1c:	2101      	movs	r1, #1
 800bd1e:	69b8      	ldr	r0, [r7, #24]
 800bd20:	f7ff fefe 	bl	800bb20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bd24:	69bb      	ldr	r3, [r7, #24]
 800bd26:	78fa      	ldrb	r2, [r7, #3]
 800bd28:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bd2c:	bf00      	nop
 800bd2e:	3710      	adds	r7, #16
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b08e      	sub	sp, #56	@ 0x38
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	60b9      	str	r1, [r7, #8]
 800bd3e:	607a      	str	r2, [r7, #4]
 800bd40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bd42:	2300      	movs	r3, #0
 800bd44:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bd4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d10b      	bne.n	800bd68 <xQueueGenericSend+0x34>
	__asm volatile
 800bd50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd54:	f383 8811 	msr	BASEPRI, r3
 800bd58:	f3bf 8f6f 	isb	sy
 800bd5c:	f3bf 8f4f 	dsb	sy
 800bd60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bd62:	bf00      	nop
 800bd64:	bf00      	nop
 800bd66:	e7fd      	b.n	800bd64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d103      	bne.n	800bd76 <xQueueGenericSend+0x42>
 800bd6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d101      	bne.n	800bd7a <xQueueGenericSend+0x46>
 800bd76:	2301      	movs	r3, #1
 800bd78:	e000      	b.n	800bd7c <xQueueGenericSend+0x48>
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d10b      	bne.n	800bd98 <xQueueGenericSend+0x64>
	__asm volatile
 800bd80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd84:	f383 8811 	msr	BASEPRI, r3
 800bd88:	f3bf 8f6f 	isb	sy
 800bd8c:	f3bf 8f4f 	dsb	sy
 800bd90:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bd92:	bf00      	nop
 800bd94:	bf00      	nop
 800bd96:	e7fd      	b.n	800bd94 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	2b02      	cmp	r3, #2
 800bd9c:	d103      	bne.n	800bda6 <xQueueGenericSend+0x72>
 800bd9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bda0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bda2:	2b01      	cmp	r3, #1
 800bda4:	d101      	bne.n	800bdaa <xQueueGenericSend+0x76>
 800bda6:	2301      	movs	r3, #1
 800bda8:	e000      	b.n	800bdac <xQueueGenericSend+0x78>
 800bdaa:	2300      	movs	r3, #0
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d10b      	bne.n	800bdc8 <xQueueGenericSend+0x94>
	__asm volatile
 800bdb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdb4:	f383 8811 	msr	BASEPRI, r3
 800bdb8:	f3bf 8f6f 	isb	sy
 800bdbc:	f3bf 8f4f 	dsb	sy
 800bdc0:	623b      	str	r3, [r7, #32]
}
 800bdc2:	bf00      	nop
 800bdc4:	bf00      	nop
 800bdc6:	e7fd      	b.n	800bdc4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bdc8:	f001 fa28 	bl	800d21c <xTaskGetSchedulerState>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d102      	bne.n	800bdd8 <xQueueGenericSend+0xa4>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d101      	bne.n	800bddc <xQueueGenericSend+0xa8>
 800bdd8:	2301      	movs	r3, #1
 800bdda:	e000      	b.n	800bdde <xQueueGenericSend+0xaa>
 800bddc:	2300      	movs	r3, #0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d10b      	bne.n	800bdfa <xQueueGenericSend+0xc6>
	__asm volatile
 800bde2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bde6:	f383 8811 	msr	BASEPRI, r3
 800bdea:	f3bf 8f6f 	isb	sy
 800bdee:	f3bf 8f4f 	dsb	sy
 800bdf2:	61fb      	str	r3, [r7, #28]
}
 800bdf4:	bf00      	nop
 800bdf6:	bf00      	nop
 800bdf8:	e7fd      	b.n	800bdf6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bdfa:	f001 ff8d 	bl	800dd18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bdfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be06:	429a      	cmp	r2, r3
 800be08:	d302      	bcc.n	800be10 <xQueueGenericSend+0xdc>
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	2b02      	cmp	r3, #2
 800be0e:	d129      	bne.n	800be64 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800be10:	683a      	ldr	r2, [r7, #0]
 800be12:	68b9      	ldr	r1, [r7, #8]
 800be14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800be16:	f000 fa0f 	bl	800c238 <prvCopyDataToQueue>
 800be1a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be20:	2b00      	cmp	r3, #0
 800be22:	d010      	beq.n	800be46 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be26:	3324      	adds	r3, #36	@ 0x24
 800be28:	4618      	mov	r0, r3
 800be2a:	f001 f831 	bl	800ce90 <xTaskRemoveFromEventList>
 800be2e:	4603      	mov	r3, r0
 800be30:	2b00      	cmp	r3, #0
 800be32:	d013      	beq.n	800be5c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800be34:	4b3f      	ldr	r3, [pc, #252]	@ (800bf34 <xQueueGenericSend+0x200>)
 800be36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be3a:	601a      	str	r2, [r3, #0]
 800be3c:	f3bf 8f4f 	dsb	sy
 800be40:	f3bf 8f6f 	isb	sy
 800be44:	e00a      	b.n	800be5c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800be46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d007      	beq.n	800be5c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800be4c:	4b39      	ldr	r3, [pc, #228]	@ (800bf34 <xQueueGenericSend+0x200>)
 800be4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be52:	601a      	str	r2, [r3, #0]
 800be54:	f3bf 8f4f 	dsb	sy
 800be58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800be5c:	f001 ff8e 	bl	800dd7c <vPortExitCritical>
				return pdPASS;
 800be60:	2301      	movs	r3, #1
 800be62:	e063      	b.n	800bf2c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d103      	bne.n	800be72 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800be6a:	f001 ff87 	bl	800dd7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800be6e:	2300      	movs	r3, #0
 800be70:	e05c      	b.n	800bf2c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be74:	2b00      	cmp	r3, #0
 800be76:	d106      	bne.n	800be86 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be78:	f107 0314 	add.w	r3, r7, #20
 800be7c:	4618      	mov	r0, r3
 800be7e:	f001 f86b 	bl	800cf58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be82:	2301      	movs	r3, #1
 800be84:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be86:	f001 ff79 	bl	800dd7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be8a:	f000 fda9 	bl	800c9e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be8e:	f001 ff43 	bl	800dd18 <vPortEnterCritical>
 800be92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800be98:	b25b      	sxtb	r3, r3
 800be9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be9e:	d103      	bne.n	800bea8 <xQueueGenericSend+0x174>
 800bea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bea2:	2200      	movs	r2, #0
 800bea4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beaa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800beae:	b25b      	sxtb	r3, r3
 800beb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beb4:	d103      	bne.n	800bebe <xQueueGenericSend+0x18a>
 800beb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beb8:	2200      	movs	r2, #0
 800beba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bebe:	f001 ff5d 	bl	800dd7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bec2:	1d3a      	adds	r2, r7, #4
 800bec4:	f107 0314 	add.w	r3, r7, #20
 800bec8:	4611      	mov	r1, r2
 800beca:	4618      	mov	r0, r3
 800becc:	f001 f85a 	bl	800cf84 <xTaskCheckForTimeOut>
 800bed0:	4603      	mov	r3, r0
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d124      	bne.n	800bf20 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bed6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bed8:	f000 faa6 	bl	800c428 <prvIsQueueFull>
 800bedc:	4603      	mov	r3, r0
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d018      	beq.n	800bf14 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bee4:	3310      	adds	r3, #16
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	4611      	mov	r1, r2
 800beea:	4618      	mov	r0, r3
 800beec:	f000 ff7e 	bl	800cdec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bef0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bef2:	f000 fa31 	bl	800c358 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bef6:	f000 fd81 	bl	800c9fc <xTaskResumeAll>
 800befa:	4603      	mov	r3, r0
 800befc:	2b00      	cmp	r3, #0
 800befe:	f47f af7c 	bne.w	800bdfa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800bf02:	4b0c      	ldr	r3, [pc, #48]	@ (800bf34 <xQueueGenericSend+0x200>)
 800bf04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf08:	601a      	str	r2, [r3, #0]
 800bf0a:	f3bf 8f4f 	dsb	sy
 800bf0e:	f3bf 8f6f 	isb	sy
 800bf12:	e772      	b.n	800bdfa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bf14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bf16:	f000 fa1f 	bl	800c358 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf1a:	f000 fd6f 	bl	800c9fc <xTaskResumeAll>
 800bf1e:	e76c      	b.n	800bdfa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bf20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bf22:	f000 fa19 	bl	800c358 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf26:	f000 fd69 	bl	800c9fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bf2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3738      	adds	r7, #56	@ 0x38
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}
 800bf34:	e000ed04 	.word	0xe000ed04

0800bf38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b090      	sub	sp, #64	@ 0x40
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	60f8      	str	r0, [r7, #12]
 800bf40:	60b9      	str	r1, [r7, #8]
 800bf42:	607a      	str	r2, [r7, #4]
 800bf44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800bf4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d10b      	bne.n	800bf68 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800bf50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf54:	f383 8811 	msr	BASEPRI, r3
 800bf58:	f3bf 8f6f 	isb	sy
 800bf5c:	f3bf 8f4f 	dsb	sy
 800bf60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bf62:	bf00      	nop
 800bf64:	bf00      	nop
 800bf66:	e7fd      	b.n	800bf64 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d103      	bne.n	800bf76 <xQueueGenericSendFromISR+0x3e>
 800bf6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d101      	bne.n	800bf7a <xQueueGenericSendFromISR+0x42>
 800bf76:	2301      	movs	r3, #1
 800bf78:	e000      	b.n	800bf7c <xQueueGenericSendFromISR+0x44>
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d10b      	bne.n	800bf98 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800bf80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf84:	f383 8811 	msr	BASEPRI, r3
 800bf88:	f3bf 8f6f 	isb	sy
 800bf8c:	f3bf 8f4f 	dsb	sy
 800bf90:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bf92:	bf00      	nop
 800bf94:	bf00      	nop
 800bf96:	e7fd      	b.n	800bf94 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	2b02      	cmp	r3, #2
 800bf9c:	d103      	bne.n	800bfa6 <xQueueGenericSendFromISR+0x6e>
 800bf9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d101      	bne.n	800bfaa <xQueueGenericSendFromISR+0x72>
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	e000      	b.n	800bfac <xQueueGenericSendFromISR+0x74>
 800bfaa:	2300      	movs	r3, #0
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d10b      	bne.n	800bfc8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800bfb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfb4:	f383 8811 	msr	BASEPRI, r3
 800bfb8:	f3bf 8f6f 	isb	sy
 800bfbc:	f3bf 8f4f 	dsb	sy
 800bfc0:	623b      	str	r3, [r7, #32]
}
 800bfc2:	bf00      	nop
 800bfc4:	bf00      	nop
 800bfc6:	e7fd      	b.n	800bfc4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bfc8:	f001 ff86 	bl	800ded8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bfcc:	f3ef 8211 	mrs	r2, BASEPRI
 800bfd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfd4:	f383 8811 	msr	BASEPRI, r3
 800bfd8:	f3bf 8f6f 	isb	sy
 800bfdc:	f3bf 8f4f 	dsb	sy
 800bfe0:	61fa      	str	r2, [r7, #28]
 800bfe2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bfe4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bfe6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bfe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bfec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d302      	bcc.n	800bffa <xQueueGenericSendFromISR+0xc2>
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	2b02      	cmp	r3, #2
 800bff8:	d12f      	bne.n	800c05a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bffc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c000:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c008:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c00a:	683a      	ldr	r2, [r7, #0]
 800c00c:	68b9      	ldr	r1, [r7, #8]
 800c00e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c010:	f000 f912 	bl	800c238 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c014:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c01c:	d112      	bne.n	800c044 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c022:	2b00      	cmp	r3, #0
 800c024:	d016      	beq.n	800c054 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c028:	3324      	adds	r3, #36	@ 0x24
 800c02a:	4618      	mov	r0, r3
 800c02c:	f000 ff30 	bl	800ce90 <xTaskRemoveFromEventList>
 800c030:	4603      	mov	r3, r0
 800c032:	2b00      	cmp	r3, #0
 800c034:	d00e      	beq.n	800c054 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d00b      	beq.n	800c054 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2201      	movs	r2, #1
 800c040:	601a      	str	r2, [r3, #0]
 800c042:	e007      	b.n	800c054 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c044:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c048:	3301      	adds	r3, #1
 800c04a:	b2db      	uxtb	r3, r3
 800c04c:	b25a      	sxtb	r2, r3
 800c04e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c050:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c054:	2301      	movs	r3, #1
 800c056:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c058:	e001      	b.n	800c05e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c05a:	2300      	movs	r3, #0
 800c05c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c05e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c060:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c068:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c06a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3740      	adds	r7, #64	@ 0x40
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}

0800c074 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b08c      	sub	sp, #48	@ 0x30
 800c078:	af00      	add	r7, sp, #0
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	60b9      	str	r1, [r7, #8]
 800c07e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c080:	2300      	movs	r3, #0
 800c082:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d10b      	bne.n	800c0a6 <xQueueReceive+0x32>
	__asm volatile
 800c08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c092:	f383 8811 	msr	BASEPRI, r3
 800c096:	f3bf 8f6f 	isb	sy
 800c09a:	f3bf 8f4f 	dsb	sy
 800c09e:	623b      	str	r3, [r7, #32]
}
 800c0a0:	bf00      	nop
 800c0a2:	bf00      	nop
 800c0a4:	e7fd      	b.n	800c0a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d103      	bne.n	800c0b4 <xQueueReceive+0x40>
 800c0ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d101      	bne.n	800c0b8 <xQueueReceive+0x44>
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	e000      	b.n	800c0ba <xQueueReceive+0x46>
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d10b      	bne.n	800c0d6 <xQueueReceive+0x62>
	__asm volatile
 800c0be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0c2:	f383 8811 	msr	BASEPRI, r3
 800c0c6:	f3bf 8f6f 	isb	sy
 800c0ca:	f3bf 8f4f 	dsb	sy
 800c0ce:	61fb      	str	r3, [r7, #28]
}
 800c0d0:	bf00      	nop
 800c0d2:	bf00      	nop
 800c0d4:	e7fd      	b.n	800c0d2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c0d6:	f001 f8a1 	bl	800d21c <xTaskGetSchedulerState>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d102      	bne.n	800c0e6 <xQueueReceive+0x72>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d101      	bne.n	800c0ea <xQueueReceive+0x76>
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	e000      	b.n	800c0ec <xQueueReceive+0x78>
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d10b      	bne.n	800c108 <xQueueReceive+0x94>
	__asm volatile
 800c0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0f4:	f383 8811 	msr	BASEPRI, r3
 800c0f8:	f3bf 8f6f 	isb	sy
 800c0fc:	f3bf 8f4f 	dsb	sy
 800c100:	61bb      	str	r3, [r7, #24]
}
 800c102:	bf00      	nop
 800c104:	bf00      	nop
 800c106:	e7fd      	b.n	800c104 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c108:	f001 fe06 	bl	800dd18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c10c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c10e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c110:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c114:	2b00      	cmp	r3, #0
 800c116:	d01f      	beq.n	800c158 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c118:	68b9      	ldr	r1, [r7, #8]
 800c11a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c11c:	f000 f8f6 	bl	800c30c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c122:	1e5a      	subs	r2, r3, #1
 800c124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c126:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c12a:	691b      	ldr	r3, [r3, #16]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d00f      	beq.n	800c150 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c132:	3310      	adds	r3, #16
 800c134:	4618      	mov	r0, r3
 800c136:	f000 feab 	bl	800ce90 <xTaskRemoveFromEventList>
 800c13a:	4603      	mov	r3, r0
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d007      	beq.n	800c150 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c140:	4b3c      	ldr	r3, [pc, #240]	@ (800c234 <xQueueReceive+0x1c0>)
 800c142:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c146:	601a      	str	r2, [r3, #0]
 800c148:	f3bf 8f4f 	dsb	sy
 800c14c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c150:	f001 fe14 	bl	800dd7c <vPortExitCritical>
				return pdPASS;
 800c154:	2301      	movs	r3, #1
 800c156:	e069      	b.n	800c22c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d103      	bne.n	800c166 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c15e:	f001 fe0d 	bl	800dd7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c162:	2300      	movs	r3, #0
 800c164:	e062      	b.n	800c22c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d106      	bne.n	800c17a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c16c:	f107 0310 	add.w	r3, r7, #16
 800c170:	4618      	mov	r0, r3
 800c172:	f000 fef1 	bl	800cf58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c176:	2301      	movs	r3, #1
 800c178:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c17a:	f001 fdff 	bl	800dd7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c17e:	f000 fc2f 	bl	800c9e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c182:	f001 fdc9 	bl	800dd18 <vPortEnterCritical>
 800c186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c188:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c18c:	b25b      	sxtb	r3, r3
 800c18e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c192:	d103      	bne.n	800c19c <xQueueReceive+0x128>
 800c194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c196:	2200      	movs	r2, #0
 800c198:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c19c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c19e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c1a2:	b25b      	sxtb	r3, r3
 800c1a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1a8:	d103      	bne.n	800c1b2 <xQueueReceive+0x13e>
 800c1aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c1b2:	f001 fde3 	bl	800dd7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c1b6:	1d3a      	adds	r2, r7, #4
 800c1b8:	f107 0310 	add.w	r3, r7, #16
 800c1bc:	4611      	mov	r1, r2
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f000 fee0 	bl	800cf84 <xTaskCheckForTimeOut>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d123      	bne.n	800c212 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c1ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1cc:	f000 f916 	bl	800c3fc <prvIsQueueEmpty>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d017      	beq.n	800c206 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c1d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1d8:	3324      	adds	r3, #36	@ 0x24
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	4611      	mov	r1, r2
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f000 fe04 	bl	800cdec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c1e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1e6:	f000 f8b7 	bl	800c358 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c1ea:	f000 fc07 	bl	800c9fc <xTaskResumeAll>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d189      	bne.n	800c108 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c1f4:	4b0f      	ldr	r3, [pc, #60]	@ (800c234 <xQueueReceive+0x1c0>)
 800c1f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1fa:	601a      	str	r2, [r3, #0]
 800c1fc:	f3bf 8f4f 	dsb	sy
 800c200:	f3bf 8f6f 	isb	sy
 800c204:	e780      	b.n	800c108 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c206:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c208:	f000 f8a6 	bl	800c358 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c20c:	f000 fbf6 	bl	800c9fc <xTaskResumeAll>
 800c210:	e77a      	b.n	800c108 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c212:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c214:	f000 f8a0 	bl	800c358 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c218:	f000 fbf0 	bl	800c9fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c21c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c21e:	f000 f8ed 	bl	800c3fc <prvIsQueueEmpty>
 800c222:	4603      	mov	r3, r0
 800c224:	2b00      	cmp	r3, #0
 800c226:	f43f af6f 	beq.w	800c108 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c22a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3730      	adds	r7, #48	@ 0x30
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}
 800c234:	e000ed04 	.word	0xe000ed04

0800c238 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b086      	sub	sp, #24
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c244:	2300      	movs	r3, #0
 800c246:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c24c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c252:	2b00      	cmp	r3, #0
 800c254:	d10d      	bne.n	800c272 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d14d      	bne.n	800c2fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	689b      	ldr	r3, [r3, #8]
 800c262:	4618      	mov	r0, r3
 800c264:	f000 fff8 	bl	800d258 <xTaskPriorityDisinherit>
 800c268:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2200      	movs	r2, #0
 800c26e:	609a      	str	r2, [r3, #8]
 800c270:	e043      	b.n	800c2fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d119      	bne.n	800c2ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	6858      	ldr	r0, [r3, #4]
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c280:	461a      	mov	r2, r3
 800c282:	68b9      	ldr	r1, [r7, #8]
 800c284:	f002 f8e4 	bl	800e450 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	685a      	ldr	r2, [r3, #4]
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c290:	441a      	add	r2, r3
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	685a      	ldr	r2, [r3, #4]
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	689b      	ldr	r3, [r3, #8]
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d32b      	bcc.n	800c2fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681a      	ldr	r2, [r3, #0]
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	605a      	str	r2, [r3, #4]
 800c2aa:	e026      	b.n	800c2fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	68d8      	ldr	r0, [r3, #12]
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	68b9      	ldr	r1, [r7, #8]
 800c2b8:	f002 f8ca 	bl	800e450 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	68da      	ldr	r2, [r3, #12]
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2c4:	425b      	negs	r3, r3
 800c2c6:	441a      	add	r2, r3
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	68da      	ldr	r2, [r3, #12]
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d207      	bcs.n	800c2e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	689a      	ldr	r2, [r3, #8]
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2e0:	425b      	negs	r3, r3
 800c2e2:	441a      	add	r2, r3
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2b02      	cmp	r3, #2
 800c2ec:	d105      	bne.n	800c2fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c2ee:	693b      	ldr	r3, [r7, #16]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d002      	beq.n	800c2fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	3b01      	subs	r3, #1
 800c2f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	1c5a      	adds	r2, r3, #1
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c302:	697b      	ldr	r3, [r7, #20]
}
 800c304:	4618      	mov	r0, r3
 800c306:	3718      	adds	r7, #24
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}

0800c30c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b082      	sub	sp, #8
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d018      	beq.n	800c350 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	68da      	ldr	r2, [r3, #12]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c326:	441a      	add	r2, r3
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	68da      	ldr	r2, [r3, #12]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	689b      	ldr	r3, [r3, #8]
 800c334:	429a      	cmp	r2, r3
 800c336:	d303      	bcc.n	800c340 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	68d9      	ldr	r1, [r3, #12]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c348:	461a      	mov	r2, r3
 800c34a:	6838      	ldr	r0, [r7, #0]
 800c34c:	f002 f880 	bl	800e450 <memcpy>
	}
}
 800c350:	bf00      	nop
 800c352:	3708      	adds	r7, #8
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c360:	f001 fcda 	bl	800dd18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c36a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c36c:	e011      	b.n	800c392 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c372:	2b00      	cmp	r3, #0
 800c374:	d012      	beq.n	800c39c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	3324      	adds	r3, #36	@ 0x24
 800c37a:	4618      	mov	r0, r3
 800c37c:	f000 fd88 	bl	800ce90 <xTaskRemoveFromEventList>
 800c380:	4603      	mov	r3, r0
 800c382:	2b00      	cmp	r3, #0
 800c384:	d001      	beq.n	800c38a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c386:	f000 fe61 	bl	800d04c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c38a:	7bfb      	ldrb	r3, [r7, #15]
 800c38c:	3b01      	subs	r3, #1
 800c38e:	b2db      	uxtb	r3, r3
 800c390:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c396:	2b00      	cmp	r3, #0
 800c398:	dce9      	bgt.n	800c36e <prvUnlockQueue+0x16>
 800c39a:	e000      	b.n	800c39e <prvUnlockQueue+0x46>
					break;
 800c39c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	22ff      	movs	r2, #255	@ 0xff
 800c3a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c3a6:	f001 fce9 	bl	800dd7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c3aa:	f001 fcb5 	bl	800dd18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c3b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c3b6:	e011      	b.n	800c3dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	691b      	ldr	r3, [r3, #16]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d012      	beq.n	800c3e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	3310      	adds	r3, #16
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f000 fd63 	bl	800ce90 <xTaskRemoveFromEventList>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d001      	beq.n	800c3d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c3d0:	f000 fe3c 	bl	800d04c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c3d4:	7bbb      	ldrb	r3, [r7, #14]
 800c3d6:	3b01      	subs	r3, #1
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c3dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	dce9      	bgt.n	800c3b8 <prvUnlockQueue+0x60>
 800c3e4:	e000      	b.n	800c3e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c3e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	22ff      	movs	r2, #255	@ 0xff
 800c3ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c3f0:	f001 fcc4 	bl	800dd7c <vPortExitCritical>
}
 800c3f4:	bf00      	nop
 800c3f6:	3710      	adds	r7, #16
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c404:	f001 fc88 	bl	800dd18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d102      	bne.n	800c416 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c410:	2301      	movs	r3, #1
 800c412:	60fb      	str	r3, [r7, #12]
 800c414:	e001      	b.n	800c41a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c416:	2300      	movs	r3, #0
 800c418:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c41a:	f001 fcaf 	bl	800dd7c <vPortExitCritical>

	return xReturn;
 800c41e:	68fb      	ldr	r3, [r7, #12]
}
 800c420:	4618      	mov	r0, r3
 800c422:	3710      	adds	r7, #16
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}

0800c428 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b084      	sub	sp, #16
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c430:	f001 fc72 	bl	800dd18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d102      	bne.n	800c446 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c440:	2301      	movs	r3, #1
 800c442:	60fb      	str	r3, [r7, #12]
 800c444:	e001      	b.n	800c44a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c446:	2300      	movs	r3, #0
 800c448:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c44a:	f001 fc97 	bl	800dd7c <vPortExitCritical>

	return xReturn;
 800c44e:	68fb      	ldr	r3, [r7, #12]
}
 800c450:	4618      	mov	r0, r3
 800c452:	3710      	adds	r7, #16
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c458:	b480      	push	{r7}
 800c45a:	b085      	sub	sp, #20
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c462:	2300      	movs	r3, #0
 800c464:	60fb      	str	r3, [r7, #12]
 800c466:	e014      	b.n	800c492 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c468:	4a0f      	ldr	r2, [pc, #60]	@ (800c4a8 <vQueueAddToRegistry+0x50>)
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d10b      	bne.n	800c48c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c474:	490c      	ldr	r1, [pc, #48]	@ (800c4a8 <vQueueAddToRegistry+0x50>)
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	683a      	ldr	r2, [r7, #0]
 800c47a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c47e:	4a0a      	ldr	r2, [pc, #40]	@ (800c4a8 <vQueueAddToRegistry+0x50>)
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	00db      	lsls	r3, r3, #3
 800c484:	4413      	add	r3, r2
 800c486:	687a      	ldr	r2, [r7, #4]
 800c488:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c48a:	e006      	b.n	800c49a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	3301      	adds	r3, #1
 800c490:	60fb      	str	r3, [r7, #12]
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	2b07      	cmp	r3, #7
 800c496:	d9e7      	bls.n	800c468 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c498:	bf00      	nop
 800c49a:	bf00      	nop
 800c49c:	3714      	adds	r7, #20
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a4:	4770      	bx	lr
 800c4a6:	bf00      	nop
 800c4a8:	240014a8 	.word	0x240014a8

0800c4ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b086      	sub	sp, #24
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	60f8      	str	r0, [r7, #12]
 800c4b4:	60b9      	str	r1, [r7, #8]
 800c4b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c4bc:	f001 fc2c 	bl	800dd18 <vPortEnterCritical>
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c4c6:	b25b      	sxtb	r3, r3
 800c4c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4cc:	d103      	bne.n	800c4d6 <vQueueWaitForMessageRestricted+0x2a>
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c4dc:	b25b      	sxtb	r3, r3
 800c4de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4e2:	d103      	bne.n	800c4ec <vQueueWaitForMessageRestricted+0x40>
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c4ec:	f001 fc46 	bl	800dd7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d106      	bne.n	800c506 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	3324      	adds	r3, #36	@ 0x24
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	68b9      	ldr	r1, [r7, #8]
 800c500:	4618      	mov	r0, r3
 800c502:	f000 fc99 	bl	800ce38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c506:	6978      	ldr	r0, [r7, #20]
 800c508:	f7ff ff26 	bl	800c358 <prvUnlockQueue>
	}
 800c50c:	bf00      	nop
 800c50e:	3718      	adds	r7, #24
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}

0800c514 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c514:	b580      	push	{r7, lr}
 800c516:	b08e      	sub	sp, #56	@ 0x38
 800c518:	af04      	add	r7, sp, #16
 800c51a:	60f8      	str	r0, [r7, #12]
 800c51c:	60b9      	str	r1, [r7, #8]
 800c51e:	607a      	str	r2, [r7, #4]
 800c520:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c524:	2b00      	cmp	r3, #0
 800c526:	d10b      	bne.n	800c540 <xTaskCreateStatic+0x2c>
	__asm volatile
 800c528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c52c:	f383 8811 	msr	BASEPRI, r3
 800c530:	f3bf 8f6f 	isb	sy
 800c534:	f3bf 8f4f 	dsb	sy
 800c538:	623b      	str	r3, [r7, #32]
}
 800c53a:	bf00      	nop
 800c53c:	bf00      	nop
 800c53e:	e7fd      	b.n	800c53c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c542:	2b00      	cmp	r3, #0
 800c544:	d10b      	bne.n	800c55e <xTaskCreateStatic+0x4a>
	__asm volatile
 800c546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c54a:	f383 8811 	msr	BASEPRI, r3
 800c54e:	f3bf 8f6f 	isb	sy
 800c552:	f3bf 8f4f 	dsb	sy
 800c556:	61fb      	str	r3, [r7, #28]
}
 800c558:	bf00      	nop
 800c55a:	bf00      	nop
 800c55c:	e7fd      	b.n	800c55a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c55e:	23ac      	movs	r3, #172	@ 0xac
 800c560:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	2bac      	cmp	r3, #172	@ 0xac
 800c566:	d00b      	beq.n	800c580 <xTaskCreateStatic+0x6c>
	__asm volatile
 800c568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c56c:	f383 8811 	msr	BASEPRI, r3
 800c570:	f3bf 8f6f 	isb	sy
 800c574:	f3bf 8f4f 	dsb	sy
 800c578:	61bb      	str	r3, [r7, #24]
}
 800c57a:	bf00      	nop
 800c57c:	bf00      	nop
 800c57e:	e7fd      	b.n	800c57c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c580:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c584:	2b00      	cmp	r3, #0
 800c586:	d01e      	beq.n	800c5c6 <xTaskCreateStatic+0xb2>
 800c588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d01b      	beq.n	800c5c6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c590:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c594:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c596:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c59a:	2202      	movs	r2, #2
 800c59c:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	9303      	str	r3, [sp, #12]
 800c5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5a6:	9302      	str	r3, [sp, #8]
 800c5a8:	f107 0314 	add.w	r3, r7, #20
 800c5ac:	9301      	str	r3, [sp, #4]
 800c5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b0:	9300      	str	r3, [sp, #0]
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	687a      	ldr	r2, [r7, #4]
 800c5b6:	68b9      	ldr	r1, [r7, #8]
 800c5b8:	68f8      	ldr	r0, [r7, #12]
 800c5ba:	f000 f851 	bl	800c660 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c5be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c5c0:	f000 f8f8 	bl	800c7b4 <prvAddNewTaskToReadyList>
 800c5c4:	e001      	b.n	800c5ca <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c5ca:	697b      	ldr	r3, [r7, #20]
	}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3728      	adds	r7, #40	@ 0x28
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b08c      	sub	sp, #48	@ 0x30
 800c5d8:	af04      	add	r7, sp, #16
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	60b9      	str	r1, [r7, #8]
 800c5de:	603b      	str	r3, [r7, #0]
 800c5e0:	4613      	mov	r3, r2
 800c5e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c5e4:	88fb      	ldrh	r3, [r7, #6]
 800c5e6:	009b      	lsls	r3, r3, #2
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f001 fcb7 	bl	800df5c <pvPortMalloc>
 800c5ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d00e      	beq.n	800c614 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c5f6:	20ac      	movs	r0, #172	@ 0xac
 800c5f8:	f001 fcb0 	bl	800df5c <pvPortMalloc>
 800c5fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c5fe:	69fb      	ldr	r3, [r7, #28]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d003      	beq.n	800c60c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c604:	69fb      	ldr	r3, [r7, #28]
 800c606:	697a      	ldr	r2, [r7, #20]
 800c608:	631a      	str	r2, [r3, #48]	@ 0x30
 800c60a:	e005      	b.n	800c618 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c60c:	6978      	ldr	r0, [r7, #20]
 800c60e:	f001 fd73 	bl	800e0f8 <vPortFree>
 800c612:	e001      	b.n	800c618 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c614:	2300      	movs	r3, #0
 800c616:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c618:	69fb      	ldr	r3, [r7, #28]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d017      	beq.n	800c64e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c61e:	69fb      	ldr	r3, [r7, #28]
 800c620:	2200      	movs	r2, #0
 800c622:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c626:	88fa      	ldrh	r2, [r7, #6]
 800c628:	2300      	movs	r3, #0
 800c62a:	9303      	str	r3, [sp, #12]
 800c62c:	69fb      	ldr	r3, [r7, #28]
 800c62e:	9302      	str	r3, [sp, #8]
 800c630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c632:	9301      	str	r3, [sp, #4]
 800c634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c636:	9300      	str	r3, [sp, #0]
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	68b9      	ldr	r1, [r7, #8]
 800c63c:	68f8      	ldr	r0, [r7, #12]
 800c63e:	f000 f80f 	bl	800c660 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c642:	69f8      	ldr	r0, [r7, #28]
 800c644:	f000 f8b6 	bl	800c7b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c648:	2301      	movs	r3, #1
 800c64a:	61bb      	str	r3, [r7, #24]
 800c64c:	e002      	b.n	800c654 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c64e:	f04f 33ff 	mov.w	r3, #4294967295
 800c652:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c654:	69bb      	ldr	r3, [r7, #24]
	}
 800c656:	4618      	mov	r0, r3
 800c658:	3720      	adds	r7, #32
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
	...

0800c660 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b088      	sub	sp, #32
 800c664:	af00      	add	r7, sp, #0
 800c666:	60f8      	str	r0, [r7, #12]
 800c668:	60b9      	str	r1, [r7, #8]
 800c66a:	607a      	str	r2, [r7, #4]
 800c66c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c670:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	009b      	lsls	r3, r3, #2
 800c676:	461a      	mov	r2, r3
 800c678:	21a5      	movs	r1, #165	@ 0xa5
 800c67a:	f001 fe5d 	bl	800e338 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c680:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c682:	6879      	ldr	r1, [r7, #4]
 800c684:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800c688:	440b      	add	r3, r1
 800c68a:	009b      	lsls	r3, r3, #2
 800c68c:	4413      	add	r3, r2
 800c68e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c690:	69bb      	ldr	r3, [r7, #24]
 800c692:	f023 0307 	bic.w	r3, r3, #7
 800c696:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c698:	69bb      	ldr	r3, [r7, #24]
 800c69a:	f003 0307 	and.w	r3, r3, #7
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d00b      	beq.n	800c6ba <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c6a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6a6:	f383 8811 	msr	BASEPRI, r3
 800c6aa:	f3bf 8f6f 	isb	sy
 800c6ae:	f3bf 8f4f 	dsb	sy
 800c6b2:	617b      	str	r3, [r7, #20]
}
 800c6b4:	bf00      	nop
 800c6b6:	bf00      	nop
 800c6b8:	e7fd      	b.n	800c6b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d01f      	beq.n	800c700 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	61fb      	str	r3, [r7, #28]
 800c6c4:	e012      	b.n	800c6ec <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c6c6:	68ba      	ldr	r2, [r7, #8]
 800c6c8:	69fb      	ldr	r3, [r7, #28]
 800c6ca:	4413      	add	r3, r2
 800c6cc:	7819      	ldrb	r1, [r3, #0]
 800c6ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6d0:	69fb      	ldr	r3, [r7, #28]
 800c6d2:	4413      	add	r3, r2
 800c6d4:	3334      	adds	r3, #52	@ 0x34
 800c6d6:	460a      	mov	r2, r1
 800c6d8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c6da:	68ba      	ldr	r2, [r7, #8]
 800c6dc:	69fb      	ldr	r3, [r7, #28]
 800c6de:	4413      	add	r3, r2
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d006      	beq.n	800c6f4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c6e6:	69fb      	ldr	r3, [r7, #28]
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	61fb      	str	r3, [r7, #28]
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	2b0f      	cmp	r3, #15
 800c6f0:	d9e9      	bls.n	800c6c6 <prvInitialiseNewTask+0x66>
 800c6f2:	e000      	b.n	800c6f6 <prvInitialiseNewTask+0x96>
			{
				break;
 800c6f4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c6fe:	e003      	b.n	800c708 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c702:	2200      	movs	r2, #0
 800c704:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c70a:	2b06      	cmp	r3, #6
 800c70c:	d901      	bls.n	800c712 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c70e:	2306      	movs	r3, #6
 800c710:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c714:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c716:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c71a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c71c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c720:	2200      	movs	r2, #0
 800c722:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c726:	3304      	adds	r3, #4
 800c728:	4618      	mov	r0, r3
 800c72a:	f7ff f964 	bl	800b9f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c72e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c730:	3318      	adds	r3, #24
 800c732:	4618      	mov	r0, r3
 800c734:	f7ff f95f 	bl	800b9f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c73a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c73c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c73e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c740:	f1c3 0207 	rsb	r2, r3, #7
 800c744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c746:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c74a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c74c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800c74e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c750:	2200      	movs	r2, #0
 800c752:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c756:	2200      	movs	r2, #0
 800c758:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c75c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c75e:	2200      	movs	r2, #0
 800c760:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c766:	3358      	adds	r3, #88	@ 0x58
 800c768:	224c      	movs	r2, #76	@ 0x4c
 800c76a:	2100      	movs	r1, #0
 800c76c:	4618      	mov	r0, r3
 800c76e:	f001 fde3 	bl	800e338 <memset>
 800c772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c774:	4a0c      	ldr	r2, [pc, #48]	@ (800c7a8 <prvInitialiseNewTask+0x148>)
 800c776:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c77a:	4a0c      	ldr	r2, [pc, #48]	@ (800c7ac <prvInitialiseNewTask+0x14c>)
 800c77c:	661a      	str	r2, [r3, #96]	@ 0x60
 800c77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c780:	4a0b      	ldr	r2, [pc, #44]	@ (800c7b0 <prvInitialiseNewTask+0x150>)
 800c782:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c784:	683a      	ldr	r2, [r7, #0]
 800c786:	68f9      	ldr	r1, [r7, #12]
 800c788:	69b8      	ldr	r0, [r7, #24]
 800c78a:	f001 f991 	bl	800dab0 <pxPortInitialiseStack>
 800c78e:	4602      	mov	r2, r0
 800c790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c792:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c796:	2b00      	cmp	r3, #0
 800c798:	d002      	beq.n	800c7a0 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c79a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c79c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c79e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7a0:	bf00      	nop
 800c7a2:	3720      	adds	r7, #32
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}
 800c7a8:	2400c710 	.word	0x2400c710
 800c7ac:	2400c778 	.word	0x2400c778
 800c7b0:	2400c7e0 	.word	0x2400c7e0

0800c7b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b082      	sub	sp, #8
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c7bc:	f001 faac 	bl	800dd18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c7c0:	4b2c      	ldr	r3, [pc, #176]	@ (800c874 <prvAddNewTaskToReadyList+0xc0>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	4a2b      	ldr	r2, [pc, #172]	@ (800c874 <prvAddNewTaskToReadyList+0xc0>)
 800c7c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c7ca:	4b2b      	ldr	r3, [pc, #172]	@ (800c878 <prvAddNewTaskToReadyList+0xc4>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d109      	bne.n	800c7e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c7d2:	4a29      	ldr	r2, [pc, #164]	@ (800c878 <prvAddNewTaskToReadyList+0xc4>)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c7d8:	4b26      	ldr	r3, [pc, #152]	@ (800c874 <prvAddNewTaskToReadyList+0xc0>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	2b01      	cmp	r3, #1
 800c7de:	d110      	bne.n	800c802 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c7e0:	f000 fc58 	bl	800d094 <prvInitialiseTaskLists>
 800c7e4:	e00d      	b.n	800c802 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c7e6:	4b25      	ldr	r3, [pc, #148]	@ (800c87c <prvAddNewTaskToReadyList+0xc8>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d109      	bne.n	800c802 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c7ee:	4b22      	ldr	r3, [pc, #136]	@ (800c878 <prvAddNewTaskToReadyList+0xc4>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d802      	bhi.n	800c802 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c7fc:	4a1e      	ldr	r2, [pc, #120]	@ (800c878 <prvAddNewTaskToReadyList+0xc4>)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c802:	4b1f      	ldr	r3, [pc, #124]	@ (800c880 <prvAddNewTaskToReadyList+0xcc>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	3301      	adds	r3, #1
 800c808:	4a1d      	ldr	r2, [pc, #116]	@ (800c880 <prvAddNewTaskToReadyList+0xcc>)
 800c80a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c80c:	4b1c      	ldr	r3, [pc, #112]	@ (800c880 <prvAddNewTaskToReadyList+0xcc>)
 800c80e:	681a      	ldr	r2, [r3, #0]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c818:	2201      	movs	r2, #1
 800c81a:	409a      	lsls	r2, r3
 800c81c:	4b19      	ldr	r3, [pc, #100]	@ (800c884 <prvAddNewTaskToReadyList+0xd0>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4313      	orrs	r3, r2
 800c822:	4a18      	ldr	r2, [pc, #96]	@ (800c884 <prvAddNewTaskToReadyList+0xd0>)
 800c824:	6013      	str	r3, [r2, #0]
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c82a:	4613      	mov	r3, r2
 800c82c:	009b      	lsls	r3, r3, #2
 800c82e:	4413      	add	r3, r2
 800c830:	009b      	lsls	r3, r3, #2
 800c832:	4a15      	ldr	r2, [pc, #84]	@ (800c888 <prvAddNewTaskToReadyList+0xd4>)
 800c834:	441a      	add	r2, r3
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	3304      	adds	r3, #4
 800c83a:	4619      	mov	r1, r3
 800c83c:	4610      	mov	r0, r2
 800c83e:	f7ff f8e7 	bl	800ba10 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c842:	f001 fa9b 	bl	800dd7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c846:	4b0d      	ldr	r3, [pc, #52]	@ (800c87c <prvAddNewTaskToReadyList+0xc8>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d00e      	beq.n	800c86c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c84e:	4b0a      	ldr	r3, [pc, #40]	@ (800c878 <prvAddNewTaskToReadyList+0xc4>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c858:	429a      	cmp	r2, r3
 800c85a:	d207      	bcs.n	800c86c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c85c:	4b0b      	ldr	r3, [pc, #44]	@ (800c88c <prvAddNewTaskToReadyList+0xd8>)
 800c85e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c862:	601a      	str	r2, [r3, #0]
 800c864:	f3bf 8f4f 	dsb	sy
 800c868:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c86c:	bf00      	nop
 800c86e:	3708      	adds	r7, #8
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}
 800c874:	240015e8 	.word	0x240015e8
 800c878:	240014e8 	.word	0x240014e8
 800c87c:	240015f4 	.word	0x240015f4
 800c880:	24001604 	.word	0x24001604
 800c884:	240015f0 	.word	0x240015f0
 800c888:	240014ec 	.word	0x240014ec
 800c88c:	e000ed04 	.word	0xe000ed04

0800c890 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c890:	b580      	push	{r7, lr}
 800c892:	b084      	sub	sp, #16
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c898:	2300      	movs	r3, #0
 800c89a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d018      	beq.n	800c8d4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c8a2:	4b14      	ldr	r3, [pc, #80]	@ (800c8f4 <vTaskDelay+0x64>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d00b      	beq.n	800c8c2 <vTaskDelay+0x32>
	__asm volatile
 800c8aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8ae:	f383 8811 	msr	BASEPRI, r3
 800c8b2:	f3bf 8f6f 	isb	sy
 800c8b6:	f3bf 8f4f 	dsb	sy
 800c8ba:	60bb      	str	r3, [r7, #8]
}
 800c8bc:	bf00      	nop
 800c8be:	bf00      	nop
 800c8c0:	e7fd      	b.n	800c8be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c8c2:	f000 f88d 	bl	800c9e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c8c6:	2100      	movs	r1, #0
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f000 fd4d 	bl	800d368 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c8ce:	f000 f895 	bl	800c9fc <xTaskResumeAll>
 800c8d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d107      	bne.n	800c8ea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c8da:	4b07      	ldr	r3, [pc, #28]	@ (800c8f8 <vTaskDelay+0x68>)
 800c8dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8e0:	601a      	str	r2, [r3, #0]
 800c8e2:	f3bf 8f4f 	dsb	sy
 800c8e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c8ea:	bf00      	nop
 800c8ec:	3710      	adds	r7, #16
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}
 800c8f2:	bf00      	nop
 800c8f4:	24001610 	.word	0x24001610
 800c8f8:	e000ed04 	.word	0xe000ed04

0800c8fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b08a      	sub	sp, #40	@ 0x28
 800c900:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c902:	2300      	movs	r3, #0
 800c904:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c906:	2300      	movs	r3, #0
 800c908:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c90a:	463a      	mov	r2, r7
 800c90c:	1d39      	adds	r1, r7, #4
 800c90e:	f107 0308 	add.w	r3, r7, #8
 800c912:	4618      	mov	r0, r3
 800c914:	f7f4 f990 	bl	8000c38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c918:	6839      	ldr	r1, [r7, #0]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	68ba      	ldr	r2, [r7, #8]
 800c91e:	9202      	str	r2, [sp, #8]
 800c920:	9301      	str	r3, [sp, #4]
 800c922:	2300      	movs	r3, #0
 800c924:	9300      	str	r3, [sp, #0]
 800c926:	2300      	movs	r3, #0
 800c928:	460a      	mov	r2, r1
 800c92a:	4925      	ldr	r1, [pc, #148]	@ (800c9c0 <vTaskStartScheduler+0xc4>)
 800c92c:	4825      	ldr	r0, [pc, #148]	@ (800c9c4 <vTaskStartScheduler+0xc8>)
 800c92e:	f7ff fdf1 	bl	800c514 <xTaskCreateStatic>
 800c932:	4603      	mov	r3, r0
 800c934:	4a24      	ldr	r2, [pc, #144]	@ (800c9c8 <vTaskStartScheduler+0xcc>)
 800c936:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c938:	4b23      	ldr	r3, [pc, #140]	@ (800c9c8 <vTaskStartScheduler+0xcc>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d002      	beq.n	800c946 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c940:	2301      	movs	r3, #1
 800c942:	617b      	str	r3, [r7, #20]
 800c944:	e001      	b.n	800c94a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c946:	2300      	movs	r3, #0
 800c948:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	2b01      	cmp	r3, #1
 800c94e:	d102      	bne.n	800c956 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c950:	f000 fd70 	bl	800d434 <xTimerCreateTimerTask>
 800c954:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d11d      	bne.n	800c998 <vTaskStartScheduler+0x9c>
	__asm volatile
 800c95c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c960:	f383 8811 	msr	BASEPRI, r3
 800c964:	f3bf 8f6f 	isb	sy
 800c968:	f3bf 8f4f 	dsb	sy
 800c96c:	613b      	str	r3, [r7, #16]
}
 800c96e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c970:	4b16      	ldr	r3, [pc, #88]	@ (800c9cc <vTaskStartScheduler+0xd0>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	3358      	adds	r3, #88	@ 0x58
 800c976:	4a16      	ldr	r2, [pc, #88]	@ (800c9d0 <vTaskStartScheduler+0xd4>)
 800c978:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c97a:	4b16      	ldr	r3, [pc, #88]	@ (800c9d4 <vTaskStartScheduler+0xd8>)
 800c97c:	f04f 32ff 	mov.w	r2, #4294967295
 800c980:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c982:	4b15      	ldr	r3, [pc, #84]	@ (800c9d8 <vTaskStartScheduler+0xdc>)
 800c984:	2201      	movs	r2, #1
 800c986:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c988:	4b14      	ldr	r3, [pc, #80]	@ (800c9dc <vTaskStartScheduler+0xe0>)
 800c98a:	2200      	movs	r2, #0
 800c98c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800c98e:	f7f4 f939 	bl	8000c04 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c992:	f001 f91d 	bl	800dbd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c996:	e00f      	b.n	800c9b8 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c99e:	d10b      	bne.n	800c9b8 <vTaskStartScheduler+0xbc>
	__asm volatile
 800c9a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9a4:	f383 8811 	msr	BASEPRI, r3
 800c9a8:	f3bf 8f6f 	isb	sy
 800c9ac:	f3bf 8f4f 	dsb	sy
 800c9b0:	60fb      	str	r3, [r7, #12]
}
 800c9b2:	bf00      	nop
 800c9b4:	bf00      	nop
 800c9b6:	e7fd      	b.n	800c9b4 <vTaskStartScheduler+0xb8>
}
 800c9b8:	bf00      	nop
 800c9ba:	3718      	adds	r7, #24
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}
 800c9c0:	0800e5a4 	.word	0x0800e5a4
 800c9c4:	0800d065 	.word	0x0800d065
 800c9c8:	2400160c 	.word	0x2400160c
 800c9cc:	240014e8 	.word	0x240014e8
 800c9d0:	24000014 	.word	0x24000014
 800c9d4:	24001608 	.word	0x24001608
 800c9d8:	240015f4 	.word	0x240015f4
 800c9dc:	240015ec 	.word	0x240015ec

0800c9e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c9e4:	4b04      	ldr	r3, [pc, #16]	@ (800c9f8 <vTaskSuspendAll+0x18>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	4a03      	ldr	r2, [pc, #12]	@ (800c9f8 <vTaskSuspendAll+0x18>)
 800c9ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c9ee:	bf00      	nop
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f6:	4770      	bx	lr
 800c9f8:	24001610 	.word	0x24001610

0800c9fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b084      	sub	sp, #16
 800ca00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ca02:	2300      	movs	r3, #0
 800ca04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ca06:	2300      	movs	r3, #0
 800ca08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ca0a:	4b42      	ldr	r3, [pc, #264]	@ (800cb14 <xTaskResumeAll+0x118>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d10b      	bne.n	800ca2a <xTaskResumeAll+0x2e>
	__asm volatile
 800ca12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca16:	f383 8811 	msr	BASEPRI, r3
 800ca1a:	f3bf 8f6f 	isb	sy
 800ca1e:	f3bf 8f4f 	dsb	sy
 800ca22:	603b      	str	r3, [r7, #0]
}
 800ca24:	bf00      	nop
 800ca26:	bf00      	nop
 800ca28:	e7fd      	b.n	800ca26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ca2a:	f001 f975 	bl	800dd18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ca2e:	4b39      	ldr	r3, [pc, #228]	@ (800cb14 <xTaskResumeAll+0x118>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	3b01      	subs	r3, #1
 800ca34:	4a37      	ldr	r2, [pc, #220]	@ (800cb14 <xTaskResumeAll+0x118>)
 800ca36:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca38:	4b36      	ldr	r3, [pc, #216]	@ (800cb14 <xTaskResumeAll+0x118>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d161      	bne.n	800cb04 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ca40:	4b35      	ldr	r3, [pc, #212]	@ (800cb18 <xTaskResumeAll+0x11c>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d05d      	beq.n	800cb04 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca48:	e02e      	b.n	800caa8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca4a:	4b34      	ldr	r3, [pc, #208]	@ (800cb1c <xTaskResumeAll+0x120>)
 800ca4c:	68db      	ldr	r3, [r3, #12]
 800ca4e:	68db      	ldr	r3, [r3, #12]
 800ca50:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	3318      	adds	r3, #24
 800ca56:	4618      	mov	r0, r3
 800ca58:	f7ff f837 	bl	800baca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	3304      	adds	r3, #4
 800ca60:	4618      	mov	r0, r3
 800ca62:	f7ff f832 	bl	800baca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	409a      	lsls	r2, r3
 800ca6e:	4b2c      	ldr	r3, [pc, #176]	@ (800cb20 <xTaskResumeAll+0x124>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	4313      	orrs	r3, r2
 800ca74:	4a2a      	ldr	r2, [pc, #168]	@ (800cb20 <xTaskResumeAll+0x124>)
 800ca76:	6013      	str	r3, [r2, #0]
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca7c:	4613      	mov	r3, r2
 800ca7e:	009b      	lsls	r3, r3, #2
 800ca80:	4413      	add	r3, r2
 800ca82:	009b      	lsls	r3, r3, #2
 800ca84:	4a27      	ldr	r2, [pc, #156]	@ (800cb24 <xTaskResumeAll+0x128>)
 800ca86:	441a      	add	r2, r3
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	3304      	adds	r3, #4
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	4610      	mov	r0, r2
 800ca90:	f7fe ffbe 	bl	800ba10 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca98:	4b23      	ldr	r3, [pc, #140]	@ (800cb28 <xTaskResumeAll+0x12c>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d302      	bcc.n	800caa8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800caa2:	4b22      	ldr	r3, [pc, #136]	@ (800cb2c <xTaskResumeAll+0x130>)
 800caa4:	2201      	movs	r2, #1
 800caa6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800caa8:	4b1c      	ldr	r3, [pc, #112]	@ (800cb1c <xTaskResumeAll+0x120>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d1cc      	bne.n	800ca4a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d001      	beq.n	800caba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cab6:	f000 fb91 	bl	800d1dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800caba:	4b1d      	ldr	r3, [pc, #116]	@ (800cb30 <xTaskResumeAll+0x134>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d010      	beq.n	800cae8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cac6:	f000 f847 	bl	800cb58 <xTaskIncrementTick>
 800caca:	4603      	mov	r3, r0
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d002      	beq.n	800cad6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cad0:	4b16      	ldr	r3, [pc, #88]	@ (800cb2c <xTaskResumeAll+0x130>)
 800cad2:	2201      	movs	r2, #1
 800cad4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	3b01      	subs	r3, #1
 800cada:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d1f1      	bne.n	800cac6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cae2:	4b13      	ldr	r3, [pc, #76]	@ (800cb30 <xTaskResumeAll+0x134>)
 800cae4:	2200      	movs	r2, #0
 800cae6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cae8:	4b10      	ldr	r3, [pc, #64]	@ (800cb2c <xTaskResumeAll+0x130>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d009      	beq.n	800cb04 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800caf0:	2301      	movs	r3, #1
 800caf2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800caf4:	4b0f      	ldr	r3, [pc, #60]	@ (800cb34 <xTaskResumeAll+0x138>)
 800caf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cafa:	601a      	str	r2, [r3, #0]
 800cafc:	f3bf 8f4f 	dsb	sy
 800cb00:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb04:	f001 f93a 	bl	800dd7c <vPortExitCritical>

	return xAlreadyYielded;
 800cb08:	68bb      	ldr	r3, [r7, #8]
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3710      	adds	r7, #16
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
 800cb12:	bf00      	nop
 800cb14:	24001610 	.word	0x24001610
 800cb18:	240015e8 	.word	0x240015e8
 800cb1c:	240015a8 	.word	0x240015a8
 800cb20:	240015f0 	.word	0x240015f0
 800cb24:	240014ec 	.word	0x240014ec
 800cb28:	240014e8 	.word	0x240014e8
 800cb2c:	240015fc 	.word	0x240015fc
 800cb30:	240015f8 	.word	0x240015f8
 800cb34:	e000ed04 	.word	0xe000ed04

0800cb38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b083      	sub	sp, #12
 800cb3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cb3e:	4b05      	ldr	r3, [pc, #20]	@ (800cb54 <xTaskGetTickCount+0x1c>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cb44:	687b      	ldr	r3, [r7, #4]
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	370c      	adds	r7, #12
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb50:	4770      	bx	lr
 800cb52:	bf00      	nop
 800cb54:	240015ec 	.word	0x240015ec

0800cb58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b086      	sub	sp, #24
 800cb5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb62:	4b4f      	ldr	r3, [pc, #316]	@ (800cca0 <xTaskIncrementTick+0x148>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	f040 808f 	bne.w	800cc8a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cb6c:	4b4d      	ldr	r3, [pc, #308]	@ (800cca4 <xTaskIncrementTick+0x14c>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	3301      	adds	r3, #1
 800cb72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cb74:	4a4b      	ldr	r2, [pc, #300]	@ (800cca4 <xTaskIncrementTick+0x14c>)
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d121      	bne.n	800cbc4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800cb80:	4b49      	ldr	r3, [pc, #292]	@ (800cca8 <xTaskIncrementTick+0x150>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d00b      	beq.n	800cba2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800cb8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb8e:	f383 8811 	msr	BASEPRI, r3
 800cb92:	f3bf 8f6f 	isb	sy
 800cb96:	f3bf 8f4f 	dsb	sy
 800cb9a:	603b      	str	r3, [r7, #0]
}
 800cb9c:	bf00      	nop
 800cb9e:	bf00      	nop
 800cba0:	e7fd      	b.n	800cb9e <xTaskIncrementTick+0x46>
 800cba2:	4b41      	ldr	r3, [pc, #260]	@ (800cca8 <xTaskIncrementTick+0x150>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	60fb      	str	r3, [r7, #12]
 800cba8:	4b40      	ldr	r3, [pc, #256]	@ (800ccac <xTaskIncrementTick+0x154>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	4a3e      	ldr	r2, [pc, #248]	@ (800cca8 <xTaskIncrementTick+0x150>)
 800cbae:	6013      	str	r3, [r2, #0]
 800cbb0:	4a3e      	ldr	r2, [pc, #248]	@ (800ccac <xTaskIncrementTick+0x154>)
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	6013      	str	r3, [r2, #0]
 800cbb6:	4b3e      	ldr	r3, [pc, #248]	@ (800ccb0 <xTaskIncrementTick+0x158>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	3301      	adds	r3, #1
 800cbbc:	4a3c      	ldr	r2, [pc, #240]	@ (800ccb0 <xTaskIncrementTick+0x158>)
 800cbbe:	6013      	str	r3, [r2, #0]
 800cbc0:	f000 fb0c 	bl	800d1dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cbc4:	4b3b      	ldr	r3, [pc, #236]	@ (800ccb4 <xTaskIncrementTick+0x15c>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	693a      	ldr	r2, [r7, #16]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d348      	bcc.n	800cc60 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cbce:	4b36      	ldr	r3, [pc, #216]	@ (800cca8 <xTaskIncrementTick+0x150>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d104      	bne.n	800cbe2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbd8:	4b36      	ldr	r3, [pc, #216]	@ (800ccb4 <xTaskIncrementTick+0x15c>)
 800cbda:	f04f 32ff 	mov.w	r2, #4294967295
 800cbde:	601a      	str	r2, [r3, #0]
					break;
 800cbe0:	e03e      	b.n	800cc60 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbe2:	4b31      	ldr	r3, [pc, #196]	@ (800cca8 <xTaskIncrementTick+0x150>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	68db      	ldr	r3, [r3, #12]
 800cbea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cbf2:	693a      	ldr	r2, [r7, #16]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	d203      	bcs.n	800cc02 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cbfa:	4a2e      	ldr	r2, [pc, #184]	@ (800ccb4 <xTaskIncrementTick+0x15c>)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cc00:	e02e      	b.n	800cc60 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	3304      	adds	r3, #4
 800cc06:	4618      	mov	r0, r3
 800cc08:	f7fe ff5f 	bl	800baca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d004      	beq.n	800cc1e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	3318      	adds	r3, #24
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f7fe ff56 	bl	800baca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc22:	2201      	movs	r2, #1
 800cc24:	409a      	lsls	r2, r3
 800cc26:	4b24      	ldr	r3, [pc, #144]	@ (800ccb8 <xTaskIncrementTick+0x160>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4313      	orrs	r3, r2
 800cc2c:	4a22      	ldr	r2, [pc, #136]	@ (800ccb8 <xTaskIncrementTick+0x160>)
 800cc2e:	6013      	str	r3, [r2, #0]
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc34:	4613      	mov	r3, r2
 800cc36:	009b      	lsls	r3, r3, #2
 800cc38:	4413      	add	r3, r2
 800cc3a:	009b      	lsls	r3, r3, #2
 800cc3c:	4a1f      	ldr	r2, [pc, #124]	@ (800ccbc <xTaskIncrementTick+0x164>)
 800cc3e:	441a      	add	r2, r3
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	3304      	adds	r3, #4
 800cc44:	4619      	mov	r1, r3
 800cc46:	4610      	mov	r0, r2
 800cc48:	f7fe fee2 	bl	800ba10 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc50:	4b1b      	ldr	r3, [pc, #108]	@ (800ccc0 <xTaskIncrementTick+0x168>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d3b9      	bcc.n	800cbce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc5e:	e7b6      	b.n	800cbce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cc60:	4b17      	ldr	r3, [pc, #92]	@ (800ccc0 <xTaskIncrementTick+0x168>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc66:	4915      	ldr	r1, [pc, #84]	@ (800ccbc <xTaskIncrementTick+0x164>)
 800cc68:	4613      	mov	r3, r2
 800cc6a:	009b      	lsls	r3, r3, #2
 800cc6c:	4413      	add	r3, r2
 800cc6e:	009b      	lsls	r3, r3, #2
 800cc70:	440b      	add	r3, r1
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	2b01      	cmp	r3, #1
 800cc76:	d901      	bls.n	800cc7c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cc7c:	4b11      	ldr	r3, [pc, #68]	@ (800ccc4 <xTaskIncrementTick+0x16c>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d007      	beq.n	800cc94 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cc84:	2301      	movs	r3, #1
 800cc86:	617b      	str	r3, [r7, #20]
 800cc88:	e004      	b.n	800cc94 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cc8a:	4b0f      	ldr	r3, [pc, #60]	@ (800ccc8 <xTaskIncrementTick+0x170>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	3301      	adds	r3, #1
 800cc90:	4a0d      	ldr	r2, [pc, #52]	@ (800ccc8 <xTaskIncrementTick+0x170>)
 800cc92:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cc94:	697b      	ldr	r3, [r7, #20]
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3718      	adds	r7, #24
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	24001610 	.word	0x24001610
 800cca4:	240015ec 	.word	0x240015ec
 800cca8:	240015a0 	.word	0x240015a0
 800ccac:	240015a4 	.word	0x240015a4
 800ccb0:	24001600 	.word	0x24001600
 800ccb4:	24001608 	.word	0x24001608
 800ccb8:	240015f0 	.word	0x240015f0
 800ccbc:	240014ec 	.word	0x240014ec
 800ccc0:	240014e8 	.word	0x240014e8
 800ccc4:	240015fc 	.word	0x240015fc
 800ccc8:	240015f8 	.word	0x240015f8

0800cccc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b086      	sub	sp, #24
 800ccd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ccd2:	4b3e      	ldr	r3, [pc, #248]	@ (800cdcc <vTaskSwitchContext+0x100>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d003      	beq.n	800cce2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ccda:	4b3d      	ldr	r3, [pc, #244]	@ (800cdd0 <vTaskSwitchContext+0x104>)
 800ccdc:	2201      	movs	r2, #1
 800ccde:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cce0:	e06f      	b.n	800cdc2 <vTaskSwitchContext+0xf6>
		xYieldPending = pdFALSE;
 800cce2:	4b3b      	ldr	r3, [pc, #236]	@ (800cdd0 <vTaskSwitchContext+0x104>)
 800cce4:	2200      	movs	r2, #0
 800cce6:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800cce8:	f7f3 ff93 	bl	8000c12 <getRunTimeCounterValue>
 800ccec:	4603      	mov	r3, r0
 800ccee:	4a39      	ldr	r2, [pc, #228]	@ (800cdd4 <vTaskSwitchContext+0x108>)
 800ccf0:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800ccf2:	4b38      	ldr	r3, [pc, #224]	@ (800cdd4 <vTaskSwitchContext+0x108>)
 800ccf4:	681a      	ldr	r2, [r3, #0]
 800ccf6:	4b38      	ldr	r3, [pc, #224]	@ (800cdd8 <vTaskSwitchContext+0x10c>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	429a      	cmp	r2, r3
 800ccfc:	d909      	bls.n	800cd12 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800ccfe:	4b37      	ldr	r3, [pc, #220]	@ (800cddc <vTaskSwitchContext+0x110>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cd04:	4a33      	ldr	r2, [pc, #204]	@ (800cdd4 <vTaskSwitchContext+0x108>)
 800cd06:	6810      	ldr	r0, [r2, #0]
 800cd08:	4a33      	ldr	r2, [pc, #204]	@ (800cdd8 <vTaskSwitchContext+0x10c>)
 800cd0a:	6812      	ldr	r2, [r2, #0]
 800cd0c:	1a82      	subs	r2, r0, r2
 800cd0e:	440a      	add	r2, r1
 800cd10:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800cd12:	4b30      	ldr	r3, [pc, #192]	@ (800cdd4 <vTaskSwitchContext+0x108>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	4a30      	ldr	r2, [pc, #192]	@ (800cdd8 <vTaskSwitchContext+0x10c>)
 800cd18:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800cd1a:	4b30      	ldr	r3, [pc, #192]	@ (800cddc <vTaskSwitchContext+0x110>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	681a      	ldr	r2, [r3, #0]
 800cd20:	4b2e      	ldr	r3, [pc, #184]	@ (800cddc <vTaskSwitchContext+0x110>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d808      	bhi.n	800cd3c <vTaskSwitchContext+0x70>
 800cd2a:	4b2c      	ldr	r3, [pc, #176]	@ (800cddc <vTaskSwitchContext+0x110>)
 800cd2c:	681a      	ldr	r2, [r3, #0]
 800cd2e:	4b2b      	ldr	r3, [pc, #172]	@ (800cddc <vTaskSwitchContext+0x110>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	3334      	adds	r3, #52	@ 0x34
 800cd34:	4619      	mov	r1, r3
 800cd36:	4610      	mov	r0, r2
 800cd38:	f7f3 ff73 	bl	8000c22 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd3c:	4b28      	ldr	r3, [pc, #160]	@ (800cde0 <vTaskSwitchContext+0x114>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	fab3 f383 	clz	r3, r3
 800cd48:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cd4a:	7afb      	ldrb	r3, [r7, #11]
 800cd4c:	f1c3 031f 	rsb	r3, r3, #31
 800cd50:	617b      	str	r3, [r7, #20]
 800cd52:	4924      	ldr	r1, [pc, #144]	@ (800cde4 <vTaskSwitchContext+0x118>)
 800cd54:	697a      	ldr	r2, [r7, #20]
 800cd56:	4613      	mov	r3, r2
 800cd58:	009b      	lsls	r3, r3, #2
 800cd5a:	4413      	add	r3, r2
 800cd5c:	009b      	lsls	r3, r3, #2
 800cd5e:	440b      	add	r3, r1
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d10b      	bne.n	800cd7e <vTaskSwitchContext+0xb2>
	__asm volatile
 800cd66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd6a:	f383 8811 	msr	BASEPRI, r3
 800cd6e:	f3bf 8f6f 	isb	sy
 800cd72:	f3bf 8f4f 	dsb	sy
 800cd76:	607b      	str	r3, [r7, #4]
}
 800cd78:	bf00      	nop
 800cd7a:	bf00      	nop
 800cd7c:	e7fd      	b.n	800cd7a <vTaskSwitchContext+0xae>
 800cd7e:	697a      	ldr	r2, [r7, #20]
 800cd80:	4613      	mov	r3, r2
 800cd82:	009b      	lsls	r3, r3, #2
 800cd84:	4413      	add	r3, r2
 800cd86:	009b      	lsls	r3, r3, #2
 800cd88:	4a16      	ldr	r2, [pc, #88]	@ (800cde4 <vTaskSwitchContext+0x118>)
 800cd8a:	4413      	add	r3, r2
 800cd8c:	613b      	str	r3, [r7, #16]
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	685b      	ldr	r3, [r3, #4]
 800cd92:	685a      	ldr	r2, [r3, #4]
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	605a      	str	r2, [r3, #4]
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	685a      	ldr	r2, [r3, #4]
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	3308      	adds	r3, #8
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d104      	bne.n	800cdae <vTaskSwitchContext+0xe2>
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	685b      	ldr	r3, [r3, #4]
 800cda8:	685a      	ldr	r2, [r3, #4]
 800cdaa:	693b      	ldr	r3, [r7, #16]
 800cdac:	605a      	str	r2, [r3, #4]
 800cdae:	693b      	ldr	r3, [r7, #16]
 800cdb0:	685b      	ldr	r3, [r3, #4]
 800cdb2:	68db      	ldr	r3, [r3, #12]
 800cdb4:	4a09      	ldr	r2, [pc, #36]	@ (800cddc <vTaskSwitchContext+0x110>)
 800cdb6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cdb8:	4b08      	ldr	r3, [pc, #32]	@ (800cddc <vTaskSwitchContext+0x110>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	3358      	adds	r3, #88	@ 0x58
 800cdbe:	4a0a      	ldr	r2, [pc, #40]	@ (800cde8 <vTaskSwitchContext+0x11c>)
 800cdc0:	6013      	str	r3, [r2, #0]
}
 800cdc2:	bf00      	nop
 800cdc4:	3718      	adds	r7, #24
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	24001610 	.word	0x24001610
 800cdd0:	240015fc 	.word	0x240015fc
 800cdd4:	24001618 	.word	0x24001618
 800cdd8:	24001614 	.word	0x24001614
 800cddc:	240014e8 	.word	0x240014e8
 800cde0:	240015f0 	.word	0x240015f0
 800cde4:	240014ec 	.word	0x240014ec
 800cde8:	24000014 	.word	0x24000014

0800cdec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b084      	sub	sp, #16
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d10b      	bne.n	800ce14 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800cdfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce00:	f383 8811 	msr	BASEPRI, r3
 800ce04:	f3bf 8f6f 	isb	sy
 800ce08:	f3bf 8f4f 	dsb	sy
 800ce0c:	60fb      	str	r3, [r7, #12]
}
 800ce0e:	bf00      	nop
 800ce10:	bf00      	nop
 800ce12:	e7fd      	b.n	800ce10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce14:	4b07      	ldr	r3, [pc, #28]	@ (800ce34 <vTaskPlaceOnEventList+0x48>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	3318      	adds	r3, #24
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f7fe fe1b 	bl	800ba58 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ce22:	2101      	movs	r1, #1
 800ce24:	6838      	ldr	r0, [r7, #0]
 800ce26:	f000 fa9f 	bl	800d368 <prvAddCurrentTaskToDelayedList>
}
 800ce2a:	bf00      	nop
 800ce2c:	3710      	adds	r7, #16
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
 800ce32:	bf00      	nop
 800ce34:	240014e8 	.word	0x240014e8

0800ce38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b086      	sub	sp, #24
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d10b      	bne.n	800ce62 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ce4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce4e:	f383 8811 	msr	BASEPRI, r3
 800ce52:	f3bf 8f6f 	isb	sy
 800ce56:	f3bf 8f4f 	dsb	sy
 800ce5a:	617b      	str	r3, [r7, #20]
}
 800ce5c:	bf00      	nop
 800ce5e:	bf00      	nop
 800ce60:	e7fd      	b.n	800ce5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce62:	4b0a      	ldr	r3, [pc, #40]	@ (800ce8c <vTaskPlaceOnEventListRestricted+0x54>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	3318      	adds	r3, #24
 800ce68:	4619      	mov	r1, r3
 800ce6a:	68f8      	ldr	r0, [r7, #12]
 800ce6c:	f7fe fdd0 	bl	800ba10 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d002      	beq.n	800ce7c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ce76:	f04f 33ff 	mov.w	r3, #4294967295
 800ce7a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ce7c:	6879      	ldr	r1, [r7, #4]
 800ce7e:	68b8      	ldr	r0, [r7, #8]
 800ce80:	f000 fa72 	bl	800d368 <prvAddCurrentTaskToDelayedList>
	}
 800ce84:	bf00      	nop
 800ce86:	3718      	adds	r7, #24
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}
 800ce8c:	240014e8 	.word	0x240014e8

0800ce90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b086      	sub	sp, #24
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	68db      	ldr	r3, [r3, #12]
 800ce9c:	68db      	ldr	r3, [r3, #12]
 800ce9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d10b      	bne.n	800cebe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800cea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceaa:	f383 8811 	msr	BASEPRI, r3
 800ceae:	f3bf 8f6f 	isb	sy
 800ceb2:	f3bf 8f4f 	dsb	sy
 800ceb6:	60fb      	str	r3, [r7, #12]
}
 800ceb8:	bf00      	nop
 800ceba:	bf00      	nop
 800cebc:	e7fd      	b.n	800ceba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	3318      	adds	r3, #24
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7fe fe01 	bl	800baca <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cec8:	4b1d      	ldr	r3, [pc, #116]	@ (800cf40 <xTaskRemoveFromEventList+0xb0>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d11c      	bne.n	800cf0a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ced0:	693b      	ldr	r3, [r7, #16]
 800ced2:	3304      	adds	r3, #4
 800ced4:	4618      	mov	r0, r3
 800ced6:	f7fe fdf8 	bl	800baca <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cede:	2201      	movs	r2, #1
 800cee0:	409a      	lsls	r2, r3
 800cee2:	4b18      	ldr	r3, [pc, #96]	@ (800cf44 <xTaskRemoveFromEventList+0xb4>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	4313      	orrs	r3, r2
 800cee8:	4a16      	ldr	r2, [pc, #88]	@ (800cf44 <xTaskRemoveFromEventList+0xb4>)
 800ceea:	6013      	str	r3, [r2, #0]
 800ceec:	693b      	ldr	r3, [r7, #16]
 800ceee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cef0:	4613      	mov	r3, r2
 800cef2:	009b      	lsls	r3, r3, #2
 800cef4:	4413      	add	r3, r2
 800cef6:	009b      	lsls	r3, r3, #2
 800cef8:	4a13      	ldr	r2, [pc, #76]	@ (800cf48 <xTaskRemoveFromEventList+0xb8>)
 800cefa:	441a      	add	r2, r3
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	3304      	adds	r3, #4
 800cf00:	4619      	mov	r1, r3
 800cf02:	4610      	mov	r0, r2
 800cf04:	f7fe fd84 	bl	800ba10 <vListInsertEnd>
 800cf08:	e005      	b.n	800cf16 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	3318      	adds	r3, #24
 800cf0e:	4619      	mov	r1, r3
 800cf10:	480e      	ldr	r0, [pc, #56]	@ (800cf4c <xTaskRemoveFromEventList+0xbc>)
 800cf12:	f7fe fd7d 	bl	800ba10 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf1a:	4b0d      	ldr	r3, [pc, #52]	@ (800cf50 <xTaskRemoveFromEventList+0xc0>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf20:	429a      	cmp	r2, r3
 800cf22:	d905      	bls.n	800cf30 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cf24:	2301      	movs	r3, #1
 800cf26:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cf28:	4b0a      	ldr	r3, [pc, #40]	@ (800cf54 <xTaskRemoveFromEventList+0xc4>)
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	601a      	str	r2, [r3, #0]
 800cf2e:	e001      	b.n	800cf34 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cf30:	2300      	movs	r3, #0
 800cf32:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cf34:	697b      	ldr	r3, [r7, #20]
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3718      	adds	r7, #24
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}
 800cf3e:	bf00      	nop
 800cf40:	24001610 	.word	0x24001610
 800cf44:	240015f0 	.word	0x240015f0
 800cf48:	240014ec 	.word	0x240014ec
 800cf4c:	240015a8 	.word	0x240015a8
 800cf50:	240014e8 	.word	0x240014e8
 800cf54:	240015fc 	.word	0x240015fc

0800cf58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b083      	sub	sp, #12
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cf60:	4b06      	ldr	r3, [pc, #24]	@ (800cf7c <vTaskInternalSetTimeOutState+0x24>)
 800cf62:	681a      	ldr	r2, [r3, #0]
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cf68:	4b05      	ldr	r3, [pc, #20]	@ (800cf80 <vTaskInternalSetTimeOutState+0x28>)
 800cf6a:	681a      	ldr	r2, [r3, #0]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	605a      	str	r2, [r3, #4]
}
 800cf70:	bf00      	nop
 800cf72:	370c      	adds	r7, #12
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr
 800cf7c:	24001600 	.word	0x24001600
 800cf80:	240015ec 	.word	0x240015ec

0800cf84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b088      	sub	sp, #32
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
 800cf8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d10b      	bne.n	800cfac <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800cf94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf98:	f383 8811 	msr	BASEPRI, r3
 800cf9c:	f3bf 8f6f 	isb	sy
 800cfa0:	f3bf 8f4f 	dsb	sy
 800cfa4:	613b      	str	r3, [r7, #16]
}
 800cfa6:	bf00      	nop
 800cfa8:	bf00      	nop
 800cfaa:	e7fd      	b.n	800cfa8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d10b      	bne.n	800cfca <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800cfb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfb6:	f383 8811 	msr	BASEPRI, r3
 800cfba:	f3bf 8f6f 	isb	sy
 800cfbe:	f3bf 8f4f 	dsb	sy
 800cfc2:	60fb      	str	r3, [r7, #12]
}
 800cfc4:	bf00      	nop
 800cfc6:	bf00      	nop
 800cfc8:	e7fd      	b.n	800cfc6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800cfca:	f000 fea5 	bl	800dd18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cfce:	4b1d      	ldr	r3, [pc, #116]	@ (800d044 <xTaskCheckForTimeOut+0xc0>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	685b      	ldr	r3, [r3, #4]
 800cfd8:	69ba      	ldr	r2, [r7, #24]
 800cfda:	1ad3      	subs	r3, r2, r3
 800cfdc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfe6:	d102      	bne.n	800cfee <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	61fb      	str	r3, [r7, #28]
 800cfec:	e023      	b.n	800d036 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681a      	ldr	r2, [r3, #0]
 800cff2:	4b15      	ldr	r3, [pc, #84]	@ (800d048 <xTaskCheckForTimeOut+0xc4>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d007      	beq.n	800d00a <xTaskCheckForTimeOut+0x86>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	685b      	ldr	r3, [r3, #4]
 800cffe:	69ba      	ldr	r2, [r7, #24]
 800d000:	429a      	cmp	r2, r3
 800d002:	d302      	bcc.n	800d00a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d004:	2301      	movs	r3, #1
 800d006:	61fb      	str	r3, [r7, #28]
 800d008:	e015      	b.n	800d036 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	697a      	ldr	r2, [r7, #20]
 800d010:	429a      	cmp	r2, r3
 800d012:	d20b      	bcs.n	800d02c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	681a      	ldr	r2, [r3, #0]
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	1ad2      	subs	r2, r2, r3
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f7ff ff99 	bl	800cf58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d026:	2300      	movs	r3, #0
 800d028:	61fb      	str	r3, [r7, #28]
 800d02a:	e004      	b.n	800d036 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	2200      	movs	r2, #0
 800d030:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d032:	2301      	movs	r3, #1
 800d034:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d036:	f000 fea1 	bl	800dd7c <vPortExitCritical>

	return xReturn;
 800d03a:	69fb      	ldr	r3, [r7, #28]
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3720      	adds	r7, #32
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}
 800d044:	240015ec 	.word	0x240015ec
 800d048:	24001600 	.word	0x24001600

0800d04c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d04c:	b480      	push	{r7}
 800d04e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d050:	4b03      	ldr	r3, [pc, #12]	@ (800d060 <vTaskMissedYield+0x14>)
 800d052:	2201      	movs	r2, #1
 800d054:	601a      	str	r2, [r3, #0]
}
 800d056:	bf00      	nop
 800d058:	46bd      	mov	sp, r7
 800d05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05e:	4770      	bx	lr
 800d060:	240015fc 	.word	0x240015fc

0800d064 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d06c:	f000 f852 	bl	800d114 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d070:	4b06      	ldr	r3, [pc, #24]	@ (800d08c <prvIdleTask+0x28>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	2b01      	cmp	r3, #1
 800d076:	d9f9      	bls.n	800d06c <prvIdleTask+0x8>
			{
				taskYIELD();
 800d078:	4b05      	ldr	r3, [pc, #20]	@ (800d090 <prvIdleTask+0x2c>)
 800d07a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d07e:	601a      	str	r2, [r3, #0]
 800d080:	f3bf 8f4f 	dsb	sy
 800d084:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d088:	e7f0      	b.n	800d06c <prvIdleTask+0x8>
 800d08a:	bf00      	nop
 800d08c:	240014ec 	.word	0x240014ec
 800d090:	e000ed04 	.word	0xe000ed04

0800d094 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b082      	sub	sp, #8
 800d098:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d09a:	2300      	movs	r3, #0
 800d09c:	607b      	str	r3, [r7, #4]
 800d09e:	e00c      	b.n	800d0ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d0a0:	687a      	ldr	r2, [r7, #4]
 800d0a2:	4613      	mov	r3, r2
 800d0a4:	009b      	lsls	r3, r3, #2
 800d0a6:	4413      	add	r3, r2
 800d0a8:	009b      	lsls	r3, r3, #2
 800d0aa:	4a12      	ldr	r2, [pc, #72]	@ (800d0f4 <prvInitialiseTaskLists+0x60>)
 800d0ac:	4413      	add	r3, r2
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f7fe fc81 	bl	800b9b6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	3301      	adds	r3, #1
 800d0b8:	607b      	str	r3, [r7, #4]
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2b06      	cmp	r3, #6
 800d0be:	d9ef      	bls.n	800d0a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d0c0:	480d      	ldr	r0, [pc, #52]	@ (800d0f8 <prvInitialiseTaskLists+0x64>)
 800d0c2:	f7fe fc78 	bl	800b9b6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d0c6:	480d      	ldr	r0, [pc, #52]	@ (800d0fc <prvInitialiseTaskLists+0x68>)
 800d0c8:	f7fe fc75 	bl	800b9b6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d0cc:	480c      	ldr	r0, [pc, #48]	@ (800d100 <prvInitialiseTaskLists+0x6c>)
 800d0ce:	f7fe fc72 	bl	800b9b6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d0d2:	480c      	ldr	r0, [pc, #48]	@ (800d104 <prvInitialiseTaskLists+0x70>)
 800d0d4:	f7fe fc6f 	bl	800b9b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d0d8:	480b      	ldr	r0, [pc, #44]	@ (800d108 <prvInitialiseTaskLists+0x74>)
 800d0da:	f7fe fc6c 	bl	800b9b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d0de:	4b0b      	ldr	r3, [pc, #44]	@ (800d10c <prvInitialiseTaskLists+0x78>)
 800d0e0:	4a05      	ldr	r2, [pc, #20]	@ (800d0f8 <prvInitialiseTaskLists+0x64>)
 800d0e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d0e4:	4b0a      	ldr	r3, [pc, #40]	@ (800d110 <prvInitialiseTaskLists+0x7c>)
 800d0e6:	4a05      	ldr	r2, [pc, #20]	@ (800d0fc <prvInitialiseTaskLists+0x68>)
 800d0e8:	601a      	str	r2, [r3, #0]
}
 800d0ea:	bf00      	nop
 800d0ec:	3708      	adds	r7, #8
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	240014ec 	.word	0x240014ec
 800d0f8:	24001578 	.word	0x24001578
 800d0fc:	2400158c 	.word	0x2400158c
 800d100:	240015a8 	.word	0x240015a8
 800d104:	240015bc 	.word	0x240015bc
 800d108:	240015d4 	.word	0x240015d4
 800d10c:	240015a0 	.word	0x240015a0
 800d110:	240015a4 	.word	0x240015a4

0800d114 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b082      	sub	sp, #8
 800d118:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d11a:	e019      	b.n	800d150 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d11c:	f000 fdfc 	bl	800dd18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d120:	4b10      	ldr	r3, [pc, #64]	@ (800d164 <prvCheckTasksWaitingTermination+0x50>)
 800d122:	68db      	ldr	r3, [r3, #12]
 800d124:	68db      	ldr	r3, [r3, #12]
 800d126:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	3304      	adds	r3, #4
 800d12c:	4618      	mov	r0, r3
 800d12e:	f7fe fccc 	bl	800baca <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d132:	4b0d      	ldr	r3, [pc, #52]	@ (800d168 <prvCheckTasksWaitingTermination+0x54>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	3b01      	subs	r3, #1
 800d138:	4a0b      	ldr	r2, [pc, #44]	@ (800d168 <prvCheckTasksWaitingTermination+0x54>)
 800d13a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d13c:	4b0b      	ldr	r3, [pc, #44]	@ (800d16c <prvCheckTasksWaitingTermination+0x58>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	3b01      	subs	r3, #1
 800d142:	4a0a      	ldr	r2, [pc, #40]	@ (800d16c <prvCheckTasksWaitingTermination+0x58>)
 800d144:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d146:	f000 fe19 	bl	800dd7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f000 f810 	bl	800d170 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d150:	4b06      	ldr	r3, [pc, #24]	@ (800d16c <prvCheckTasksWaitingTermination+0x58>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d1e1      	bne.n	800d11c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d158:	bf00      	nop
 800d15a:	bf00      	nop
 800d15c:	3708      	adds	r7, #8
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}
 800d162:	bf00      	nop
 800d164:	240015bc 	.word	0x240015bc
 800d168:	240015e8 	.word	0x240015e8
 800d16c:	240015d0 	.word	0x240015d0

0800d170 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d170:	b580      	push	{r7, lr}
 800d172:	b084      	sub	sp, #16
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	3358      	adds	r3, #88	@ 0x58
 800d17c:	4618      	mov	r0, r3
 800d17e:	f001 f8e3 	bl	800e348 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d108      	bne.n	800d19e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d190:	4618      	mov	r0, r3
 800d192:	f000 ffb1 	bl	800e0f8 <vPortFree>
				vPortFree( pxTCB );
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f000 ffae 	bl	800e0f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d19c:	e019      	b.n	800d1d2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800d1a4:	2b01      	cmp	r3, #1
 800d1a6:	d103      	bne.n	800d1b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f000 ffa5 	bl	800e0f8 <vPortFree>
	}
 800d1ae:	e010      	b.n	800d1d2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800d1b6:	2b02      	cmp	r3, #2
 800d1b8:	d00b      	beq.n	800d1d2 <prvDeleteTCB+0x62>
	__asm volatile
 800d1ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1be:	f383 8811 	msr	BASEPRI, r3
 800d1c2:	f3bf 8f6f 	isb	sy
 800d1c6:	f3bf 8f4f 	dsb	sy
 800d1ca:	60fb      	str	r3, [r7, #12]
}
 800d1cc:	bf00      	nop
 800d1ce:	bf00      	nop
 800d1d0:	e7fd      	b.n	800d1ce <prvDeleteTCB+0x5e>
	}
 800d1d2:	bf00      	nop
 800d1d4:	3710      	adds	r7, #16
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}
	...

0800d1dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b083      	sub	sp, #12
 800d1e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1e2:	4b0c      	ldr	r3, [pc, #48]	@ (800d214 <prvResetNextTaskUnblockTime+0x38>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d104      	bne.n	800d1f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d1ec:	4b0a      	ldr	r3, [pc, #40]	@ (800d218 <prvResetNextTaskUnblockTime+0x3c>)
 800d1ee:	f04f 32ff 	mov.w	r2, #4294967295
 800d1f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d1f4:	e008      	b.n	800d208 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1f6:	4b07      	ldr	r3, [pc, #28]	@ (800d214 <prvResetNextTaskUnblockTime+0x38>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	68db      	ldr	r3, [r3, #12]
 800d1fc:	68db      	ldr	r3, [r3, #12]
 800d1fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	685b      	ldr	r3, [r3, #4]
 800d204:	4a04      	ldr	r2, [pc, #16]	@ (800d218 <prvResetNextTaskUnblockTime+0x3c>)
 800d206:	6013      	str	r3, [r2, #0]
}
 800d208:	bf00      	nop
 800d20a:	370c      	adds	r7, #12
 800d20c:	46bd      	mov	sp, r7
 800d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d212:	4770      	bx	lr
 800d214:	240015a0 	.word	0x240015a0
 800d218:	24001608 	.word	0x24001608

0800d21c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d21c:	b480      	push	{r7}
 800d21e:	b083      	sub	sp, #12
 800d220:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d222:	4b0b      	ldr	r3, [pc, #44]	@ (800d250 <xTaskGetSchedulerState+0x34>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d102      	bne.n	800d230 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d22a:	2301      	movs	r3, #1
 800d22c:	607b      	str	r3, [r7, #4]
 800d22e:	e008      	b.n	800d242 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d230:	4b08      	ldr	r3, [pc, #32]	@ (800d254 <xTaskGetSchedulerState+0x38>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d102      	bne.n	800d23e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d238:	2302      	movs	r3, #2
 800d23a:	607b      	str	r3, [r7, #4]
 800d23c:	e001      	b.n	800d242 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d23e:	2300      	movs	r3, #0
 800d240:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d242:	687b      	ldr	r3, [r7, #4]
	}
 800d244:	4618      	mov	r0, r3
 800d246:	370c      	adds	r7, #12
 800d248:	46bd      	mov	sp, r7
 800d24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24e:	4770      	bx	lr
 800d250:	240015f4 	.word	0x240015f4
 800d254:	24001610 	.word	0x24001610

0800d258 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b086      	sub	sp, #24
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d264:	2300      	movs	r3, #0
 800d266:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d070      	beq.n	800d350 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d26e:	4b3b      	ldr	r3, [pc, #236]	@ (800d35c <xTaskPriorityDisinherit+0x104>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	693a      	ldr	r2, [r7, #16]
 800d274:	429a      	cmp	r2, r3
 800d276:	d00b      	beq.n	800d290 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d27c:	f383 8811 	msr	BASEPRI, r3
 800d280:	f3bf 8f6f 	isb	sy
 800d284:	f3bf 8f4f 	dsb	sy
 800d288:	60fb      	str	r3, [r7, #12]
}
 800d28a:	bf00      	nop
 800d28c:	bf00      	nop
 800d28e:	e7fd      	b.n	800d28c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d294:	2b00      	cmp	r3, #0
 800d296:	d10b      	bne.n	800d2b0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d29c:	f383 8811 	msr	BASEPRI, r3
 800d2a0:	f3bf 8f6f 	isb	sy
 800d2a4:	f3bf 8f4f 	dsb	sy
 800d2a8:	60bb      	str	r3, [r7, #8]
}
 800d2aa:	bf00      	nop
 800d2ac:	bf00      	nop
 800d2ae:	e7fd      	b.n	800d2ac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d2b4:	1e5a      	subs	r2, r3, #1
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d2ba:	693b      	ldr	r3, [r7, #16]
 800d2bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d044      	beq.n	800d350 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d140      	bne.n	800d350 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	3304      	adds	r3, #4
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7fe fbf9 	bl	800baca <uxListRemove>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d115      	bne.n	800d30a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2e2:	491f      	ldr	r1, [pc, #124]	@ (800d360 <xTaskPriorityDisinherit+0x108>)
 800d2e4:	4613      	mov	r3, r2
 800d2e6:	009b      	lsls	r3, r3, #2
 800d2e8:	4413      	add	r3, r2
 800d2ea:	009b      	lsls	r3, r3, #2
 800d2ec:	440b      	add	r3, r1
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d10a      	bne.n	800d30a <xTaskPriorityDisinherit+0xb2>
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	fa02 f303 	lsl.w	r3, r2, r3
 800d2fe:	43da      	mvns	r2, r3
 800d300:	4b18      	ldr	r3, [pc, #96]	@ (800d364 <xTaskPriorityDisinherit+0x10c>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	4013      	ands	r3, r2
 800d306:	4a17      	ldr	r2, [pc, #92]	@ (800d364 <xTaskPriorityDisinherit+0x10c>)
 800d308:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d316:	f1c3 0207 	rsb	r2, r3, #7
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d322:	2201      	movs	r2, #1
 800d324:	409a      	lsls	r2, r3
 800d326:	4b0f      	ldr	r3, [pc, #60]	@ (800d364 <xTaskPriorityDisinherit+0x10c>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	4313      	orrs	r3, r2
 800d32c:	4a0d      	ldr	r2, [pc, #52]	@ (800d364 <xTaskPriorityDisinherit+0x10c>)
 800d32e:	6013      	str	r3, [r2, #0]
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d334:	4613      	mov	r3, r2
 800d336:	009b      	lsls	r3, r3, #2
 800d338:	4413      	add	r3, r2
 800d33a:	009b      	lsls	r3, r3, #2
 800d33c:	4a08      	ldr	r2, [pc, #32]	@ (800d360 <xTaskPriorityDisinherit+0x108>)
 800d33e:	441a      	add	r2, r3
 800d340:	693b      	ldr	r3, [r7, #16]
 800d342:	3304      	adds	r3, #4
 800d344:	4619      	mov	r1, r3
 800d346:	4610      	mov	r0, r2
 800d348:	f7fe fb62 	bl	800ba10 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d34c:	2301      	movs	r3, #1
 800d34e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d350:	697b      	ldr	r3, [r7, #20]
	}
 800d352:	4618      	mov	r0, r3
 800d354:	3718      	adds	r7, #24
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}
 800d35a:	bf00      	nop
 800d35c:	240014e8 	.word	0x240014e8
 800d360:	240014ec 	.word	0x240014ec
 800d364:	240015f0 	.word	0x240015f0

0800d368 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b084      	sub	sp, #16
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d372:	4b29      	ldr	r3, [pc, #164]	@ (800d418 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d378:	4b28      	ldr	r3, [pc, #160]	@ (800d41c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	3304      	adds	r3, #4
 800d37e:	4618      	mov	r0, r3
 800d380:	f7fe fba3 	bl	800baca <uxListRemove>
 800d384:	4603      	mov	r3, r0
 800d386:	2b00      	cmp	r3, #0
 800d388:	d10b      	bne.n	800d3a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d38a:	4b24      	ldr	r3, [pc, #144]	@ (800d41c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d390:	2201      	movs	r2, #1
 800d392:	fa02 f303 	lsl.w	r3, r2, r3
 800d396:	43da      	mvns	r2, r3
 800d398:	4b21      	ldr	r3, [pc, #132]	@ (800d420 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	4013      	ands	r3, r2
 800d39e:	4a20      	ldr	r2, [pc, #128]	@ (800d420 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d3a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3a8:	d10a      	bne.n	800d3c0 <prvAddCurrentTaskToDelayedList+0x58>
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d007      	beq.n	800d3c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3b0:	4b1a      	ldr	r3, [pc, #104]	@ (800d41c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	3304      	adds	r3, #4
 800d3b6:	4619      	mov	r1, r3
 800d3b8:	481a      	ldr	r0, [pc, #104]	@ (800d424 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d3ba:	f7fe fb29 	bl	800ba10 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d3be:	e026      	b.n	800d40e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d3c0:	68fa      	ldr	r2, [r7, #12]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	4413      	add	r3, r2
 800d3c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d3c8:	4b14      	ldr	r3, [pc, #80]	@ (800d41c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	68ba      	ldr	r2, [r7, #8]
 800d3ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d3d0:	68ba      	ldr	r2, [r7, #8]
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d209      	bcs.n	800d3ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3d8:	4b13      	ldr	r3, [pc, #76]	@ (800d428 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d3da:	681a      	ldr	r2, [r3, #0]
 800d3dc:	4b0f      	ldr	r3, [pc, #60]	@ (800d41c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	3304      	adds	r3, #4
 800d3e2:	4619      	mov	r1, r3
 800d3e4:	4610      	mov	r0, r2
 800d3e6:	f7fe fb37 	bl	800ba58 <vListInsert>
}
 800d3ea:	e010      	b.n	800d40e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3ec:	4b0f      	ldr	r3, [pc, #60]	@ (800d42c <prvAddCurrentTaskToDelayedList+0xc4>)
 800d3ee:	681a      	ldr	r2, [r3, #0]
 800d3f0:	4b0a      	ldr	r3, [pc, #40]	@ (800d41c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	3304      	adds	r3, #4
 800d3f6:	4619      	mov	r1, r3
 800d3f8:	4610      	mov	r0, r2
 800d3fa:	f7fe fb2d 	bl	800ba58 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d3fe:	4b0c      	ldr	r3, [pc, #48]	@ (800d430 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	68ba      	ldr	r2, [r7, #8]
 800d404:	429a      	cmp	r2, r3
 800d406:	d202      	bcs.n	800d40e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d408:	4a09      	ldr	r2, [pc, #36]	@ (800d430 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	6013      	str	r3, [r2, #0]
}
 800d40e:	bf00      	nop
 800d410:	3710      	adds	r7, #16
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
 800d416:	bf00      	nop
 800d418:	240015ec 	.word	0x240015ec
 800d41c:	240014e8 	.word	0x240014e8
 800d420:	240015f0 	.word	0x240015f0
 800d424:	240015d4 	.word	0x240015d4
 800d428:	240015a4 	.word	0x240015a4
 800d42c:	240015a0 	.word	0x240015a0
 800d430:	24001608 	.word	0x24001608

0800d434 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b08a      	sub	sp, #40	@ 0x28
 800d438:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d43a:	2300      	movs	r3, #0
 800d43c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d43e:	f000 faf7 	bl	800da30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d442:	4b1d      	ldr	r3, [pc, #116]	@ (800d4b8 <xTimerCreateTimerTask+0x84>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d021      	beq.n	800d48e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d44a:	2300      	movs	r3, #0
 800d44c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d44e:	2300      	movs	r3, #0
 800d450:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d452:	1d3a      	adds	r2, r7, #4
 800d454:	f107 0108 	add.w	r1, r7, #8
 800d458:	f107 030c 	add.w	r3, r7, #12
 800d45c:	4618      	mov	r0, r3
 800d45e:	f7f3 fc05 	bl	8000c6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d462:	6879      	ldr	r1, [r7, #4]
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	68fa      	ldr	r2, [r7, #12]
 800d468:	9202      	str	r2, [sp, #8]
 800d46a:	9301      	str	r3, [sp, #4]
 800d46c:	2302      	movs	r3, #2
 800d46e:	9300      	str	r3, [sp, #0]
 800d470:	2300      	movs	r3, #0
 800d472:	460a      	mov	r2, r1
 800d474:	4911      	ldr	r1, [pc, #68]	@ (800d4bc <xTimerCreateTimerTask+0x88>)
 800d476:	4812      	ldr	r0, [pc, #72]	@ (800d4c0 <xTimerCreateTimerTask+0x8c>)
 800d478:	f7ff f84c 	bl	800c514 <xTaskCreateStatic>
 800d47c:	4603      	mov	r3, r0
 800d47e:	4a11      	ldr	r2, [pc, #68]	@ (800d4c4 <xTimerCreateTimerTask+0x90>)
 800d480:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d482:	4b10      	ldr	r3, [pc, #64]	@ (800d4c4 <xTimerCreateTimerTask+0x90>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d001      	beq.n	800d48e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d48a:	2301      	movs	r3, #1
 800d48c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d10b      	bne.n	800d4ac <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d498:	f383 8811 	msr	BASEPRI, r3
 800d49c:	f3bf 8f6f 	isb	sy
 800d4a0:	f3bf 8f4f 	dsb	sy
 800d4a4:	613b      	str	r3, [r7, #16]
}
 800d4a6:	bf00      	nop
 800d4a8:	bf00      	nop
 800d4aa:	e7fd      	b.n	800d4a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d4ac:	697b      	ldr	r3, [r7, #20]
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3718      	adds	r7, #24
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}
 800d4b6:	bf00      	nop
 800d4b8:	2400164c 	.word	0x2400164c
 800d4bc:	0800e5d4 	.word	0x0800e5d4
 800d4c0:	0800d601 	.word	0x0800d601
 800d4c4:	24001650 	.word	0x24001650

0800d4c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b08a      	sub	sp, #40	@ 0x28
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	60f8      	str	r0, [r7, #12]
 800d4d0:	60b9      	str	r1, [r7, #8]
 800d4d2:	607a      	str	r2, [r7, #4]
 800d4d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d10b      	bne.n	800d4f8 <xTimerGenericCommand+0x30>
	__asm volatile
 800d4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4e4:	f383 8811 	msr	BASEPRI, r3
 800d4e8:	f3bf 8f6f 	isb	sy
 800d4ec:	f3bf 8f4f 	dsb	sy
 800d4f0:	623b      	str	r3, [r7, #32]
}
 800d4f2:	bf00      	nop
 800d4f4:	bf00      	nop
 800d4f6:	e7fd      	b.n	800d4f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d4f8:	4b19      	ldr	r3, [pc, #100]	@ (800d560 <xTimerGenericCommand+0x98>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d02a      	beq.n	800d556 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	2b05      	cmp	r3, #5
 800d510:	dc18      	bgt.n	800d544 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d512:	f7ff fe83 	bl	800d21c <xTaskGetSchedulerState>
 800d516:	4603      	mov	r3, r0
 800d518:	2b02      	cmp	r3, #2
 800d51a:	d109      	bne.n	800d530 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d51c:	4b10      	ldr	r3, [pc, #64]	@ (800d560 <xTimerGenericCommand+0x98>)
 800d51e:	6818      	ldr	r0, [r3, #0]
 800d520:	f107 0114 	add.w	r1, r7, #20
 800d524:	2300      	movs	r3, #0
 800d526:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d528:	f7fe fc04 	bl	800bd34 <xQueueGenericSend>
 800d52c:	6278      	str	r0, [r7, #36]	@ 0x24
 800d52e:	e012      	b.n	800d556 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d530:	4b0b      	ldr	r3, [pc, #44]	@ (800d560 <xTimerGenericCommand+0x98>)
 800d532:	6818      	ldr	r0, [r3, #0]
 800d534:	f107 0114 	add.w	r1, r7, #20
 800d538:	2300      	movs	r3, #0
 800d53a:	2200      	movs	r2, #0
 800d53c:	f7fe fbfa 	bl	800bd34 <xQueueGenericSend>
 800d540:	6278      	str	r0, [r7, #36]	@ 0x24
 800d542:	e008      	b.n	800d556 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d544:	4b06      	ldr	r3, [pc, #24]	@ (800d560 <xTimerGenericCommand+0x98>)
 800d546:	6818      	ldr	r0, [r3, #0]
 800d548:	f107 0114 	add.w	r1, r7, #20
 800d54c:	2300      	movs	r3, #0
 800d54e:	683a      	ldr	r2, [r7, #0]
 800d550:	f7fe fcf2 	bl	800bf38 <xQueueGenericSendFromISR>
 800d554:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3728      	adds	r7, #40	@ 0x28
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	2400164c 	.word	0x2400164c

0800d564 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b088      	sub	sp, #32
 800d568:	af02      	add	r7, sp, #8
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d56e:	4b23      	ldr	r3, [pc, #140]	@ (800d5fc <prvProcessExpiredTimer+0x98>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	68db      	ldr	r3, [r3, #12]
 800d574:	68db      	ldr	r3, [r3, #12]
 800d576:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	3304      	adds	r3, #4
 800d57c:	4618      	mov	r0, r3
 800d57e:	f7fe faa4 	bl	800baca <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d588:	f003 0304 	and.w	r3, r3, #4
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d023      	beq.n	800d5d8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	699a      	ldr	r2, [r3, #24]
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	18d1      	adds	r1, r2, r3
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	683a      	ldr	r2, [r7, #0]
 800d59c:	6978      	ldr	r0, [r7, #20]
 800d59e:	f000 f8d5 	bl	800d74c <prvInsertTimerInActiveList>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d020      	beq.n	800d5ea <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	9300      	str	r3, [sp, #0]
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	687a      	ldr	r2, [r7, #4]
 800d5b0:	2100      	movs	r1, #0
 800d5b2:	6978      	ldr	r0, [r7, #20]
 800d5b4:	f7ff ff88 	bl	800d4c8 <xTimerGenericCommand>
 800d5b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d114      	bne.n	800d5ea <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d5c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5c4:	f383 8811 	msr	BASEPRI, r3
 800d5c8:	f3bf 8f6f 	isb	sy
 800d5cc:	f3bf 8f4f 	dsb	sy
 800d5d0:	60fb      	str	r3, [r7, #12]
}
 800d5d2:	bf00      	nop
 800d5d4:	bf00      	nop
 800d5d6:	e7fd      	b.n	800d5d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d5d8:	697b      	ldr	r3, [r7, #20]
 800d5da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d5de:	f023 0301 	bic.w	r3, r3, #1
 800d5e2:	b2da      	uxtb	r2, r3
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	6a1b      	ldr	r3, [r3, #32]
 800d5ee:	6978      	ldr	r0, [r7, #20]
 800d5f0:	4798      	blx	r3
}
 800d5f2:	bf00      	nop
 800d5f4:	3718      	adds	r7, #24
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}
 800d5fa:	bf00      	nop
 800d5fc:	24001644 	.word	0x24001644

0800d600 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b084      	sub	sp, #16
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d608:	f107 0308 	add.w	r3, r7, #8
 800d60c:	4618      	mov	r0, r3
 800d60e:	f000 f859 	bl	800d6c4 <prvGetNextExpireTime>
 800d612:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	4619      	mov	r1, r3
 800d618:	68f8      	ldr	r0, [r7, #12]
 800d61a:	f000 f805 	bl	800d628 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d61e:	f000 f8d7 	bl	800d7d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d622:	bf00      	nop
 800d624:	e7f0      	b.n	800d608 <prvTimerTask+0x8>
	...

0800d628 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b084      	sub	sp, #16
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
 800d630:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d632:	f7ff f9d5 	bl	800c9e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d636:	f107 0308 	add.w	r3, r7, #8
 800d63a:	4618      	mov	r0, r3
 800d63c:	f000 f866 	bl	800d70c <prvSampleTimeNow>
 800d640:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d130      	bne.n	800d6aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d10a      	bne.n	800d664 <prvProcessTimerOrBlockTask+0x3c>
 800d64e:	687a      	ldr	r2, [r7, #4]
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	429a      	cmp	r2, r3
 800d654:	d806      	bhi.n	800d664 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d656:	f7ff f9d1 	bl	800c9fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d65a:	68f9      	ldr	r1, [r7, #12]
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f7ff ff81 	bl	800d564 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d662:	e024      	b.n	800d6ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d008      	beq.n	800d67c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d66a:	4b13      	ldr	r3, [pc, #76]	@ (800d6b8 <prvProcessTimerOrBlockTask+0x90>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d101      	bne.n	800d678 <prvProcessTimerOrBlockTask+0x50>
 800d674:	2301      	movs	r3, #1
 800d676:	e000      	b.n	800d67a <prvProcessTimerOrBlockTask+0x52>
 800d678:	2300      	movs	r3, #0
 800d67a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d67c:	4b0f      	ldr	r3, [pc, #60]	@ (800d6bc <prvProcessTimerOrBlockTask+0x94>)
 800d67e:	6818      	ldr	r0, [r3, #0]
 800d680:	687a      	ldr	r2, [r7, #4]
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	1ad3      	subs	r3, r2, r3
 800d686:	683a      	ldr	r2, [r7, #0]
 800d688:	4619      	mov	r1, r3
 800d68a:	f7fe ff0f 	bl	800c4ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d68e:	f7ff f9b5 	bl	800c9fc <xTaskResumeAll>
 800d692:	4603      	mov	r3, r0
 800d694:	2b00      	cmp	r3, #0
 800d696:	d10a      	bne.n	800d6ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d698:	4b09      	ldr	r3, [pc, #36]	@ (800d6c0 <prvProcessTimerOrBlockTask+0x98>)
 800d69a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d69e:	601a      	str	r2, [r3, #0]
 800d6a0:	f3bf 8f4f 	dsb	sy
 800d6a4:	f3bf 8f6f 	isb	sy
}
 800d6a8:	e001      	b.n	800d6ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d6aa:	f7ff f9a7 	bl	800c9fc <xTaskResumeAll>
}
 800d6ae:	bf00      	nop
 800d6b0:	3710      	adds	r7, #16
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}
 800d6b6:	bf00      	nop
 800d6b8:	24001648 	.word	0x24001648
 800d6bc:	2400164c 	.word	0x2400164c
 800d6c0:	e000ed04 	.word	0xe000ed04

0800d6c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d6c4:	b480      	push	{r7}
 800d6c6:	b085      	sub	sp, #20
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d6cc:	4b0e      	ldr	r3, [pc, #56]	@ (800d708 <prvGetNextExpireTime+0x44>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d101      	bne.n	800d6da <prvGetNextExpireTime+0x16>
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	e000      	b.n	800d6dc <prvGetNextExpireTime+0x18>
 800d6da:	2200      	movs	r2, #0
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d105      	bne.n	800d6f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d6e8:	4b07      	ldr	r3, [pc, #28]	@ (800d708 <prvGetNextExpireTime+0x44>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	68db      	ldr	r3, [r3, #12]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	60fb      	str	r3, [r7, #12]
 800d6f2:	e001      	b.n	800d6f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3714      	adds	r7, #20
 800d6fe:	46bd      	mov	sp, r7
 800d700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d704:	4770      	bx	lr
 800d706:	bf00      	nop
 800d708:	24001644 	.word	0x24001644

0800d70c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b084      	sub	sp, #16
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d714:	f7ff fa10 	bl	800cb38 <xTaskGetTickCount>
 800d718:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d71a:	4b0b      	ldr	r3, [pc, #44]	@ (800d748 <prvSampleTimeNow+0x3c>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	68fa      	ldr	r2, [r7, #12]
 800d720:	429a      	cmp	r2, r3
 800d722:	d205      	bcs.n	800d730 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d724:	f000 f91e 	bl	800d964 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2201      	movs	r2, #1
 800d72c:	601a      	str	r2, [r3, #0]
 800d72e:	e002      	b.n	800d736 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2200      	movs	r2, #0
 800d734:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d736:	4a04      	ldr	r2, [pc, #16]	@ (800d748 <prvSampleTimeNow+0x3c>)
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d73c:	68fb      	ldr	r3, [r7, #12]
}
 800d73e:	4618      	mov	r0, r3
 800d740:	3710      	adds	r7, #16
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}
 800d746:	bf00      	nop
 800d748:	24001654 	.word	0x24001654

0800d74c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b086      	sub	sp, #24
 800d750:	af00      	add	r7, sp, #0
 800d752:	60f8      	str	r0, [r7, #12]
 800d754:	60b9      	str	r1, [r7, #8]
 800d756:	607a      	str	r2, [r7, #4]
 800d758:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d75a:	2300      	movs	r3, #0
 800d75c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	68ba      	ldr	r2, [r7, #8]
 800d762:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	68fa      	ldr	r2, [r7, #12]
 800d768:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d76a:	68ba      	ldr	r2, [r7, #8]
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	429a      	cmp	r2, r3
 800d770:	d812      	bhi.n	800d798 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d772:	687a      	ldr	r2, [r7, #4]
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	1ad2      	subs	r2, r2, r3
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	699b      	ldr	r3, [r3, #24]
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d302      	bcc.n	800d786 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d780:	2301      	movs	r3, #1
 800d782:	617b      	str	r3, [r7, #20]
 800d784:	e01b      	b.n	800d7be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d786:	4b10      	ldr	r3, [pc, #64]	@ (800d7c8 <prvInsertTimerInActiveList+0x7c>)
 800d788:	681a      	ldr	r2, [r3, #0]
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	3304      	adds	r3, #4
 800d78e:	4619      	mov	r1, r3
 800d790:	4610      	mov	r0, r2
 800d792:	f7fe f961 	bl	800ba58 <vListInsert>
 800d796:	e012      	b.n	800d7be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d798:	687a      	ldr	r2, [r7, #4]
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	429a      	cmp	r2, r3
 800d79e:	d206      	bcs.n	800d7ae <prvInsertTimerInActiveList+0x62>
 800d7a0:	68ba      	ldr	r2, [r7, #8]
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d302      	bcc.n	800d7ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	617b      	str	r3, [r7, #20]
 800d7ac:	e007      	b.n	800d7be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d7ae:	4b07      	ldr	r3, [pc, #28]	@ (800d7cc <prvInsertTimerInActiveList+0x80>)
 800d7b0:	681a      	ldr	r2, [r3, #0]
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	3304      	adds	r3, #4
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	4610      	mov	r0, r2
 800d7ba:	f7fe f94d 	bl	800ba58 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d7be:	697b      	ldr	r3, [r7, #20]
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	3718      	adds	r7, #24
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}
 800d7c8:	24001648 	.word	0x24001648
 800d7cc:	24001644 	.word	0x24001644

0800d7d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b08c      	sub	sp, #48	@ 0x30
 800d7d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d7d6:	e0b2      	b.n	800d93e <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	f2c0 80af 	blt.w	800d93e <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d7e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7e6:	695b      	ldr	r3, [r3, #20]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d004      	beq.n	800d7f6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d7ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ee:	3304      	adds	r3, #4
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f7fe f96a 	bl	800baca <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d7f6:	1d3b      	adds	r3, r7, #4
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f7ff ff87 	bl	800d70c <prvSampleTimeNow>
 800d7fe:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	2b09      	cmp	r3, #9
 800d804:	f200 8098 	bhi.w	800d938 <prvProcessReceivedCommands+0x168>
 800d808:	a201      	add	r2, pc, #4	@ (adr r2, 800d810 <prvProcessReceivedCommands+0x40>)
 800d80a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d80e:	bf00      	nop
 800d810:	0800d839 	.word	0x0800d839
 800d814:	0800d839 	.word	0x0800d839
 800d818:	0800d839 	.word	0x0800d839
 800d81c:	0800d8af 	.word	0x0800d8af
 800d820:	0800d8c3 	.word	0x0800d8c3
 800d824:	0800d90f 	.word	0x0800d90f
 800d828:	0800d839 	.word	0x0800d839
 800d82c:	0800d839 	.word	0x0800d839
 800d830:	0800d8af 	.word	0x0800d8af
 800d834:	0800d8c3 	.word	0x0800d8c3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d83a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d83e:	f043 0301 	orr.w	r3, r3, #1
 800d842:	b2da      	uxtb	r2, r3
 800d844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d846:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d84a:	68fa      	ldr	r2, [r7, #12]
 800d84c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d84e:	699b      	ldr	r3, [r3, #24]
 800d850:	18d1      	adds	r1, r2, r3
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	6a3a      	ldr	r2, [r7, #32]
 800d856:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d858:	f7ff ff78 	bl	800d74c <prvInsertTimerInActiveList>
 800d85c:	4603      	mov	r3, r0
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d06c      	beq.n	800d93c <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d864:	6a1b      	ldr	r3, [r3, #32]
 800d866:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d868:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d86c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d870:	f003 0304 	and.w	r3, r3, #4
 800d874:	2b00      	cmp	r3, #0
 800d876:	d061      	beq.n	800d93c <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d878:	68fa      	ldr	r2, [r7, #12]
 800d87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d87c:	699b      	ldr	r3, [r3, #24]
 800d87e:	441a      	add	r2, r3
 800d880:	2300      	movs	r3, #0
 800d882:	9300      	str	r3, [sp, #0]
 800d884:	2300      	movs	r3, #0
 800d886:	2100      	movs	r1, #0
 800d888:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d88a:	f7ff fe1d 	bl	800d4c8 <xTimerGenericCommand>
 800d88e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800d890:	69fb      	ldr	r3, [r7, #28]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d152      	bne.n	800d93c <prvProcessReceivedCommands+0x16c>
	__asm volatile
 800d896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d89a:	f383 8811 	msr	BASEPRI, r3
 800d89e:	f3bf 8f6f 	isb	sy
 800d8a2:	f3bf 8f4f 	dsb	sy
 800d8a6:	61bb      	str	r3, [r7, #24]
}
 800d8a8:	bf00      	nop
 800d8aa:	bf00      	nop
 800d8ac:	e7fd      	b.n	800d8aa <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d8b4:	f023 0301 	bic.w	r3, r3, #1
 800d8b8:	b2da      	uxtb	r2, r3
 800d8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d8c0:	e03d      	b.n	800d93e <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d8c8:	f043 0301 	orr.w	r3, r3, #1
 800d8cc:	b2da      	uxtb	r2, r3
 800d8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d8d4:	68fa      	ldr	r2, [r7, #12]
 800d8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8d8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8dc:	699b      	ldr	r3, [r3, #24]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d10b      	bne.n	800d8fa <prvProcessReceivedCommands+0x12a>
	__asm volatile
 800d8e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8e6:	f383 8811 	msr	BASEPRI, r3
 800d8ea:	f3bf 8f6f 	isb	sy
 800d8ee:	f3bf 8f4f 	dsb	sy
 800d8f2:	617b      	str	r3, [r7, #20]
}
 800d8f4:	bf00      	nop
 800d8f6:	bf00      	nop
 800d8f8:	e7fd      	b.n	800d8f6 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8fc:	699a      	ldr	r2, [r3, #24]
 800d8fe:	6a3b      	ldr	r3, [r7, #32]
 800d900:	18d1      	adds	r1, r2, r3
 800d902:	6a3b      	ldr	r3, [r7, #32]
 800d904:	6a3a      	ldr	r2, [r7, #32]
 800d906:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d908:	f7ff ff20 	bl	800d74c <prvInsertTimerInActiveList>
					break;
 800d90c:	e017      	b.n	800d93e <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d90e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d910:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d914:	f003 0302 	and.w	r3, r3, #2
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d103      	bne.n	800d924 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 800d91c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d91e:	f000 fbeb 	bl	800e0f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d922:	e00c      	b.n	800d93e <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d926:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d92a:	f023 0301 	bic.w	r3, r3, #1
 800d92e:	b2da      	uxtb	r2, r3
 800d930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d932:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d936:	e002      	b.n	800d93e <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 800d938:	bf00      	nop
 800d93a:	e000      	b.n	800d93e <prvProcessReceivedCommands+0x16e>
					break;
 800d93c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d93e:	4b08      	ldr	r3, [pc, #32]	@ (800d960 <prvProcessReceivedCommands+0x190>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	f107 0108 	add.w	r1, r7, #8
 800d946:	2200      	movs	r2, #0
 800d948:	4618      	mov	r0, r3
 800d94a:	f7fe fb93 	bl	800c074 <xQueueReceive>
 800d94e:	4603      	mov	r3, r0
 800d950:	2b00      	cmp	r3, #0
 800d952:	f47f af41 	bne.w	800d7d8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d956:	bf00      	nop
 800d958:	bf00      	nop
 800d95a:	3728      	adds	r7, #40	@ 0x28
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}
 800d960:	2400164c 	.word	0x2400164c

0800d964 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b088      	sub	sp, #32
 800d968:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d96a:	e049      	b.n	800da00 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d96c:	4b2e      	ldr	r3, [pc, #184]	@ (800da28 <prvSwitchTimerLists+0xc4>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	68db      	ldr	r3, [r3, #12]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d976:	4b2c      	ldr	r3, [pc, #176]	@ (800da28 <prvSwitchTimerLists+0xc4>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	68db      	ldr	r3, [r3, #12]
 800d97c:	68db      	ldr	r3, [r3, #12]
 800d97e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	3304      	adds	r3, #4
 800d984:	4618      	mov	r0, r3
 800d986:	f7fe f8a0 	bl	800baca <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	6a1b      	ldr	r3, [r3, #32]
 800d98e:	68f8      	ldr	r0, [r7, #12]
 800d990:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d998:	f003 0304 	and.w	r3, r3, #4
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d02f      	beq.n	800da00 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	699b      	ldr	r3, [r3, #24]
 800d9a4:	693a      	ldr	r2, [r7, #16]
 800d9a6:	4413      	add	r3, r2
 800d9a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d9aa:	68ba      	ldr	r2, [r7, #8]
 800d9ac:	693b      	ldr	r3, [r7, #16]
 800d9ae:	429a      	cmp	r2, r3
 800d9b0:	d90e      	bls.n	800d9d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	68ba      	ldr	r2, [r7, #8]
 800d9b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	68fa      	ldr	r2, [r7, #12]
 800d9bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d9be:	4b1a      	ldr	r3, [pc, #104]	@ (800da28 <prvSwitchTimerLists+0xc4>)
 800d9c0:	681a      	ldr	r2, [r3, #0]
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	3304      	adds	r3, #4
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	4610      	mov	r0, r2
 800d9ca:	f7fe f845 	bl	800ba58 <vListInsert>
 800d9ce:	e017      	b.n	800da00 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	9300      	str	r3, [sp, #0]
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	693a      	ldr	r2, [r7, #16]
 800d9d8:	2100      	movs	r1, #0
 800d9da:	68f8      	ldr	r0, [r7, #12]
 800d9dc:	f7ff fd74 	bl	800d4c8 <xTimerGenericCommand>
 800d9e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d10b      	bne.n	800da00 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d9e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9ec:	f383 8811 	msr	BASEPRI, r3
 800d9f0:	f3bf 8f6f 	isb	sy
 800d9f4:	f3bf 8f4f 	dsb	sy
 800d9f8:	603b      	str	r3, [r7, #0]
}
 800d9fa:	bf00      	nop
 800d9fc:	bf00      	nop
 800d9fe:	e7fd      	b.n	800d9fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800da00:	4b09      	ldr	r3, [pc, #36]	@ (800da28 <prvSwitchTimerLists+0xc4>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d1b0      	bne.n	800d96c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800da0a:	4b07      	ldr	r3, [pc, #28]	@ (800da28 <prvSwitchTimerLists+0xc4>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800da10:	4b06      	ldr	r3, [pc, #24]	@ (800da2c <prvSwitchTimerLists+0xc8>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4a04      	ldr	r2, [pc, #16]	@ (800da28 <prvSwitchTimerLists+0xc4>)
 800da16:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800da18:	4a04      	ldr	r2, [pc, #16]	@ (800da2c <prvSwitchTimerLists+0xc8>)
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	6013      	str	r3, [r2, #0]
}
 800da1e:	bf00      	nop
 800da20:	3718      	adds	r7, #24
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}
 800da26:	bf00      	nop
 800da28:	24001644 	.word	0x24001644
 800da2c:	24001648 	.word	0x24001648

0800da30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b082      	sub	sp, #8
 800da34:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800da36:	f000 f96f 	bl	800dd18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800da3a:	4b15      	ldr	r3, [pc, #84]	@ (800da90 <prvCheckForValidListAndQueue+0x60>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d120      	bne.n	800da84 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800da42:	4814      	ldr	r0, [pc, #80]	@ (800da94 <prvCheckForValidListAndQueue+0x64>)
 800da44:	f7fd ffb7 	bl	800b9b6 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800da48:	4813      	ldr	r0, [pc, #76]	@ (800da98 <prvCheckForValidListAndQueue+0x68>)
 800da4a:	f7fd ffb4 	bl	800b9b6 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800da4e:	4b13      	ldr	r3, [pc, #76]	@ (800da9c <prvCheckForValidListAndQueue+0x6c>)
 800da50:	4a10      	ldr	r2, [pc, #64]	@ (800da94 <prvCheckForValidListAndQueue+0x64>)
 800da52:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800da54:	4b12      	ldr	r3, [pc, #72]	@ (800daa0 <prvCheckForValidListAndQueue+0x70>)
 800da56:	4a10      	ldr	r2, [pc, #64]	@ (800da98 <prvCheckForValidListAndQueue+0x68>)
 800da58:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800da5a:	2300      	movs	r3, #0
 800da5c:	9300      	str	r3, [sp, #0]
 800da5e:	4b11      	ldr	r3, [pc, #68]	@ (800daa4 <prvCheckForValidListAndQueue+0x74>)
 800da60:	4a11      	ldr	r2, [pc, #68]	@ (800daa8 <prvCheckForValidListAndQueue+0x78>)
 800da62:	210c      	movs	r1, #12
 800da64:	200a      	movs	r0, #10
 800da66:	f7fe f8c5 	bl	800bbf4 <xQueueGenericCreateStatic>
 800da6a:	4603      	mov	r3, r0
 800da6c:	4a08      	ldr	r2, [pc, #32]	@ (800da90 <prvCheckForValidListAndQueue+0x60>)
 800da6e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800da70:	4b07      	ldr	r3, [pc, #28]	@ (800da90 <prvCheckForValidListAndQueue+0x60>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d005      	beq.n	800da84 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800da78:	4b05      	ldr	r3, [pc, #20]	@ (800da90 <prvCheckForValidListAndQueue+0x60>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	490b      	ldr	r1, [pc, #44]	@ (800daac <prvCheckForValidListAndQueue+0x7c>)
 800da7e:	4618      	mov	r0, r3
 800da80:	f7fe fcea 	bl	800c458 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800da84:	f000 f97a 	bl	800dd7c <vPortExitCritical>
}
 800da88:	bf00      	nop
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}
 800da8e:	bf00      	nop
 800da90:	2400164c 	.word	0x2400164c
 800da94:	2400161c 	.word	0x2400161c
 800da98:	24001630 	.word	0x24001630
 800da9c:	24001644 	.word	0x24001644
 800daa0:	24001648 	.word	0x24001648
 800daa4:	240016d0 	.word	0x240016d0
 800daa8:	24001658 	.word	0x24001658
 800daac:	0800e5dc 	.word	0x0800e5dc

0800dab0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dab0:	b480      	push	{r7}
 800dab2:	b085      	sub	sp, #20
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	60f8      	str	r0, [r7, #12]
 800dab8:	60b9      	str	r1, [r7, #8]
 800daba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	3b04      	subs	r3, #4
 800dac0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800dac8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	3b04      	subs	r3, #4
 800dace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	f023 0201 	bic.w	r2, r3, #1
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	3b04      	subs	r3, #4
 800dade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dae0:	4a0c      	ldr	r2, [pc, #48]	@ (800db14 <pxPortInitialiseStack+0x64>)
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	3b14      	subs	r3, #20
 800daea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800daec:	687a      	ldr	r2, [r7, #4]
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	3b04      	subs	r3, #4
 800daf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	f06f 0202 	mvn.w	r2, #2
 800dafe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	3b20      	subs	r3, #32
 800db04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800db06:	68fb      	ldr	r3, [r7, #12]
}
 800db08:	4618      	mov	r0, r3
 800db0a:	3714      	adds	r7, #20
 800db0c:	46bd      	mov	sp, r7
 800db0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db12:	4770      	bx	lr
 800db14:	0800db19 	.word	0x0800db19

0800db18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800db18:	b480      	push	{r7}
 800db1a:	b085      	sub	sp, #20
 800db1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800db1e:	2300      	movs	r3, #0
 800db20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800db22:	4b13      	ldr	r3, [pc, #76]	@ (800db70 <prvTaskExitError+0x58>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db2a:	d00b      	beq.n	800db44 <prvTaskExitError+0x2c>
	__asm volatile
 800db2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db30:	f383 8811 	msr	BASEPRI, r3
 800db34:	f3bf 8f6f 	isb	sy
 800db38:	f3bf 8f4f 	dsb	sy
 800db3c:	60fb      	str	r3, [r7, #12]
}
 800db3e:	bf00      	nop
 800db40:	bf00      	nop
 800db42:	e7fd      	b.n	800db40 <prvTaskExitError+0x28>
	__asm volatile
 800db44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db48:	f383 8811 	msr	BASEPRI, r3
 800db4c:	f3bf 8f6f 	isb	sy
 800db50:	f3bf 8f4f 	dsb	sy
 800db54:	60bb      	str	r3, [r7, #8]
}
 800db56:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800db58:	bf00      	nop
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d0fc      	beq.n	800db5a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800db60:	bf00      	nop
 800db62:	bf00      	nop
 800db64:	3714      	adds	r7, #20
 800db66:	46bd      	mov	sp, r7
 800db68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6c:	4770      	bx	lr
 800db6e:	bf00      	nop
 800db70:	24000010 	.word	0x24000010
	...

0800db80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800db80:	4b07      	ldr	r3, [pc, #28]	@ (800dba0 <pxCurrentTCBConst2>)
 800db82:	6819      	ldr	r1, [r3, #0]
 800db84:	6808      	ldr	r0, [r1, #0]
 800db86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db8a:	f380 8809 	msr	PSP, r0
 800db8e:	f3bf 8f6f 	isb	sy
 800db92:	f04f 0000 	mov.w	r0, #0
 800db96:	f380 8811 	msr	BASEPRI, r0
 800db9a:	4770      	bx	lr
 800db9c:	f3af 8000 	nop.w

0800dba0 <pxCurrentTCBConst2>:
 800dba0:	240014e8 	.word	0x240014e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dba4:	bf00      	nop
 800dba6:	bf00      	nop

0800dba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dba8:	4808      	ldr	r0, [pc, #32]	@ (800dbcc <prvPortStartFirstTask+0x24>)
 800dbaa:	6800      	ldr	r0, [r0, #0]
 800dbac:	6800      	ldr	r0, [r0, #0]
 800dbae:	f380 8808 	msr	MSP, r0
 800dbb2:	f04f 0000 	mov.w	r0, #0
 800dbb6:	f380 8814 	msr	CONTROL, r0
 800dbba:	b662      	cpsie	i
 800dbbc:	b661      	cpsie	f
 800dbbe:	f3bf 8f4f 	dsb	sy
 800dbc2:	f3bf 8f6f 	isb	sy
 800dbc6:	df00      	svc	0
 800dbc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dbca:	bf00      	nop
 800dbcc:	e000ed08 	.word	0xe000ed08

0800dbd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b086      	sub	sp, #24
 800dbd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dbd6:	4b47      	ldr	r3, [pc, #284]	@ (800dcf4 <xPortStartScheduler+0x124>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	4a47      	ldr	r2, [pc, #284]	@ (800dcf8 <xPortStartScheduler+0x128>)
 800dbdc:	4293      	cmp	r3, r2
 800dbde:	d10b      	bne.n	800dbf8 <xPortStartScheduler+0x28>
	__asm volatile
 800dbe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbe4:	f383 8811 	msr	BASEPRI, r3
 800dbe8:	f3bf 8f6f 	isb	sy
 800dbec:	f3bf 8f4f 	dsb	sy
 800dbf0:	60fb      	str	r3, [r7, #12]
}
 800dbf2:	bf00      	nop
 800dbf4:	bf00      	nop
 800dbf6:	e7fd      	b.n	800dbf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dbf8:	4b3e      	ldr	r3, [pc, #248]	@ (800dcf4 <xPortStartScheduler+0x124>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	4a3f      	ldr	r2, [pc, #252]	@ (800dcfc <xPortStartScheduler+0x12c>)
 800dbfe:	4293      	cmp	r3, r2
 800dc00:	d10b      	bne.n	800dc1a <xPortStartScheduler+0x4a>
	__asm volatile
 800dc02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc06:	f383 8811 	msr	BASEPRI, r3
 800dc0a:	f3bf 8f6f 	isb	sy
 800dc0e:	f3bf 8f4f 	dsb	sy
 800dc12:	613b      	str	r3, [r7, #16]
}
 800dc14:	bf00      	nop
 800dc16:	bf00      	nop
 800dc18:	e7fd      	b.n	800dc16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dc1a:	4b39      	ldr	r3, [pc, #228]	@ (800dd00 <xPortStartScheduler+0x130>)
 800dc1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	b2db      	uxtb	r3, r3
 800dc24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	22ff      	movs	r2, #255	@ 0xff
 800dc2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	781b      	ldrb	r3, [r3, #0]
 800dc30:	b2db      	uxtb	r3, r3
 800dc32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dc34:	78fb      	ldrb	r3, [r7, #3]
 800dc36:	b2db      	uxtb	r3, r3
 800dc38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800dc3c:	b2da      	uxtb	r2, r3
 800dc3e:	4b31      	ldr	r3, [pc, #196]	@ (800dd04 <xPortStartScheduler+0x134>)
 800dc40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dc42:	4b31      	ldr	r3, [pc, #196]	@ (800dd08 <xPortStartScheduler+0x138>)
 800dc44:	2207      	movs	r2, #7
 800dc46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dc48:	e009      	b.n	800dc5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800dc4a:	4b2f      	ldr	r3, [pc, #188]	@ (800dd08 <xPortStartScheduler+0x138>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	3b01      	subs	r3, #1
 800dc50:	4a2d      	ldr	r2, [pc, #180]	@ (800dd08 <xPortStartScheduler+0x138>)
 800dc52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dc54:	78fb      	ldrb	r3, [r7, #3]
 800dc56:	b2db      	uxtb	r3, r3
 800dc58:	005b      	lsls	r3, r3, #1
 800dc5a:	b2db      	uxtb	r3, r3
 800dc5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dc5e:	78fb      	ldrb	r3, [r7, #3]
 800dc60:	b2db      	uxtb	r3, r3
 800dc62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc66:	2b80      	cmp	r3, #128	@ 0x80
 800dc68:	d0ef      	beq.n	800dc4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dc6a:	4b27      	ldr	r3, [pc, #156]	@ (800dd08 <xPortStartScheduler+0x138>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	f1c3 0307 	rsb	r3, r3, #7
 800dc72:	2b04      	cmp	r3, #4
 800dc74:	d00b      	beq.n	800dc8e <xPortStartScheduler+0xbe>
	__asm volatile
 800dc76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc7a:	f383 8811 	msr	BASEPRI, r3
 800dc7e:	f3bf 8f6f 	isb	sy
 800dc82:	f3bf 8f4f 	dsb	sy
 800dc86:	60bb      	str	r3, [r7, #8]
}
 800dc88:	bf00      	nop
 800dc8a:	bf00      	nop
 800dc8c:	e7fd      	b.n	800dc8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dc8e:	4b1e      	ldr	r3, [pc, #120]	@ (800dd08 <xPortStartScheduler+0x138>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	021b      	lsls	r3, r3, #8
 800dc94:	4a1c      	ldr	r2, [pc, #112]	@ (800dd08 <xPortStartScheduler+0x138>)
 800dc96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dc98:	4b1b      	ldr	r3, [pc, #108]	@ (800dd08 <xPortStartScheduler+0x138>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dca0:	4a19      	ldr	r2, [pc, #100]	@ (800dd08 <xPortStartScheduler+0x138>)
 800dca2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	b2da      	uxtb	r2, r3
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dcac:	4b17      	ldr	r3, [pc, #92]	@ (800dd0c <xPortStartScheduler+0x13c>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	4a16      	ldr	r2, [pc, #88]	@ (800dd0c <xPortStartScheduler+0x13c>)
 800dcb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800dcb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dcb8:	4b14      	ldr	r3, [pc, #80]	@ (800dd0c <xPortStartScheduler+0x13c>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	4a13      	ldr	r2, [pc, #76]	@ (800dd0c <xPortStartScheduler+0x13c>)
 800dcbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800dcc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dcc4:	f000 f8da 	bl	800de7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dcc8:	4b11      	ldr	r3, [pc, #68]	@ (800dd10 <xPortStartScheduler+0x140>)
 800dcca:	2200      	movs	r2, #0
 800dccc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dcce:	f000 f8f9 	bl	800dec4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dcd2:	4b10      	ldr	r3, [pc, #64]	@ (800dd14 <xPortStartScheduler+0x144>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	4a0f      	ldr	r2, [pc, #60]	@ (800dd14 <xPortStartScheduler+0x144>)
 800dcd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800dcdc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dcde:	f7ff ff63 	bl	800dba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dce2:	f7fe fff3 	bl	800cccc <vTaskSwitchContext>
	prvTaskExitError();
 800dce6:	f7ff ff17 	bl	800db18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dcea:	2300      	movs	r3, #0
}
 800dcec:	4618      	mov	r0, r3
 800dcee:	3718      	adds	r7, #24
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}
 800dcf4:	e000ed00 	.word	0xe000ed00
 800dcf8:	410fc271 	.word	0x410fc271
 800dcfc:	410fc270 	.word	0x410fc270
 800dd00:	e000e400 	.word	0xe000e400
 800dd04:	24001720 	.word	0x24001720
 800dd08:	24001724 	.word	0x24001724
 800dd0c:	e000ed20 	.word	0xe000ed20
 800dd10:	24000010 	.word	0x24000010
 800dd14:	e000ef34 	.word	0xe000ef34

0800dd18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dd18:	b480      	push	{r7}
 800dd1a:	b083      	sub	sp, #12
 800dd1c:	af00      	add	r7, sp, #0
	__asm volatile
 800dd1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd22:	f383 8811 	msr	BASEPRI, r3
 800dd26:	f3bf 8f6f 	isb	sy
 800dd2a:	f3bf 8f4f 	dsb	sy
 800dd2e:	607b      	str	r3, [r7, #4]
}
 800dd30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dd32:	4b10      	ldr	r3, [pc, #64]	@ (800dd74 <vPortEnterCritical+0x5c>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	3301      	adds	r3, #1
 800dd38:	4a0e      	ldr	r2, [pc, #56]	@ (800dd74 <vPortEnterCritical+0x5c>)
 800dd3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dd3c:	4b0d      	ldr	r3, [pc, #52]	@ (800dd74 <vPortEnterCritical+0x5c>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	2b01      	cmp	r3, #1
 800dd42:	d110      	bne.n	800dd66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dd44:	4b0c      	ldr	r3, [pc, #48]	@ (800dd78 <vPortEnterCritical+0x60>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	b2db      	uxtb	r3, r3
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d00b      	beq.n	800dd66 <vPortEnterCritical+0x4e>
	__asm volatile
 800dd4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd52:	f383 8811 	msr	BASEPRI, r3
 800dd56:	f3bf 8f6f 	isb	sy
 800dd5a:	f3bf 8f4f 	dsb	sy
 800dd5e:	603b      	str	r3, [r7, #0]
}
 800dd60:	bf00      	nop
 800dd62:	bf00      	nop
 800dd64:	e7fd      	b.n	800dd62 <vPortEnterCritical+0x4a>
	}
}
 800dd66:	bf00      	nop
 800dd68:	370c      	adds	r7, #12
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd70:	4770      	bx	lr
 800dd72:	bf00      	nop
 800dd74:	24000010 	.word	0x24000010
 800dd78:	e000ed04 	.word	0xe000ed04

0800dd7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dd7c:	b480      	push	{r7}
 800dd7e:	b083      	sub	sp, #12
 800dd80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dd82:	4b12      	ldr	r3, [pc, #72]	@ (800ddcc <vPortExitCritical+0x50>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d10b      	bne.n	800dda2 <vPortExitCritical+0x26>
	__asm volatile
 800dd8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd8e:	f383 8811 	msr	BASEPRI, r3
 800dd92:	f3bf 8f6f 	isb	sy
 800dd96:	f3bf 8f4f 	dsb	sy
 800dd9a:	607b      	str	r3, [r7, #4]
}
 800dd9c:	bf00      	nop
 800dd9e:	bf00      	nop
 800dda0:	e7fd      	b.n	800dd9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dda2:	4b0a      	ldr	r3, [pc, #40]	@ (800ddcc <vPortExitCritical+0x50>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	3b01      	subs	r3, #1
 800dda8:	4a08      	ldr	r2, [pc, #32]	@ (800ddcc <vPortExitCritical+0x50>)
 800ddaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ddac:	4b07      	ldr	r3, [pc, #28]	@ (800ddcc <vPortExitCritical+0x50>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d105      	bne.n	800ddc0 <vPortExitCritical+0x44>
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	f383 8811 	msr	BASEPRI, r3
}
 800ddbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ddc0:	bf00      	nop
 800ddc2:	370c      	adds	r7, #12
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddca:	4770      	bx	lr
 800ddcc:	24000010 	.word	0x24000010

0800ddd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ddd0:	f3ef 8009 	mrs	r0, PSP
 800ddd4:	f3bf 8f6f 	isb	sy
 800ddd8:	4b15      	ldr	r3, [pc, #84]	@ (800de30 <pxCurrentTCBConst>)
 800ddda:	681a      	ldr	r2, [r3, #0]
 800dddc:	f01e 0f10 	tst.w	lr, #16
 800dde0:	bf08      	it	eq
 800dde2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dde6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddea:	6010      	str	r0, [r2, #0]
 800ddec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ddf0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ddf4:	f380 8811 	msr	BASEPRI, r0
 800ddf8:	f3bf 8f4f 	dsb	sy
 800ddfc:	f3bf 8f6f 	isb	sy
 800de00:	f7fe ff64 	bl	800cccc <vTaskSwitchContext>
 800de04:	f04f 0000 	mov.w	r0, #0
 800de08:	f380 8811 	msr	BASEPRI, r0
 800de0c:	bc09      	pop	{r0, r3}
 800de0e:	6819      	ldr	r1, [r3, #0]
 800de10:	6808      	ldr	r0, [r1, #0]
 800de12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de16:	f01e 0f10 	tst.w	lr, #16
 800de1a:	bf08      	it	eq
 800de1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800de20:	f380 8809 	msr	PSP, r0
 800de24:	f3bf 8f6f 	isb	sy
 800de28:	4770      	bx	lr
 800de2a:	bf00      	nop
 800de2c:	f3af 8000 	nop.w

0800de30 <pxCurrentTCBConst>:
 800de30:	240014e8 	.word	0x240014e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800de34:	bf00      	nop
 800de36:	bf00      	nop

0800de38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b082      	sub	sp, #8
 800de3c:	af00      	add	r7, sp, #0
	__asm volatile
 800de3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de42:	f383 8811 	msr	BASEPRI, r3
 800de46:	f3bf 8f6f 	isb	sy
 800de4a:	f3bf 8f4f 	dsb	sy
 800de4e:	607b      	str	r3, [r7, #4]
}
 800de50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800de52:	f7fe fe81 	bl	800cb58 <xTaskIncrementTick>
 800de56:	4603      	mov	r3, r0
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d003      	beq.n	800de64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800de5c:	4b06      	ldr	r3, [pc, #24]	@ (800de78 <SysTick_Handler+0x40>)
 800de5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de62:	601a      	str	r2, [r3, #0]
 800de64:	2300      	movs	r3, #0
 800de66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	f383 8811 	msr	BASEPRI, r3
}
 800de6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800de70:	bf00      	nop
 800de72:	3708      	adds	r7, #8
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}
 800de78:	e000ed04 	.word	0xe000ed04

0800de7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800de7c:	b480      	push	{r7}
 800de7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800de80:	4b0b      	ldr	r3, [pc, #44]	@ (800deb0 <vPortSetupTimerInterrupt+0x34>)
 800de82:	2200      	movs	r2, #0
 800de84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800de86:	4b0b      	ldr	r3, [pc, #44]	@ (800deb4 <vPortSetupTimerInterrupt+0x38>)
 800de88:	2200      	movs	r2, #0
 800de8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800de8c:	4b0a      	ldr	r3, [pc, #40]	@ (800deb8 <vPortSetupTimerInterrupt+0x3c>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	4a0a      	ldr	r2, [pc, #40]	@ (800debc <vPortSetupTimerInterrupt+0x40>)
 800de92:	fba2 2303 	umull	r2, r3, r2, r3
 800de96:	099b      	lsrs	r3, r3, #6
 800de98:	4a09      	ldr	r2, [pc, #36]	@ (800dec0 <vPortSetupTimerInterrupt+0x44>)
 800de9a:	3b01      	subs	r3, #1
 800de9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800de9e:	4b04      	ldr	r3, [pc, #16]	@ (800deb0 <vPortSetupTimerInterrupt+0x34>)
 800dea0:	2207      	movs	r2, #7
 800dea2:	601a      	str	r2, [r3, #0]
}
 800dea4:	bf00      	nop
 800dea6:	46bd      	mov	sp, r7
 800dea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deac:	4770      	bx	lr
 800deae:	bf00      	nop
 800deb0:	e000e010 	.word	0xe000e010
 800deb4:	e000e018 	.word	0xe000e018
 800deb8:	24000000 	.word	0x24000000
 800debc:	10624dd3 	.word	0x10624dd3
 800dec0:	e000e014 	.word	0xe000e014

0800dec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dec4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ded4 <vPortEnableVFP+0x10>
 800dec8:	6801      	ldr	r1, [r0, #0]
 800deca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800dece:	6001      	str	r1, [r0, #0]
 800ded0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ded2:	bf00      	nop
 800ded4:	e000ed88 	.word	0xe000ed88

0800ded8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ded8:	b480      	push	{r7}
 800deda:	b085      	sub	sp, #20
 800dedc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dede:	f3ef 8305 	mrs	r3, IPSR
 800dee2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	2b0f      	cmp	r3, #15
 800dee8:	d915      	bls.n	800df16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800deea:	4a18      	ldr	r2, [pc, #96]	@ (800df4c <vPortValidateInterruptPriority+0x74>)
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	4413      	add	r3, r2
 800def0:	781b      	ldrb	r3, [r3, #0]
 800def2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800def4:	4b16      	ldr	r3, [pc, #88]	@ (800df50 <vPortValidateInterruptPriority+0x78>)
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	7afa      	ldrb	r2, [r7, #11]
 800defa:	429a      	cmp	r2, r3
 800defc:	d20b      	bcs.n	800df16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800defe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df02:	f383 8811 	msr	BASEPRI, r3
 800df06:	f3bf 8f6f 	isb	sy
 800df0a:	f3bf 8f4f 	dsb	sy
 800df0e:	607b      	str	r3, [r7, #4]
}
 800df10:	bf00      	nop
 800df12:	bf00      	nop
 800df14:	e7fd      	b.n	800df12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800df16:	4b0f      	ldr	r3, [pc, #60]	@ (800df54 <vPortValidateInterruptPriority+0x7c>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800df1e:	4b0e      	ldr	r3, [pc, #56]	@ (800df58 <vPortValidateInterruptPriority+0x80>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	429a      	cmp	r2, r3
 800df24:	d90b      	bls.n	800df3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800df26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df2a:	f383 8811 	msr	BASEPRI, r3
 800df2e:	f3bf 8f6f 	isb	sy
 800df32:	f3bf 8f4f 	dsb	sy
 800df36:	603b      	str	r3, [r7, #0]
}
 800df38:	bf00      	nop
 800df3a:	bf00      	nop
 800df3c:	e7fd      	b.n	800df3a <vPortValidateInterruptPriority+0x62>
	}
 800df3e:	bf00      	nop
 800df40:	3714      	adds	r7, #20
 800df42:	46bd      	mov	sp, r7
 800df44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df48:	4770      	bx	lr
 800df4a:	bf00      	nop
 800df4c:	e000e3f0 	.word	0xe000e3f0
 800df50:	24001720 	.word	0x24001720
 800df54:	e000ed0c 	.word	0xe000ed0c
 800df58:	24001724 	.word	0x24001724

0800df5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b08a      	sub	sp, #40	@ 0x28
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800df64:	2300      	movs	r3, #0
 800df66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800df68:	f7fe fd3a 	bl	800c9e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800df6c:	4b5c      	ldr	r3, [pc, #368]	@ (800e0e0 <pvPortMalloc+0x184>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d101      	bne.n	800df78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800df74:	f000 f924 	bl	800e1c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800df78:	4b5a      	ldr	r3, [pc, #360]	@ (800e0e4 <pvPortMalloc+0x188>)
 800df7a:	681a      	ldr	r2, [r3, #0]
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	4013      	ands	r3, r2
 800df80:	2b00      	cmp	r3, #0
 800df82:	f040 8095 	bne.w	800e0b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d01e      	beq.n	800dfca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800df8c:	2208      	movs	r2, #8
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	4413      	add	r3, r2
 800df92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f003 0307 	and.w	r3, r3, #7
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d015      	beq.n	800dfca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f023 0307 	bic.w	r3, r3, #7
 800dfa4:	3308      	adds	r3, #8
 800dfa6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	f003 0307 	and.w	r3, r3, #7
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d00b      	beq.n	800dfca <pvPortMalloc+0x6e>
	__asm volatile
 800dfb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfb6:	f383 8811 	msr	BASEPRI, r3
 800dfba:	f3bf 8f6f 	isb	sy
 800dfbe:	f3bf 8f4f 	dsb	sy
 800dfc2:	617b      	str	r3, [r7, #20]
}
 800dfc4:	bf00      	nop
 800dfc6:	bf00      	nop
 800dfc8:	e7fd      	b.n	800dfc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d06f      	beq.n	800e0b0 <pvPortMalloc+0x154>
 800dfd0:	4b45      	ldr	r3, [pc, #276]	@ (800e0e8 <pvPortMalloc+0x18c>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	687a      	ldr	r2, [r7, #4]
 800dfd6:	429a      	cmp	r2, r3
 800dfd8:	d86a      	bhi.n	800e0b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dfda:	4b44      	ldr	r3, [pc, #272]	@ (800e0ec <pvPortMalloc+0x190>)
 800dfdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dfde:	4b43      	ldr	r3, [pc, #268]	@ (800e0ec <pvPortMalloc+0x190>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dfe4:	e004      	b.n	800dff0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800dfe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfe8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dfea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dff2:	685b      	ldr	r3, [r3, #4]
 800dff4:	687a      	ldr	r2, [r7, #4]
 800dff6:	429a      	cmp	r2, r3
 800dff8:	d903      	bls.n	800e002 <pvPortMalloc+0xa6>
 800dffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d1f1      	bne.n	800dfe6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e002:	4b37      	ldr	r3, [pc, #220]	@ (800e0e0 <pvPortMalloc+0x184>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e008:	429a      	cmp	r2, r3
 800e00a:	d051      	beq.n	800e0b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e00c:	6a3b      	ldr	r3, [r7, #32]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	2208      	movs	r2, #8
 800e012:	4413      	add	r3, r2
 800e014:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e018:	681a      	ldr	r2, [r3, #0]
 800e01a:	6a3b      	ldr	r3, [r7, #32]
 800e01c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e020:	685a      	ldr	r2, [r3, #4]
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	1ad2      	subs	r2, r2, r3
 800e026:	2308      	movs	r3, #8
 800e028:	005b      	lsls	r3, r3, #1
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d920      	bls.n	800e070 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e02e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	4413      	add	r3, r2
 800e034:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e036:	69bb      	ldr	r3, [r7, #24]
 800e038:	f003 0307 	and.w	r3, r3, #7
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d00b      	beq.n	800e058 <pvPortMalloc+0xfc>
	__asm volatile
 800e040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e044:	f383 8811 	msr	BASEPRI, r3
 800e048:	f3bf 8f6f 	isb	sy
 800e04c:	f3bf 8f4f 	dsb	sy
 800e050:	613b      	str	r3, [r7, #16]
}
 800e052:	bf00      	nop
 800e054:	bf00      	nop
 800e056:	e7fd      	b.n	800e054 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e05a:	685a      	ldr	r2, [r3, #4]
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	1ad2      	subs	r2, r2, r3
 800e060:	69bb      	ldr	r3, [r7, #24]
 800e062:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e066:	687a      	ldr	r2, [r7, #4]
 800e068:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e06a:	69b8      	ldr	r0, [r7, #24]
 800e06c:	f000 f90a 	bl	800e284 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e070:	4b1d      	ldr	r3, [pc, #116]	@ (800e0e8 <pvPortMalloc+0x18c>)
 800e072:	681a      	ldr	r2, [r3, #0]
 800e074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e076:	685b      	ldr	r3, [r3, #4]
 800e078:	1ad3      	subs	r3, r2, r3
 800e07a:	4a1b      	ldr	r2, [pc, #108]	@ (800e0e8 <pvPortMalloc+0x18c>)
 800e07c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e07e:	4b1a      	ldr	r3, [pc, #104]	@ (800e0e8 <pvPortMalloc+0x18c>)
 800e080:	681a      	ldr	r2, [r3, #0]
 800e082:	4b1b      	ldr	r3, [pc, #108]	@ (800e0f0 <pvPortMalloc+0x194>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	429a      	cmp	r2, r3
 800e088:	d203      	bcs.n	800e092 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e08a:	4b17      	ldr	r3, [pc, #92]	@ (800e0e8 <pvPortMalloc+0x18c>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	4a18      	ldr	r2, [pc, #96]	@ (800e0f0 <pvPortMalloc+0x194>)
 800e090:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e094:	685a      	ldr	r2, [r3, #4]
 800e096:	4b13      	ldr	r3, [pc, #76]	@ (800e0e4 <pvPortMalloc+0x188>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	431a      	orrs	r2, r3
 800e09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e09e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e0a6:	4b13      	ldr	r3, [pc, #76]	@ (800e0f4 <pvPortMalloc+0x198>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	3301      	adds	r3, #1
 800e0ac:	4a11      	ldr	r2, [pc, #68]	@ (800e0f4 <pvPortMalloc+0x198>)
 800e0ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e0b0:	f7fe fca4 	bl	800c9fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e0b4:	69fb      	ldr	r3, [r7, #28]
 800e0b6:	f003 0307 	and.w	r3, r3, #7
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d00b      	beq.n	800e0d6 <pvPortMalloc+0x17a>
	__asm volatile
 800e0be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0c2:	f383 8811 	msr	BASEPRI, r3
 800e0c6:	f3bf 8f6f 	isb	sy
 800e0ca:	f3bf 8f4f 	dsb	sy
 800e0ce:	60fb      	str	r3, [r7, #12]
}
 800e0d0:	bf00      	nop
 800e0d2:	bf00      	nop
 800e0d4:	e7fd      	b.n	800e0d2 <pvPortMalloc+0x176>
	return pvReturn;
 800e0d6:	69fb      	ldr	r3, [r7, #28]
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3728      	adds	r7, #40	@ 0x28
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}
 800e0e0:	2400c6f8 	.word	0x2400c6f8
 800e0e4:	2400c70c 	.word	0x2400c70c
 800e0e8:	2400c6fc 	.word	0x2400c6fc
 800e0ec:	2400c6f0 	.word	0x2400c6f0
 800e0f0:	2400c700 	.word	0x2400c700
 800e0f4:	2400c704 	.word	0x2400c704

0800e0f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b086      	sub	sp, #24
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d04f      	beq.n	800e1aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e10a:	2308      	movs	r3, #8
 800e10c:	425b      	negs	r3, r3
 800e10e:	697a      	ldr	r2, [r7, #20]
 800e110:	4413      	add	r3, r2
 800e112:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e114:	697b      	ldr	r3, [r7, #20]
 800e116:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e118:	693b      	ldr	r3, [r7, #16]
 800e11a:	685a      	ldr	r2, [r3, #4]
 800e11c:	4b25      	ldr	r3, [pc, #148]	@ (800e1b4 <vPortFree+0xbc>)
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	4013      	ands	r3, r2
 800e122:	2b00      	cmp	r3, #0
 800e124:	d10b      	bne.n	800e13e <vPortFree+0x46>
	__asm volatile
 800e126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e12a:	f383 8811 	msr	BASEPRI, r3
 800e12e:	f3bf 8f6f 	isb	sy
 800e132:	f3bf 8f4f 	dsb	sy
 800e136:	60fb      	str	r3, [r7, #12]
}
 800e138:	bf00      	nop
 800e13a:	bf00      	nop
 800e13c:	e7fd      	b.n	800e13a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d00b      	beq.n	800e15e <vPortFree+0x66>
	__asm volatile
 800e146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e14a:	f383 8811 	msr	BASEPRI, r3
 800e14e:	f3bf 8f6f 	isb	sy
 800e152:	f3bf 8f4f 	dsb	sy
 800e156:	60bb      	str	r3, [r7, #8]
}
 800e158:	bf00      	nop
 800e15a:	bf00      	nop
 800e15c:	e7fd      	b.n	800e15a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e15e:	693b      	ldr	r3, [r7, #16]
 800e160:	685a      	ldr	r2, [r3, #4]
 800e162:	4b14      	ldr	r3, [pc, #80]	@ (800e1b4 <vPortFree+0xbc>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	4013      	ands	r3, r2
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d01e      	beq.n	800e1aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d11a      	bne.n	800e1aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	685a      	ldr	r2, [r3, #4]
 800e178:	4b0e      	ldr	r3, [pc, #56]	@ (800e1b4 <vPortFree+0xbc>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	43db      	mvns	r3, r3
 800e17e:	401a      	ands	r2, r3
 800e180:	693b      	ldr	r3, [r7, #16]
 800e182:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e184:	f7fe fc2c 	bl	800c9e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e188:	693b      	ldr	r3, [r7, #16]
 800e18a:	685a      	ldr	r2, [r3, #4]
 800e18c:	4b0a      	ldr	r3, [pc, #40]	@ (800e1b8 <vPortFree+0xc0>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	4413      	add	r3, r2
 800e192:	4a09      	ldr	r2, [pc, #36]	@ (800e1b8 <vPortFree+0xc0>)
 800e194:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e196:	6938      	ldr	r0, [r7, #16]
 800e198:	f000 f874 	bl	800e284 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e19c:	4b07      	ldr	r3, [pc, #28]	@ (800e1bc <vPortFree+0xc4>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	3301      	adds	r3, #1
 800e1a2:	4a06      	ldr	r2, [pc, #24]	@ (800e1bc <vPortFree+0xc4>)
 800e1a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e1a6:	f7fe fc29 	bl	800c9fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e1aa:	bf00      	nop
 800e1ac:	3718      	adds	r7, #24
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}
 800e1b2:	bf00      	nop
 800e1b4:	2400c70c 	.word	0x2400c70c
 800e1b8:	2400c6fc 	.word	0x2400c6fc
 800e1bc:	2400c708 	.word	0x2400c708

0800e1c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e1c0:	b480      	push	{r7}
 800e1c2:	b085      	sub	sp, #20
 800e1c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e1c6:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 800e1ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e1cc:	4b27      	ldr	r3, [pc, #156]	@ (800e26c <prvHeapInit+0xac>)
 800e1ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	f003 0307 	and.w	r3, r3, #7
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d00c      	beq.n	800e1f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	3307      	adds	r3, #7
 800e1de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	f023 0307 	bic.w	r3, r3, #7
 800e1e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e1e8:	68ba      	ldr	r2, [r7, #8]
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	1ad3      	subs	r3, r2, r3
 800e1ee:	4a1f      	ldr	r2, [pc, #124]	@ (800e26c <prvHeapInit+0xac>)
 800e1f0:	4413      	add	r3, r2
 800e1f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e1f8:	4a1d      	ldr	r2, [pc, #116]	@ (800e270 <prvHeapInit+0xb0>)
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e1fe:	4b1c      	ldr	r3, [pc, #112]	@ (800e270 <prvHeapInit+0xb0>)
 800e200:	2200      	movs	r2, #0
 800e202:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	68ba      	ldr	r2, [r7, #8]
 800e208:	4413      	add	r3, r2
 800e20a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e20c:	2208      	movs	r2, #8
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	1a9b      	subs	r3, r3, r2
 800e212:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	f023 0307 	bic.w	r3, r3, #7
 800e21a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	4a15      	ldr	r2, [pc, #84]	@ (800e274 <prvHeapInit+0xb4>)
 800e220:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e222:	4b14      	ldr	r3, [pc, #80]	@ (800e274 <prvHeapInit+0xb4>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	2200      	movs	r2, #0
 800e228:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e22a:	4b12      	ldr	r3, [pc, #72]	@ (800e274 <prvHeapInit+0xb4>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	2200      	movs	r2, #0
 800e230:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	68fa      	ldr	r2, [r7, #12]
 800e23a:	1ad2      	subs	r2, r2, r3
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e240:	4b0c      	ldr	r3, [pc, #48]	@ (800e274 <prvHeapInit+0xb4>)
 800e242:	681a      	ldr	r2, [r3, #0]
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	685b      	ldr	r3, [r3, #4]
 800e24c:	4a0a      	ldr	r2, [pc, #40]	@ (800e278 <prvHeapInit+0xb8>)
 800e24e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	685b      	ldr	r3, [r3, #4]
 800e254:	4a09      	ldr	r2, [pc, #36]	@ (800e27c <prvHeapInit+0xbc>)
 800e256:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e258:	4b09      	ldr	r3, [pc, #36]	@ (800e280 <prvHeapInit+0xc0>)
 800e25a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e25e:	601a      	str	r2, [r3, #0]
}
 800e260:	bf00      	nop
 800e262:	3714      	adds	r7, #20
 800e264:	46bd      	mov	sp, r7
 800e266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26a:	4770      	bx	lr
 800e26c:	24001728 	.word	0x24001728
 800e270:	2400c6f0 	.word	0x2400c6f0
 800e274:	2400c6f8 	.word	0x2400c6f8
 800e278:	2400c700 	.word	0x2400c700
 800e27c:	2400c6fc 	.word	0x2400c6fc
 800e280:	2400c70c 	.word	0x2400c70c

0800e284 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e284:	b480      	push	{r7}
 800e286:	b085      	sub	sp, #20
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e28c:	4b28      	ldr	r3, [pc, #160]	@ (800e330 <prvInsertBlockIntoFreeList+0xac>)
 800e28e:	60fb      	str	r3, [r7, #12]
 800e290:	e002      	b.n	800e298 <prvInsertBlockIntoFreeList+0x14>
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	60fb      	str	r3, [r7, #12]
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	687a      	ldr	r2, [r7, #4]
 800e29e:	429a      	cmp	r2, r3
 800e2a0:	d8f7      	bhi.n	800e292 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	685b      	ldr	r3, [r3, #4]
 800e2aa:	68ba      	ldr	r2, [r7, #8]
 800e2ac:	4413      	add	r3, r2
 800e2ae:	687a      	ldr	r2, [r7, #4]
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	d108      	bne.n	800e2c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	685a      	ldr	r2, [r3, #4]
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	685b      	ldr	r3, [r3, #4]
 800e2bc:	441a      	add	r2, r3
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	685b      	ldr	r3, [r3, #4]
 800e2ce:	68ba      	ldr	r2, [r7, #8]
 800e2d0:	441a      	add	r2, r3
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	429a      	cmp	r2, r3
 800e2d8:	d118      	bne.n	800e30c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681a      	ldr	r2, [r3, #0]
 800e2de:	4b15      	ldr	r3, [pc, #84]	@ (800e334 <prvInsertBlockIntoFreeList+0xb0>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	429a      	cmp	r2, r3
 800e2e4:	d00d      	beq.n	800e302 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	685a      	ldr	r2, [r3, #4]
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	685b      	ldr	r3, [r3, #4]
 800e2f0:	441a      	add	r2, r3
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	681a      	ldr	r2, [r3, #0]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	601a      	str	r2, [r3, #0]
 800e300:	e008      	b.n	800e314 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e302:	4b0c      	ldr	r3, [pc, #48]	@ (800e334 <prvInsertBlockIntoFreeList+0xb0>)
 800e304:	681a      	ldr	r2, [r3, #0]
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	601a      	str	r2, [r3, #0]
 800e30a:	e003      	b.n	800e314 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681a      	ldr	r2, [r3, #0]
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e314:	68fa      	ldr	r2, [r7, #12]
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	429a      	cmp	r2, r3
 800e31a:	d002      	beq.n	800e322 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	687a      	ldr	r2, [r7, #4]
 800e320:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e322:	bf00      	nop
 800e324:	3714      	adds	r7, #20
 800e326:	46bd      	mov	sp, r7
 800e328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32c:	4770      	bx	lr
 800e32e:	bf00      	nop
 800e330:	2400c6f0 	.word	0x2400c6f0
 800e334:	2400c6f8 	.word	0x2400c6f8

0800e338 <memset>:
 800e338:	4402      	add	r2, r0
 800e33a:	4603      	mov	r3, r0
 800e33c:	4293      	cmp	r3, r2
 800e33e:	d100      	bne.n	800e342 <memset+0xa>
 800e340:	4770      	bx	lr
 800e342:	f803 1b01 	strb.w	r1, [r3], #1
 800e346:	e7f9      	b.n	800e33c <memset+0x4>

0800e348 <_reclaim_reent>:
 800e348:	4b2d      	ldr	r3, [pc, #180]	@ (800e400 <_reclaim_reent+0xb8>)
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	4283      	cmp	r3, r0
 800e34e:	b570      	push	{r4, r5, r6, lr}
 800e350:	4604      	mov	r4, r0
 800e352:	d053      	beq.n	800e3fc <_reclaim_reent+0xb4>
 800e354:	69c3      	ldr	r3, [r0, #28]
 800e356:	b31b      	cbz	r3, 800e3a0 <_reclaim_reent+0x58>
 800e358:	68db      	ldr	r3, [r3, #12]
 800e35a:	b163      	cbz	r3, 800e376 <_reclaim_reent+0x2e>
 800e35c:	2500      	movs	r5, #0
 800e35e:	69e3      	ldr	r3, [r4, #28]
 800e360:	68db      	ldr	r3, [r3, #12]
 800e362:	5959      	ldr	r1, [r3, r5]
 800e364:	b9b1      	cbnz	r1, 800e394 <_reclaim_reent+0x4c>
 800e366:	3504      	adds	r5, #4
 800e368:	2d80      	cmp	r5, #128	@ 0x80
 800e36a:	d1f8      	bne.n	800e35e <_reclaim_reent+0x16>
 800e36c:	69e3      	ldr	r3, [r4, #28]
 800e36e:	4620      	mov	r0, r4
 800e370:	68d9      	ldr	r1, [r3, #12]
 800e372:	f000 f87b 	bl	800e46c <_free_r>
 800e376:	69e3      	ldr	r3, [r4, #28]
 800e378:	6819      	ldr	r1, [r3, #0]
 800e37a:	b111      	cbz	r1, 800e382 <_reclaim_reent+0x3a>
 800e37c:	4620      	mov	r0, r4
 800e37e:	f000 f875 	bl	800e46c <_free_r>
 800e382:	69e3      	ldr	r3, [r4, #28]
 800e384:	689d      	ldr	r5, [r3, #8]
 800e386:	b15d      	cbz	r5, 800e3a0 <_reclaim_reent+0x58>
 800e388:	4629      	mov	r1, r5
 800e38a:	4620      	mov	r0, r4
 800e38c:	682d      	ldr	r5, [r5, #0]
 800e38e:	f000 f86d 	bl	800e46c <_free_r>
 800e392:	e7f8      	b.n	800e386 <_reclaim_reent+0x3e>
 800e394:	680e      	ldr	r6, [r1, #0]
 800e396:	4620      	mov	r0, r4
 800e398:	f000 f868 	bl	800e46c <_free_r>
 800e39c:	4631      	mov	r1, r6
 800e39e:	e7e1      	b.n	800e364 <_reclaim_reent+0x1c>
 800e3a0:	6961      	ldr	r1, [r4, #20]
 800e3a2:	b111      	cbz	r1, 800e3aa <_reclaim_reent+0x62>
 800e3a4:	4620      	mov	r0, r4
 800e3a6:	f000 f861 	bl	800e46c <_free_r>
 800e3aa:	69e1      	ldr	r1, [r4, #28]
 800e3ac:	b111      	cbz	r1, 800e3b4 <_reclaim_reent+0x6c>
 800e3ae:	4620      	mov	r0, r4
 800e3b0:	f000 f85c 	bl	800e46c <_free_r>
 800e3b4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e3b6:	b111      	cbz	r1, 800e3be <_reclaim_reent+0x76>
 800e3b8:	4620      	mov	r0, r4
 800e3ba:	f000 f857 	bl	800e46c <_free_r>
 800e3be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e3c0:	b111      	cbz	r1, 800e3c8 <_reclaim_reent+0x80>
 800e3c2:	4620      	mov	r0, r4
 800e3c4:	f000 f852 	bl	800e46c <_free_r>
 800e3c8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800e3ca:	b111      	cbz	r1, 800e3d2 <_reclaim_reent+0x8a>
 800e3cc:	4620      	mov	r0, r4
 800e3ce:	f000 f84d 	bl	800e46c <_free_r>
 800e3d2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e3d4:	b111      	cbz	r1, 800e3dc <_reclaim_reent+0x94>
 800e3d6:	4620      	mov	r0, r4
 800e3d8:	f000 f848 	bl	800e46c <_free_r>
 800e3dc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800e3de:	b111      	cbz	r1, 800e3e6 <_reclaim_reent+0x9e>
 800e3e0:	4620      	mov	r0, r4
 800e3e2:	f000 f843 	bl	800e46c <_free_r>
 800e3e6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e3e8:	b111      	cbz	r1, 800e3f0 <_reclaim_reent+0xa8>
 800e3ea:	4620      	mov	r0, r4
 800e3ec:	f000 f83e 	bl	800e46c <_free_r>
 800e3f0:	6a23      	ldr	r3, [r4, #32]
 800e3f2:	b11b      	cbz	r3, 800e3fc <_reclaim_reent+0xb4>
 800e3f4:	4620      	mov	r0, r4
 800e3f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e3fa:	4718      	bx	r3
 800e3fc:	bd70      	pop	{r4, r5, r6, pc}
 800e3fe:	bf00      	nop
 800e400:	24000014 	.word	0x24000014

0800e404 <__libc_init_array>:
 800e404:	b570      	push	{r4, r5, r6, lr}
 800e406:	4d0d      	ldr	r5, [pc, #52]	@ (800e43c <__libc_init_array+0x38>)
 800e408:	4c0d      	ldr	r4, [pc, #52]	@ (800e440 <__libc_init_array+0x3c>)
 800e40a:	1b64      	subs	r4, r4, r5
 800e40c:	10a4      	asrs	r4, r4, #2
 800e40e:	2600      	movs	r6, #0
 800e410:	42a6      	cmp	r6, r4
 800e412:	d109      	bne.n	800e428 <__libc_init_array+0x24>
 800e414:	4d0b      	ldr	r5, [pc, #44]	@ (800e444 <__libc_init_array+0x40>)
 800e416:	4c0c      	ldr	r4, [pc, #48]	@ (800e448 <__libc_init_array+0x44>)
 800e418:	f000 f87e 	bl	800e518 <_init>
 800e41c:	1b64      	subs	r4, r4, r5
 800e41e:	10a4      	asrs	r4, r4, #2
 800e420:	2600      	movs	r6, #0
 800e422:	42a6      	cmp	r6, r4
 800e424:	d105      	bne.n	800e432 <__libc_init_array+0x2e>
 800e426:	bd70      	pop	{r4, r5, r6, pc}
 800e428:	f855 3b04 	ldr.w	r3, [r5], #4
 800e42c:	4798      	blx	r3
 800e42e:	3601      	adds	r6, #1
 800e430:	e7ee      	b.n	800e410 <__libc_init_array+0xc>
 800e432:	f855 3b04 	ldr.w	r3, [r5], #4
 800e436:	4798      	blx	r3
 800e438:	3601      	adds	r6, #1
 800e43a:	e7f2      	b.n	800e422 <__libc_init_array+0x1e>
 800e43c:	0800e62c 	.word	0x0800e62c
 800e440:	0800e62c 	.word	0x0800e62c
 800e444:	0800e62c 	.word	0x0800e62c
 800e448:	0800e630 	.word	0x0800e630

0800e44c <__retarget_lock_acquire_recursive>:
 800e44c:	4770      	bx	lr

0800e44e <__retarget_lock_release_recursive>:
 800e44e:	4770      	bx	lr

0800e450 <memcpy>:
 800e450:	440a      	add	r2, r1
 800e452:	4291      	cmp	r1, r2
 800e454:	f100 33ff 	add.w	r3, r0, #4294967295
 800e458:	d100      	bne.n	800e45c <memcpy+0xc>
 800e45a:	4770      	bx	lr
 800e45c:	b510      	push	{r4, lr}
 800e45e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e462:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e466:	4291      	cmp	r1, r2
 800e468:	d1f9      	bne.n	800e45e <memcpy+0xe>
 800e46a:	bd10      	pop	{r4, pc}

0800e46c <_free_r>:
 800e46c:	b538      	push	{r3, r4, r5, lr}
 800e46e:	4605      	mov	r5, r0
 800e470:	2900      	cmp	r1, #0
 800e472:	d041      	beq.n	800e4f8 <_free_r+0x8c>
 800e474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e478:	1f0c      	subs	r4, r1, #4
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	bfb8      	it	lt
 800e47e:	18e4      	addlt	r4, r4, r3
 800e480:	f000 f83e 	bl	800e500 <__malloc_lock>
 800e484:	4a1d      	ldr	r2, [pc, #116]	@ (800e4fc <_free_r+0x90>)
 800e486:	6813      	ldr	r3, [r2, #0]
 800e488:	b933      	cbnz	r3, 800e498 <_free_r+0x2c>
 800e48a:	6063      	str	r3, [r4, #4]
 800e48c:	6014      	str	r4, [r2, #0]
 800e48e:	4628      	mov	r0, r5
 800e490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e494:	f000 b83a 	b.w	800e50c <__malloc_unlock>
 800e498:	42a3      	cmp	r3, r4
 800e49a:	d908      	bls.n	800e4ae <_free_r+0x42>
 800e49c:	6820      	ldr	r0, [r4, #0]
 800e49e:	1821      	adds	r1, r4, r0
 800e4a0:	428b      	cmp	r3, r1
 800e4a2:	bf01      	itttt	eq
 800e4a4:	6819      	ldreq	r1, [r3, #0]
 800e4a6:	685b      	ldreq	r3, [r3, #4]
 800e4a8:	1809      	addeq	r1, r1, r0
 800e4aa:	6021      	streq	r1, [r4, #0]
 800e4ac:	e7ed      	b.n	800e48a <_free_r+0x1e>
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	685b      	ldr	r3, [r3, #4]
 800e4b2:	b10b      	cbz	r3, 800e4b8 <_free_r+0x4c>
 800e4b4:	42a3      	cmp	r3, r4
 800e4b6:	d9fa      	bls.n	800e4ae <_free_r+0x42>
 800e4b8:	6811      	ldr	r1, [r2, #0]
 800e4ba:	1850      	adds	r0, r2, r1
 800e4bc:	42a0      	cmp	r0, r4
 800e4be:	d10b      	bne.n	800e4d8 <_free_r+0x6c>
 800e4c0:	6820      	ldr	r0, [r4, #0]
 800e4c2:	4401      	add	r1, r0
 800e4c4:	1850      	adds	r0, r2, r1
 800e4c6:	4283      	cmp	r3, r0
 800e4c8:	6011      	str	r1, [r2, #0]
 800e4ca:	d1e0      	bne.n	800e48e <_free_r+0x22>
 800e4cc:	6818      	ldr	r0, [r3, #0]
 800e4ce:	685b      	ldr	r3, [r3, #4]
 800e4d0:	6053      	str	r3, [r2, #4]
 800e4d2:	4408      	add	r0, r1
 800e4d4:	6010      	str	r0, [r2, #0]
 800e4d6:	e7da      	b.n	800e48e <_free_r+0x22>
 800e4d8:	d902      	bls.n	800e4e0 <_free_r+0x74>
 800e4da:	230c      	movs	r3, #12
 800e4dc:	602b      	str	r3, [r5, #0]
 800e4de:	e7d6      	b.n	800e48e <_free_r+0x22>
 800e4e0:	6820      	ldr	r0, [r4, #0]
 800e4e2:	1821      	adds	r1, r4, r0
 800e4e4:	428b      	cmp	r3, r1
 800e4e6:	bf04      	itt	eq
 800e4e8:	6819      	ldreq	r1, [r3, #0]
 800e4ea:	685b      	ldreq	r3, [r3, #4]
 800e4ec:	6063      	str	r3, [r4, #4]
 800e4ee:	bf04      	itt	eq
 800e4f0:	1809      	addeq	r1, r1, r0
 800e4f2:	6021      	streq	r1, [r4, #0]
 800e4f4:	6054      	str	r4, [r2, #4]
 800e4f6:	e7ca      	b.n	800e48e <_free_r+0x22>
 800e4f8:	bd38      	pop	{r3, r4, r5, pc}
 800e4fa:	bf00      	nop
 800e4fc:	2400c84c 	.word	0x2400c84c

0800e500 <__malloc_lock>:
 800e500:	4801      	ldr	r0, [pc, #4]	@ (800e508 <__malloc_lock+0x8>)
 800e502:	f7ff bfa3 	b.w	800e44c <__retarget_lock_acquire_recursive>
 800e506:	bf00      	nop
 800e508:	2400c848 	.word	0x2400c848

0800e50c <__malloc_unlock>:
 800e50c:	4801      	ldr	r0, [pc, #4]	@ (800e514 <__malloc_unlock+0x8>)
 800e50e:	f7ff bf9e 	b.w	800e44e <__retarget_lock_release_recursive>
 800e512:	bf00      	nop
 800e514:	2400c848 	.word	0x2400c848

0800e518 <_init>:
 800e518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e51a:	bf00      	nop
 800e51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e51e:	bc08      	pop	{r3}
 800e520:	469e      	mov	lr, r3
 800e522:	4770      	bx	lr

0800e524 <_fini>:
 800e524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e526:	bf00      	nop
 800e528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e52a:	bc08      	pop	{r3}
 800e52c:	469e      	mov	lr, r3
 800e52e:	4770      	bx	lr
